"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[1175],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1558:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={id:"how-it-works",title:"How It Works",description:"How Casbin Works",keywords:["PERM","request","policy","matcher","effect"],authors:["nodece"]},i=void 0,s={unversionedId:"how-it-works",id:"how-it-works",title:"How It Works",description:"How Casbin Works",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/HowItWorks.mdx",sourceDirName:".",slug:"/how-it-works",permalink:"/ja/docs/how-it-works",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/HowItWorks.mdx",tags:[],version:"current",frontMatter:{id:"how-it-works",title:"How It Works",description:"How Casbin Works",keywords:["PERM","request","policy","matcher","effect"],authors:["nodece"]},sidebar:"docs",previous:{title:"\u306f\u3058\u3081\u306b",permalink:"/ja/docs/get-started"},next:{title:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb",permalink:"/ja/docs/tutorials"}},l={},c=[{value:"\u30ea\u30af\u30a8\u30b9\u30c8",id:"\u30ea\u30af\u30a8\u30b9\u30c8",level:3},{value:"\u30dd\u30ea\u30b7\u30fc",id:"\u30dd\u30ea\u30b7\u30fc",level:3},{value:"Matcher",id:"matcher",level:3},{value:"\u52b9\u679c",id:"\u52b9\u679c",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Casbin \u3067\u306f\u3001\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u30e2\u30c7\u30eb\u306f ",(0,a.kt)("strong",{parentName:"p"},"PERM \u30e1\u30bf\u30e2\u30c7\u30eb (Policy, Effect, Request, Matchers)")," \u306b\u57fa\u3065\u3044\u3066 CONF \u30d5\u30a1\u30a4\u30eb\u306b\u62bd\u8c61\u5316\u3055\u308c\u307e\u3059\u3002 Switching or upgrading the authorization mechanism for a project is as simple as modifying a configuration. \u5229\u7528\u53ef\u80fd\u306a\u30e2\u30c7\u30eb\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u72ec\u81ea\u306e\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u30e2\u30c7\u30eb\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u3001RBAC\u30ed\u30fc\u30eb\u3068ABAC\u5c5e\u6027\u30921\u3064\u306e\u30e2\u30c7\u30eb\u5185\u306b\u307e\u3068\u3081\u3066\u30011\u3064\u306e\u30dd\u30ea\u30b7\u30fc\u30eb\u30fc\u30eb\u3092\u5171\u6709\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("p",null,"The PERM model is composed of four foundations: Policy, Effect, Request, and Matchers. These foundations describe the relationship between resources and users."),(0,a.kt)("h3",{id:"\u30ea\u30af\u30a8\u30b9\u30c8"},"\u30ea\u30af\u30a8\u30b9\u30c8"),(0,a.kt)("p",null,"Defines the request parameters. A basic request is a tuple object, requiring at least a subject (accessed entity), object (accessed resource), and action (access method)."),(0,a.kt)("p",null,"\u4f8b\u3048\u3070\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059: ",(0,a.kt)("inlineCode",{parentName:"p"},"r={sub,obj,act}")),(0,a.kt)("p",null,"This definition specifies the parameter names and ordering required by the access control matching function."),(0,a.kt)("h3",{id:"\u30dd\u30ea\u30b7\u30fc"},"\u30dd\u30ea\u30b7\u30fc"),(0,a.kt)("p",null,"Defines the model for the access strategy. It specifies the name and order of the fields in the Policy rule document."),(0,a.kt)("p",null,"\u4f8b\u3048\u3070: ",(0,a.kt)("inlineCode",{parentName:"p"},"p={sub, obj, act}")," \u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"p={sub, obj, act, eft}")),(0,a.kt)("p",null,"Note: If eft (policy result) is not defined, the result field in the policy file will not be read, and the matching policy result will be allowed by default."),(0,a.kt)("h3",{id:"matcher"},"Matcher"),(0,a.kt)("p",null,"Defines the matching rules for Request and Policy."),(0,a.kt)("p",null,"For example: ",(0,a.kt)("inlineCode",{parentName:"p"},"m = r.sub == p.sub && r.act == p.act && r.obj == p.obj")," This simple and common matching rule means that if the requested parameters (entities, resources, and methods) are equal to those found in the policy, then the policy result (",(0,a.kt)("inlineCode",{parentName:"p"},"p.eft"),") is returned. \u6226\u7565\u306e\u7d50\u679c\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"p.eft"),"\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("h3",{id:"\u52b9\u679c"},"\u52b9\u679c"),(0,a.kt)("p",null,"Performs a logical combination judgment on the matching results of Matchers."),(0,a.kt)("p",null,"\u4f8b: ",(0,a.kt)("inlineCode",{parentName:"p"},"e = some(where(p.eft == allow))")),(0,a.kt)("p",null,"This statement means that if the matching strategy result ",(0,a.kt)("inlineCode",{parentName:"p"},"p.eft")," has the result of (some) allow, then the final result is true."),(0,a.kt)("p",null,"Let's look at another example:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"e = some(where (p.eft == allow)) && !some(where (p.eft == deny))")),(0,a.kt)("p",null,"The logical meaning of this example combination is: if there is a strategy that matches the result of allow and no strategy that matches the result of deny, the result is true. In other words, it is true when the matching strategies are all allow. If there is any deny, both are false (more simply, when allow and deny exist at the same time, deny takes precedence)."),(0,a.kt)("p",null,"Casbin\u306e\u6700\u3082\u57fa\u672c\u7684\u3067\u6700\u3082\u7c21\u5358\u306a\u30e2\u30c7\u30eb\u306fACL\u3067\u3059\u3002 The model CONF for ACL is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"# Request definition\n[request_definition]\nr = sub, obj, act\n\n# Policy definition\n[policy_definition]\np = sub, obj, act\n\n# Policy effect\n[policy_effect]\ne = some(where (p.eft == allow))\n\n# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n\n")),(0,a.kt)("p",null,"An example policy for the ACL model is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, data1, read\np, bob, data2, write\n")),(0,a.kt)("p",null,"This means:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"alice can read data1"),(0,a.kt)("li",{parentName:"ul"},"\u30dc\u30d6\u306f\u30c7\u30fc\u30bf2\u3092\u66f8\u304d\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059")),(0,a.kt)("p",null,"We also support multi-line mode by appending '","\\","' in the end:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj \\\n  && r.act == p.act\n")),(0,a.kt)("p",null,"Furthermore, if you are using ABAC, you can try the 'in' operator as shown in the following example for the Casbin ",(0,a.kt)("strong",{parentName:"p"},"golang")," edition (jCasbin and Node-Casbin are not supported yet):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"# Matchers\n[matchers]\nm = r.obj == p.obj && r.act == p.act || r.obj in ('data2', 'data3')\n")),(0,a.kt)("p",null,"But you ",(0,a.kt)("strong",{parentName:"p"},"SHOULD")," make sure that the length of the array is ",(0,a.kt)("strong",{parentName:"p"},"MORE")," than ",(0,a.kt)("strong",{parentName:"p"},"1"),", otherwise it will cause a panic."),(0,a.kt)("p",null,"For more operators, you may take a look at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Knetic/govaluate"},"govaluate"),"."))}u.isMDXComponent=!0}}]);