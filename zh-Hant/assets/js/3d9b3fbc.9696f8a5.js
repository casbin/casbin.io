"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[5669],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3003:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={id:"api-overview",title:"API Overview",description:"Casbin API Usage",keywords:["API overview","API","API usage"],authors:["hsluoyz"]},o=void 0,l={unversionedId:"api-overview",id:"api-overview",title:"API Overview",description:"Casbin API Usage",source:"@site/docs/APIOverview.mdx",sourceDirName:".",slug:"/api-overview",permalink:"/zh-Hant/docs/api-overview",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/APIOverview.mdx",tags:[],version:"current",frontMatter:{id:"api-overview",title:"API Overview",description:"Casbin API Usage",keywords:["API overview","API","API usage"],authors:["hsluoyz"]},sidebar:"docs",previous:{title:"API",permalink:"/zh-Hant/docs/category/api"},next:{title:"Management API",permalink:"/zh-Hant/docs/management-api"}},s={},d=[{value:"Enforce API",id:"enforce-api",level:2},{value:"EnforceEx API",id:"enforceex-api",level:2},{value:"Management API",id:"management-api",level:2},{value:"Get API",id:"get-api",level:3},{value:"Add, Delete, Update API",id:"add-delete-update-api",level:3},{value:"AddEx API",id:"addex-api",level:3},{value:"RBAC API",id:"rbac-api",level:2}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This overview only shows you how to use Casbin APIs and doesn't explain how Casbin is installed or how it works. You can find those tutorials here: ",(0,r.kt)("a",{parentName:"p",href:"/docs/get-started"},"Installation of Casbin")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/how-it-works"},"How Casbin Works"),". So, when you start reading this tutorial, we assume that you have fully installed and imported Casbin into your code."),(0,r.kt)("h2",{id:"enforce-api"},"Enforce API"),(0,r.kt)("p",null,"Let's start with the Enforce APIs of Casbin. We will load a RBAC model from ",(0,r.kt)("inlineCode",{parentName:"p"},"model.conf")," and load policies from ",(0,r.kt)("inlineCode",{parentName:"p"},"policy.csv"),". You can learn about the Model syntax ",(0,r.kt)("a",{parentName:"p",href:"/docs/syntax-for-models"},"here"),", and we won't discuss it in this tutorial. We assume that you can understand the config files given below:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"model.conf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"policy.csv")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"p, admin, data1, read\np, admin, data1, write\np, admin, data2, read\np, admin, data2, write\np, alice, data1, read\np, bob, data2, write\ng, amber, admin\ng, abc, admin\n")),(0,r.kt)("p",null,"After reading the config files, please read the following code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Load information from files.\nenforcer, err := casbin.NewEnforcer("./example/model.conf", "./example/policy.csv")\nif err != nil {\n    log.Fatalf("Error, detail: %s", err)\n}\nok, err := enforcer.Enforce("alice", "data1", "read")\n')),(0,r.kt)("p",null,"This code loads the access control model and policies from local files. The function ",(0,r.kt)("inlineCode",{parentName:"p"},"casbin.NewEnforcer()")," will return an enforcer. It will recognize its two parameters as file paths and load the files from there. Errors occurred in the process are stored in the variable ",(0,r.kt)("inlineCode",{parentName:"p"},"err"),". This code uses the default adapter to load the model and policies, and of course, you can achieve the same result by using a third-party adapter."),(0,r.kt)("p",null,"The code ",(0,r.kt)("inlineCode",{parentName:"p"},'ok, err := enforcer.Enforce("alice", "data1", "read")')," is used to confirm access permissions. If Alice can access data1 with the read operation, the returned value of ",(0,r.kt)("inlineCode",{parentName:"p"},"ok")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"; otherwise, it will be ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". In this example, the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"ok")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h2",{id:"enforceex-api"},"EnforceEx API"),(0,r.kt)("p",null,"Sometimes you may wonder which policy allowed the request, so we have prepared the function ",(0,r.kt)("inlineCode",{parentName:"p"},"EnforceEx()"),". You can use it like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'ok, reason, err := enforcer.EnforceEx("amber", "data1", "read")\nfmt.Println(ok, reason) // true [admin data1 read]\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"EnforceEx()")," function will return the exact policy string in the return value ",(0,r.kt)("inlineCode",{parentName:"p"},"reason"),". In this example, ",(0,r.kt)("inlineCode",{parentName:"p"},"amber")," is an ",(0,r.kt)("inlineCode",{parentName:"p"},"admin")," role, so the policy ",(0,r.kt)("inlineCode",{parentName:"p"},"p, admin, data1, read")," allowed this request to be ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". The output of this code is in the comment."),(0,r.kt)("p",null,"Casbin has provided many APIs similar to this one. These APIs add some extra functions to the basic ones. They include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ok, err := enforcer.EnforceWithMatcher(matcher, request)")),(0,r.kt)("p",{parentName:"li"},"This function uses a matcher.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ok, reason, err := enforcer.EnforceExWithMatcher(matcher, request)")),(0,r.kt)("p",{parentName:"li"},"This is a combination of ",(0,r.kt)("inlineCode",{parentName:"p"},"EnforceWithMatcher()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"EnforceEx()"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"boolArray, err := enforcer.BatchEnforce(requests)")),(0,r.kt)("p",{parentName:"li"},"This function allows for a list of jobs and returns an array."))),(0,r.kt)("p",null,"This is a simple use case of Casbin. You can use Casbin to start an authorization server using these APIs. We will show you some other types of APIs in the following paragraphs."),(0,r.kt)("h2",{id:"management-api"},"Management API"),(0,r.kt)("h3",{id:"get-api"},"Get API"),(0,r.kt)("p",null,"These APIs are used to retrieve specific objects in policies. In this example, we are loading an enforcer and retrieving something from it."),(0,r.kt)("p",null,"Please take a look at the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'enforcer, err := casbin.NewEnforcer("./example/model.conf", "./example/policy.csv")\nif err != nil {\n    fmt.Printf("Error, details: %s\\n", err)\n}\nallSubjects := enforcer.GetAllSubjects()\nfmt.Println(allSubjects)\n')),(0,r.kt)("p",null,"Similar to the previous example, the first four lines are used to load necessary information from local files. We won't discuss that here any further."),(0,r.kt)("p",null,"The code ",(0,r.kt)("inlineCode",{parentName:"p"},"allSubjects := enforcer.GetAllSubjects()")," retrieves all the subjects in the policy file and returns them as an array. We then print that array."),(0,r.kt)("p",null,"Typically, the output of the code should be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"[admin alice bob]\n")),(0,r.kt)("p",null,"You can also change the function ",(0,r.kt)("inlineCode",{parentName:"p"},"GetAllSubjects()")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"GetAllNamedSubjects()")," to get the list of subjects that appear in the current named policy."),(0,r.kt)("p",null,"Similarly, we have prepared ",(0,r.kt)("inlineCode",{parentName:"p"},"GetAll")," functions for ",(0,r.kt)("inlineCode",{parentName:"p"},"Objects, Actions, Roles"),". To access these functions, you simply need to replace the word ",(0,r.kt)("inlineCode",{parentName:"p"},"Subject")," in the function name with the desired category."),(0,r.kt)("p",null,"Additionally, there are more getters available for policies. The method of calling and the return values are similar to the ones mentioned above."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"policy = e.GetPolicy()")," retrieves all the authorization rules in the policy."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'filteredPolicy := e.GetFilteredPolicy(0, "alice")')," retrieves all the authorization rules in the policy with specified field filters."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'namedPolicy := e.GetNamedPolicy("p")')," retrieves all the authorization rules in the named policy."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'filteredNamedPolicy = e.GetFilteredNamedPolicy("p", 0, "bob")')," retrieves all the authorization rules in the named policy with specified field filters."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"groupingPolicy := e.GetGroupingPolicy()")," retrieves all the role inheritance rules in the policy."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'filteredGroupingPolicy := e.GetFilteredGroupingPolicy(0, "alice")')," retrieves all the role inheritance rules in the policy with specified field filters."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'namedGroupingPolicy := e.GetNamedGroupingPolicy("g")')," retrieves all the role inheritance rules in the policy."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'namedGroupingPolicy := e.GetFilteredNamedGroupingPolicy("g", 0, "alice")')," retrieves all the role inheritance rules in the policy with specified field filters.")),(0,r.kt)("h3",{id:"add-delete-update-api"},"Add, Delete, Update API"),(0,r.kt)("p",null,"Casbin provides a variety of APIs for dynamically adding, deleting, or modifying policies at runtime."),(0,r.kt)("p",null,"The following code demonstrates how to add, remove, and update policies, as well as how to check if a policy exists:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// load information from files\nenforcer, err := casbin.NewEnforcer("./example/model.conf", "./example/policy.csv")\nif err != nil {\n    fmt.Printf("Error, details: %s\\n", err)\n}\n\n// add a policy and use HasPolicy() to confirm\nenforcer.AddPolicy("added_user", "data1", "read")\nhasPolicy := enforcer.HasPolicy("added_user", "data1", "read")\nfmt.Println(hasPolicy) // true, the policy was added successfully\n\n// remove a policy and use HasPolicy() to confirm\nenforcer.RemovePolicy("alice", "data1", "read")\nhasPolicy = enforcer.HasPolicy("alice", "data1", "read")\nfmt.Println(hasPolicy) // false, the policy was removed successfully\n\n// update a policy and use HasPolicy() to confirm\nenforcer.UpdatePolicy([]string{"added_user", "data1", "read"}, []string{"added_user", "data1", "write"})\nhasPolicy = enforcer.HasPolicy("added_user", "data1", "read")\nfmt.Println(hasPolicy) // false, the original policy has expired\nhasPolicy = enforcer.HasPolicy("added_user", "data1", "write")\nfmt.Println(hasPolicy) // true, the new policy is in effect\n')),(0,r.kt)("p",null,"By using these APIs, you can edit your policies dynamically. Similarly, we have provided similar APIs for ",(0,r.kt)("inlineCode",{parentName:"p"},"FilteredPolicy, NamedPolicy, FilteredNamedPolicy, GroupingPolicy, NamedGroupingPolicy, FilteredGroupingPolicy, FilteredNamedGroupingPolicy"),". To use them, simply replace the word ",(0,r.kt)("inlineCode",{parentName:"p"},"Policy")," in the function name with the appropriate category."),(0,r.kt)("p",null,"Furthermore, by changing the parameters to arrays, you can perform batch editing of your policies."),(0,r.kt)("p",null,"For example, consider functions like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'enforcer.UpdatePolicy([]string{"eve", "data3", "read"}, []string{"eve", "data3", "write"})\n')),(0,r.kt)("p",null,"If we change ",(0,r.kt)("inlineCode",{parentName:"p"},"Policy")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Policies")," and modify the parameters as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'enforcer.UpdatePolicies([][]string{{"eve", "data3", "read"}, {"jack", "data3", "read"}}, [][]string{{"eve", "data3", "write"}, {"jack", "data3", "write"}})\n')),(0,r.kt)("p",null,"then we can perform batch editing of these policies."),(0,r.kt)("p",null,"The same operations can also be applied to ",(0,r.kt)("inlineCode",{parentName:"p"},"GroupingPolicy, NamedGroupingPolicy"),"."),(0,r.kt)("h3",{id:"addex-api"},"AddEx API"),(0,r.kt)("p",null,"Casbin provides the AddEx series of APIs to help users add rules in batches."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"AddPoliciesEx(rules [][]string) (bool, error)\nAddNamedPoliciesEx(ptype string, rules [][]string) (bool, error)\nAddGroupingPoliciesEx(rules [][]string) (bool, error)\nAddNamedGroupingPoliciesEx(ptype string, rules [][]string) (bool, error)\nSelfAddPoliciesEx(sec string, ptype string, rules [][]string) (bool, error) \n")),(0,r.kt)("p",null,"The difference between these methods and the methods without the Ex suffix is that if one of the rules already exists, they will continue checking the next rule instead of returning false immediately."),(0,r.kt)("p",null,"For example, let's compare ",(0,r.kt)("inlineCode",{parentName:"p"},"AddPolicies")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AddPoliciesEx"),"."),(0,r.kt)("p",null,"You can run and observe the following code by copying it into the test under casbin."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func TestDemo(t *testing.T) {\n    e, err := NewEnforcer("examples/basic_model.conf", "examples/basic_policy.csv")\n    if err != nil {\n        fmt.Printf("Error, details: %s\\n", err)\n    }\n    e.ClearPolicy()\n    e.AddPolicy("user1", "data1", "read")\n    fmt.Println(e.GetPolicy())\n    testGetPolicy(t, e, [][]string{{"user1", "data1", "read"}})\n\n    // policy {"user1", "data1", "read"} now exists\n\n    // Use AddPolicies to add rules in batches\n    ok, _ := e.AddPolicies([][]string{{"user1", "data1", "read"}, {"user2", "data2", "read"}})\n    fmt.Println(e.GetPolicy())\n    // {"user2", "data2", "read"} failed to add because {"user1", "data1", "read"} already exists\n    // AddPolicies returns false and no other policies are checked, even though they may not exist in the existing ruleset\n    // ok == false\n    fmt.Println(ok)\n    testGetPolicy(t, e, [][]string{{"user1", "data1", "read"}})\n\n    // Use AddPoliciesEx to add rules in batches\n    ok, _ = e.AddPoliciesEx([][]string{{"user1", "data1", "read"}, {"user2", "data2", "read"}})\n    fmt.Println(e.GetPolicy())\n    // {"user2", "data2", "read"} is added successfully\n    // because AddPoliciesEx automatically filters the existing {"user1", "data1", "read"}\n    // ok == true\n    fmt.Println(ok)\n    testGetPolicy(t, e, [][]string{{"user1", "data1", "read"}, {"user2", "data2", "read"}})\n}\n')),(0,r.kt)("h2",{id:"rbac-api"},"RBAC API"),(0,r.kt)("p",null,"Casbin provides some APIs for you to modify the RBAC model and policies. If you are familiar with RBAC, you can easily use these APIs."),(0,r.kt)("p",null,"Here, we only show you how to use the RBAC APIs of Casbin and won't talk about RBAC itself. You can get more details ",(0,r.kt)("a",{parentName:"p",href:"/docs/rbac"},"here"),"."),(0,r.kt)("p",null,"We use the following code to load the model and policies, just like before."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'enforcer, err := casbin.NewEnforcer("./example/model.conf", "./example/policy.csv")\nif err != nil {\n    fmt.Printf("Error, details: %s\\n", err)\n}\n')),(0,r.kt)("p",null,"Then, we can use an instance of the Enforcer ",(0,r.kt)("inlineCode",{parentName:"p"},"enforcer")," to access these APIs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'roles, err := enforcer.GetRolesForUser("amber")\nfmt.Println(roles) // [admin]\nusers, err := enforcer.GetUsersForRole("admin")\nfmt.Println(users) // [amber abc]\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GetRolesForUser()")," returns an array that contains all the roles that amber has. In this example, amber has only one role, which is admin, so the array ",(0,r.kt)("inlineCode",{parentName:"p"},"roles")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"[admin]"),". Similarly, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"GetUsersForRole()")," to get the users who belong to a role. The return value of this function is also an array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'enforcer.HasRoleForUser("amber", "admin") // true\n')),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"HasRoleForUser()")," to confirm whether the user belongs to the role. In this example, amber is a member of admin, so the return value of the function is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'fmt.Println(enforcer.Enforce("bob", "data2", "write")) // true\nenforcer.DeletePermission("data2", "write")\nfmt.Println(enforcer.Enforce("bob", "data2", "write")) // false\n')),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"DeletePermission()")," to delete a permission."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'fmt.Println(enforcer.Enforce("alice", "data1", "read")) // true\nenforcer.DeletePermissionForUser("alice", "data1", "read")\nfmt.Println(enforcer.Enforce("alice", "data1", "read")) // false\n')),(0,r.kt)("p",null,"And use ",(0,r.kt)("inlineCode",{parentName:"p"},"DeletePermissionForUser()")," to delete a permission for a user."),(0,r.kt)("p",null,"Casbin has many APIs like this. Their calling methods and return values have the same style as the above APIs. You can find these APIs in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/rbac-api"},"next documents"),"."))}p.isMDXComponent=!0}}]);