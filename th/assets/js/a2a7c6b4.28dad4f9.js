"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[7700],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,m=p["".concat(l,".").concat(d)]||p[d]||h[d]||i;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const i={id:"envoy",title:"Authorization of Service Mesh through Envoy",description:"Authorization of Service Mesh through Envoy",keywords:["Envoy","Envoy-authz","Istio"],authors:["ashish493"]},a=void 0,s={unversionedId:"envoy",id:"envoy",title:"Authorization of Service Mesh through Envoy",description:"Authorization of Service Mesh through Envoy",source:"@site/i18n/th/docusaurus-plugin-content-docs/current/EnvoyAuthz.mdx",sourceDirName:".",slug:"/envoy",permalink:"/th/docs/envoy",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/EnvoyAuthz.mdx",tags:[],version:"current",frontMatter:{id:"envoy",title:"Authorization of Service Mesh through Envoy",description:"Authorization of Service Mesh through Envoy",keywords:["Envoy","Envoy-authz","Istio"],authors:["ashish493"]},sidebar:"docs",previous:{title:"Admission Webhook for K8s",permalink:"/th/docs/k8s-gatekeeper"},next:{title:"Management",permalink:"/th/docs/category/management"}},l={},u=[{value:"Requirements",id:"requirements",level:2},{value:"Working of the Middleware",id:"working-of-the-middleware",level:2},{value:"Usage",id:"usage",level:2},{value:"Integrating with Istio",id:"integrating-with-istio",level:2}],c={toc:u};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/casbin/envoy-authz"},"Envoy-authz")," is a middleware for Envoy that performs external RBAC & ABAC authorization through casbin. This middleware uses ",(0,o.kt)("a",{parentName:"p",href:"https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/ext_authz_filter.html"},"Envoy's external authorization API")," via a gRPC server. This proxy can be deployed on any type of Envoy-based service mesh, such as Istio."),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Envoy 1.17+"),(0,o.kt)("li",{parentName:"ul"},"Istio or any other type of service mesh"),(0,o.kt)("li",{parentName:"ul"},"grpc dependencies")),(0,o.kt)("p",null,"Dependencies are managed using ",(0,o.kt)("inlineCode",{parentName:"p"},"go.mod"),"."),(0,o.kt)("h2",{id:"working-of-the-middleware"},"Working of the Middleware"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A client makes an HTTP request."),(0,o.kt)("li",{parentName:"ul"},"The Envoy proxy sends the request to the gRPC server."),(0,o.kt)("li",{parentName:"ul"},"The gRPC server authorizes the request based on casbin policies."),(0,o.kt)("li",{parentName:"ul"},"If authorized, the request is forwarded; otherwise, it is denied.")),(0,o.kt)("p",null,"The gRPC server is based on protocol buffer from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/envoyproxy/envoy/blob/master/api/envoy/service/auth/v2alpha/external_auth.proto"},"external","_","auth.proto")," in Envoy."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"// A generic interface for performing authorization checks on incoming\n// requests to a networked service.\nservice Authorization {\n  // Performs an authorization check based on the attributes associated with the\n  // incoming request and returns a status of `OK` or not `OK`.\n  rpc Check(v2.CheckRequest) returns (v2.CheckResponse);\n}\n")),(0,o.kt)("p",null,"From the above proto file, we need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Check()")," service in the authorization server."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Define the Casbin policies in the config files following this ",(0,o.kt)("a",{parentName:"li",href:"/docs/how-it-works"},"guide"),".")),(0,o.kt)("p",null,"You can verify/test your policies using the online ",(0,o.kt)("a",{parentName:"p",href:"/editor"},"casbin-editor"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Start the authentication server by running:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go build .\n./authz\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Load the Envoy configuration:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"envoy -c authz.yaml -l info\n")),(0,o.kt)("p",null,"Once Envoy starts, it will intercept requests for the authorization process."),(0,o.kt)("h2",{id:"integrating-with-istio"},"Integrating with Istio"),(0,o.kt)("p",null,"To make this middleware work, you need to send custom headers containing usernames in the JWT token or headers. You can refer to the official ",(0,o.kt)("a",{parentName:"p",href:"https://istio.io/v1.4/docs/tasks/policy-enforcement/control-headers/"},"Istio documentation")," for more information on modifying ",(0,o.kt)("inlineCode",{parentName:"p"},"Request Headers"),"."))}h.isMDXComponent=!0}}]);