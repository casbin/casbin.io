"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[7288],{3905:(e,t,o)=>{o.d(t,{Zo:()=>d,kt:()=>m});var n=o(7294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(o),m=a,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||r;return o?n.createElement(f,i(i({ref:t},d),{},{components:o})):n.createElement(f,i({ref:t},d))}));function m(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=o[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},9199:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var n=o(7462),a=(o(7294),o(3905));const r={id:"how-it-works",title:"How It Works",description:"C\xf3mo funciona Casbin",keywords:["PERM","request","policy","matcher","effect"],authors:["nodece"]},i=void 0,l={unversionedId:"how-it-works",id:"how-it-works",title:"How It Works",description:"C\xf3mo funciona Casbin",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/HowItWorks.mdx",sourceDirName:".",slug:"/how-it-works",permalink:"/es/docs/how-it-works",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/HowItWorks.mdx",tags:[],version:"current",frontMatter:{id:"how-it-works",title:"How It Works",description:"C\xf3mo funciona Casbin",keywords:["PERM","request","policy","matcher","effect"],authors:["nodece"]},sidebar:"docs",previous:{title:"Get Started",permalink:"/es/docs/get-started"},next:{title:"Tutorials",permalink:"/es/docs/tutorials"}},s={},c=[{value:"Request",id:"request",level:3},{value:"Policy",id:"policy",level:3},{value:"Matcher",id:"matcher",level:3},{value:"Effect",id:"effect",level:3}],d={toc:c};function p(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"En Casbin, un modelo de control de acceso se abstrae en un archivo CONF basado en el ",(0,a.kt)("strong",{parentName:"p"},"metamodelo PERM (Pol\xedtica, Efecto, Solicitud, Coincidencias)"),". Cambiar o actualizar el mecanismo de autorizaci\xf3n para un proyecto es tan simple como modificar una configuraci\xf3n. Puedes personalizar tu propio modelo de control de acceso combinando los modelos disponibles. Por ejemplo, puedes combinar roles RBAC y atributos ABAC juntos dentro de un mismo modelo y compartir un conjunto de reglas de pol\xedtica."),(0,a.kt)("p",null,"El modelo PERM est\xe1 compuesto por cuatro fundamentos: Pol\xedtica, Efecto, Solicitud y Coincidencias. Estos fundamentos describen la relaci\xf3n entre recursos y usuarios."),(0,a.kt)("h3",{id:"request"},"Request"),(0,a.kt)("p",null,"Define los par\xe1metros de la solicitud. Una solicitud b\xe1sica es un objeto tupla, que requiere al menos un sujeto (entidad accedida), objeto (recurso accedido) y acci\xf3n (m\xe9todo de acceso)."),(0,a.kt)("p",null,"Por ejemplo, una definici\xf3n de solicitud puede verse as\xed:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"r={sub,obj,act}")),(0,a.kt)("h3",{id:"policy"},"Policy"),(0,a.kt)("p",null,"Esta definici\xf3n especifica los nombres de los par\xe1metros y el orden requerido por la funci\xf3n de coincidencia de control de acceso. Define el modelo para la estrategia de acceso."),(0,a.kt)("p",null,"Especifica el nombre y el orden de los campos en el documento de regla de Pol\xedtica."),(0,a.kt)("p",null,"Por ejemplo:"),(0,a.kt)("h3",{id:"matcher"},"Matcher"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"p={sub, obj, act}")," o ",(0,a.kt)("inlineCode",{parentName:"p"},"p={sub, obj, act, eft}")),(0,a.kt)("p",null,"Nota: Si eft (resultado de la pol\xedtica) no est\xe1 definido, el campo del resultado en el archivo de pol\xedtica no se leer\xe1, y el resultado de la pol\xedtica coincidente se permitir\xe1 por defecto. Define las reglas de coincidencia para la Solicitud y la Pol\xedtica."),(0,a.kt)("h3",{id:"effect"},"Effect"),(0,a.kt)("p",null,"Por ejemplo: ",(0,a.kt)("inlineCode",{parentName:"p"},"m = r.sub == p.sub && r.act == p.act && r.obj == p.obj")),(0,a.kt)("p",null,"Esta regla de coincidencia simple y com\xfan significa que si los par\xe1metros solicitados (entidades, recursos y m\xe9todos) son iguales a los encontrados en la pol\xedtica, entonces se devuelve el resultado de la pol\xedtica (",(0,a.kt)("inlineCode",{parentName:"p"},"p.eft"),")."),(0,a.kt)("p",null,"El resultado de la estrategia se guardar\xe1 en ",(0,a.kt)("inlineCode",{parentName:"p"},"p.eft"),"."),(0,a.kt)("p",null,"Realiza un juicio de combinaci\xf3n l\xf3gica sobre los resultados de coincidencia de Coincidencias."),(0,a.kt)("p",null,"Por ejemplo: ",(0,a.kt)("inlineCode",{parentName:"p"},"e = some(where(p.eft == allow))")),(0,a.kt)("p",null,"Esta declaraci\xf3n significa que si el resultado de la estrategia de coincidencia ",(0,a.kt)("inlineCode",{parentName:"p"},"p.eft")," tiene el resultado de (alg\xfan) permitir, entonces el resultado final es verdadero. Veamos otro ejemplo: ",(0,a.kt)("inlineCode",{parentName:"p"},"e = some(where (p.eft == allow)) && !some(where (p.eft == deny))")),(0,a.kt)("p",null,"El significado l\xf3gico de esta combinaci\xf3n de ejemplo es: si hay una estrategia que coincide con el resultado de permitir y ninguna estrategia que coincida con el resultado de denegar, el resultado es verdadero. En otras palabras, es verdadero cuando las estrategias de coincidencia son todas de permitir."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"# Request definition\n[request_definition]\nr = sub, obj, act\n\n# Policy definition\n[policy_definition]\np = sub, obj, act\n\n# Policy effect\n[policy_effect]\ne = some(where (p.eft == allow))\n\n# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n\n")),(0,a.kt)("p",null,"Si hay alg\xfan denegar, ambos son falsos (m\xe1s simplemente, cuando permitir y denegar existen al mismo tiempo, la denegaci\xf3n tiene prioridad)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, data1, read\np, bob, data2, write\n")),(0,a.kt)("p",null,"El modelo m\xe1s b\xe1sico y simple en Casbin es ACL."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"El modelo CONF para ACL es el siguiente:"),(0,a.kt)("li",{parentName:"ul"},"Un ejemplo de pol\xedtica para el modelo ACL es:")),(0,a.kt)("p",null,"Esto significa:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj \\\n  && r.act == p.act\n")),(0,a.kt)("p",null,"alice puede leer data1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"# Matchers\n[matchers]\nm = r.obj == p.obj && r.act == p.act || r.obj in ('data2', 'data3')\n")),(0,a.kt)("p",null,"Tambi\xe9n admitimos el modo de m\xfaltiples l\xedneas agregando '' al final:"),(0,a.kt)("p",null,"For more operators, you may take a look at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/casbin/govaluate"},"govaluate"),"."))}p.isMDXComponent=!0}}]);