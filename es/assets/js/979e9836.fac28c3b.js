"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[3129],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>u});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),p=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},c=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=o,b=m["".concat(s,".").concat(u)]||m[u]||d[u]||r;return t?n.createElement(b,i(i({ref:a},c),{},{components:t})):n.createElement(b,i({ref:a},c))}));function u(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3754:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>b,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=t(7462),o=(t(7294),t(3905));const r={id:"syntax-for-models",title:"Syntax for Models",description:"Sintaxis para Modelos",keywords:["syntax"],authors:["nodece"]},i=void 0,l={unversionedId:"syntax-for-models",id:"syntax-for-models",title:"Syntax for Models",description:"Sintaxis para Modelos",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/SyntaxForModels.mdx",sourceDirName:".",slug:"/syntax-for-models",permalink:"/es/docs/syntax-for-models",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/SyntaxForModels.mdx",tags:[],version:"current",frontMatter:{id:"syntax-for-models",title:"Syntax for Models",description:"Sintaxis para Modelos",keywords:["syntax"],authors:["nodece"]},sidebar:"docs",previous:{title:"Supported Models",permalink:"/es/docs/supported-models"},next:{title:"Effector",permalink:"/es/docs/effector"}},s={},p=[{value:"Definici\xf3n de solicitud",id:"definici\xf3n-de-solicitud",level:2},{value:"Definici\xf3n de Pol\xedtica",id:"definici\xf3n-de-pol\xedtica",level:2},{value:"Efecto de Pol\xedtica",id:"efecto-de-pol\xedtica",level:2},{value:"Matchers",id:"matchers",level:2},{value:"Orden de las expresiones en los comparadores",id:"orden-de-las-expresiones-en-los-comparadores",level:3},{value:"Tipos de Secci\xf3n M\xfaltiples",id:"tipos-de-secci\xf3n-m\xfaltiples",level:2},{value:"Gram\xe1tica Especial",id:"gram\xe1tica-especial",level:2},{value:"Evaluador de Expresiones",id:"evaluador-de-expresiones",level:2}],c=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",a)},d=c("Tabs"),m=c("TabItem"),u={toc:p};function b(e){let{components:a,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Una configuraci\xf3n de modelo (CONF) debe tener al menos cuatro secciones: ",(0,o.kt)("inlineCode",{parentName:"p"},"[request_definition]"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"[policy_definition]"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"[policy_effect]"),", y ",(0,o.kt)("inlineCode",{parentName:"p"},"[matchers]"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Si un modelo utiliza Control de Acceso Basado en Roles (RBAC), tambi\xe9n debe incluir la secci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"[role_definition]"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Una configuraci\xf3n de modelo (CONF) puede contener comentarios. Los comentarios comienzan con el s\xedmbolo ",(0,o.kt)("inlineCode",{parentName:"p"},"#"),", y todo despu\xe9s del s\xedmbolo ",(0,o.kt)("inlineCode",{parentName:"p"},"#")," ser\xe1 comentado."))),(0,o.kt)("h2",{id:"definici\xf3n-de-solicitud"},"Definici\xf3n de solicitud"),(0,o.kt)("p",null,"La secci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"[request_definition]")," define los argumentos en la funci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"e.Enforce(...)"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n")),(0,o.kt)("p",null,"En este ejemplo, ",(0,o.kt)("inlineCode",{parentName:"p"},"sub"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"obj")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"act")," representan el tr\xedo cl\xe1sico de acceso: el sujeto (entidad que accede), el objeto (recurso accedido) y la acci\xf3n (m\xe9todo de acceso). Sin embargo, puedes personalizar tu propio formato de solicitud. Por ejemplo, puedes usar ",(0,o.kt)("inlineCode",{parentName:"p"},"sub, act")," si no necesitas especificar un recurso particular, o ",(0,o.kt)("inlineCode",{parentName:"p"},"sub, sub2, obj, act")," si tienes dos entidades que acceden."),(0,o.kt)("h2",{id:"definici\xf3n-de-pol\xedtica"},"Definici\xf3n de Pol\xedtica"),(0,o.kt)("p",null,"La ",(0,o.kt)("inlineCode",{parentName:"p"},"[policy_definition]")," es la definici\xf3n de una pol\xedtica. Define el significado de la pol\xedtica. Por ejemplo, tenemos el siguiente modelo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_definition]\np = sub, obj, act\np2 = sub, act\n")),(0,o.kt)("p",null,"Y tenemos la siguiente pol\xedtica (si est\xe1 en un archivo de pol\xedtica):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, data1, read\np2, bob, write-all-objects\n")),(0,o.kt)("p",null,"Cada l\xednea en una pol\xedtica se llama regla de pol\xedtica. Cada regla de pol\xedtica comienza con un ",(0,o.kt)("inlineCode",{parentName:"p"},"tipo de pol\xedtica"),", como ",(0,o.kt)("inlineCode",{parentName:"p"},"p")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"p2"),". Se utiliza para coincidir con la definici\xf3n de pol\xedtica si hay m\xfaltiples definiciones. La pol\xedtica anterior muestra la siguiente vinculaci\xf3n. La vinculaci\xf3n se puede utilizar en el comparador."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"(alice, data1, read) -> (p.sub, p.obj, p.act)\n(bob, write-all-objects) -> (p2.sub, p2.act)\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Los elementos en una regla de pol\xedtica siempre se consideran ",(0,o.kt)("inlineCode",{parentName:"p"},"cadenas de texto"),". Si tienes alguna pregunta sobre esto, por favor consulta la discusi\xf3n en: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/issues/113"},"https://github.com/casbin/casbin/issues/113"))),(0,o.kt)("h2",{id:"efecto-de-pol\xedtica"},"Efecto de Pol\xedtica"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"[policy_effect]")," es la definici\xf3n para el efecto de la pol\xedtica. Determina si la solicitud de acceso debe ser aprobada si m\xfaltiples reglas de pol\xedtica coinciden con la solicitud. Por ejemplo, una regla permite y la otra niega."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = some(where (p.eft == allow))\n")),(0,o.kt)("p",null,"El efecto de pol\xedtica anterior significa que si hay alguna regla de pol\xedtica coincidente de ",(0,o.kt)("inlineCode",{parentName:"p"},"allow"),", el efecto final es ",(0,o.kt)("inlineCode",{parentName:"p"},"allow")," (tambi\xe9n conocido como permitir-sobrescribir). ",(0,o.kt)("inlineCode",{parentName:"p"},"p.eft")," es el efecto para una pol\xedtica, y puede ser ",(0,o.kt)("inlineCode",{parentName:"p"},"allow")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"deny"),". Es opcional, y el valor predeterminado es ",(0,o.kt)("inlineCode",{parentName:"p"},"allow"),". Dado que no lo especificamos anteriormente, utiliza el valor predeterminado."),(0,o.kt)("p",null,"Otro ejemplo para el efecto de la pol\xedtica es:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = !some(where (p.eft == deny))\n")),(0,o.kt)("p",null,"Esto significa que si no hay reglas de pol\xedtica coincidentes de ",(0,o.kt)("inlineCode",{parentName:"p"},"deny"),", el efecto final es ",(0,o.kt)("inlineCode",{parentName:"p"},"allow")," (tambi\xe9n conocido como negar-sobrescribir). ",(0,o.kt)("inlineCode",{parentName:"p"},"some")," significa que existe una regla de pol\xedtica coincidente. ",(0,o.kt)("inlineCode",{parentName:"p"},"any")," significa que todas las reglas de pol\xedtica coincidentes (no se usa aqu\xed). El efecto de la pol\xedtica incluso puede estar conectado con expresiones l\xf3gicas:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = some(where (p.eft == allow)) && !some(where (p.eft == deny))\n")),(0,o.kt)("p",null,"Esto significa que debe haber al menos una regla de pol\xedtica coincidente de ",(0,o.kt)("inlineCode",{parentName:"p"},"allow"),", y no puede haber ninguna regla de pol\xedtica coincidente de ",(0,o.kt)("inlineCode",{parentName:"p"},"deny"),". Por lo tanto, de esta manera, se admiten tanto las autorizaciones de permitir como de negar, y la negaci\xf3n prevalece."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Aunque dise\xf1amos la sintaxis del efecto de la pol\xedtica como se muestra arriba, las implementaciones actuales solo usan efectos de pol\xedtica codificados. Esto se debe a que encontramos que no hay mucha necesidad de ese nivel de flexibilidad. As\xed que por ahora, debes usar uno de los efectos de pol\xedtica integrados en lugar de personalizar el tuyo propio.")),(0,o.kt)("p",null,"Los efectos de pol\xedtica integrados admitidos son:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Efecto de Pol\xedtica"),(0,o.kt)("th",{parentName:"tr",align:null},"Significado"),(0,o.kt)("th",{parentName:"tr",align:null},"Ejemplo"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"some(where (p.eft == allow))"),(0,o.kt)("td",{parentName:"tr",align:null},"permitir-sobrescribir"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"ACL, RBAC, etc."))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"!some(where (p.eft == deny))"),(0,o.kt)("td",{parentName:"tr",align:null},"negar-sobrescribir"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Negar-sobrescribir"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"some(where (p.eft == allow)) && !some(where (p.eft == deny))"),(0,o.kt)("td",{parentName:"tr",align:null},"allow-and-deny"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Allow-and-deny"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"priority(p.eft) ","|","|"," deny"),(0,o.kt)("td",{parentName:"tr",align:null},"priority"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Priority"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"subjectPriority(p.eft)"),(0,o.kt)("td",{parentName:"tr",align:null},"prioridad basada en el rol"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Subject-Priority"))))),(0,o.kt)("h2",{id:"matchers"},"Matchers"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"[matchers]")," es la definici\xf3n para los comparadores de pol\xedticas. Los comparadores son expresiones que definen c\xf3mo se eval\xfaan las reglas de pol\xedticas contra la solicitud."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n")),(0,o.kt)("p",null,"El comparador anterior es el m\xe1s simple y significa que el sujeto, objeto y acci\xf3n en una solicitud deben coincidir con los de una regla de pol\xedtica."),(0,o.kt)("p",null,"Operadores aritm\xe9ticos como ",(0,o.kt)("inlineCode",{parentName:"p"},"+, -, *, /")," y operadores l\xf3gicos como ",(0,o.kt)("inlineCode",{parentName:"p"},"&&, ||, !")," pueden usarse en los comparadores."),(0,o.kt)("h3",{id:"orden-de-las-expresiones-en-los-comparadores"},"Orden de las expresiones en los comparadores"),(0,o.kt)("p",null,"El orden de las expresiones puede afectar enormemente el rendimiento. Echa un vistazo al siguiente ejemplo para m\xe1s detalles:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'const rbac_models = `\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n`\n\nfunc TestManyRoles(t *testing.T) {\n\n    m, _ := model.NewModelFromString(rbac_models)\n    e, _ := NewEnforcer(m, false)\n\n    roles := []string{"admin", "manager", "developer", "tester"}\n\n    // 2500 projects\n    for nbPrj := 1; nbPrj < 2500; nbPrj++ {\n        // 4 objects and 1 role per object (so 4 roles)\n        for _, role := range roles {\n            roleDB := fmt.Sprintf("%s_project:%d", role, nbPrj)\n            objectDB := fmt.Sprintf("/projects/%d", nbPrj)\n            e.AddPolicy(roleDB, objectDB, "GET")\n        }\n        jasmineRole := fmt.Sprintf("%s_project:%d", roles[1], nbPrj)\n        e.AddGroupingPolicy("jasmine", jasmineRole)\n    }\n\n    e.AddGroupingPolicy("abu", "manager_project:1")\n    e.AddGroupingPolicy("abu", "manager_project:2499")\n\n    // With same number of policies\n    // User \'abu\' has only two roles\n    // User \'jasmine\' has many roles (1 role per policy, here 2500 roles)\n\n    request := func(subject, object, action string) {\n        t0 := time.Now()\n        resp, _ := e.Enforce(subject, object, action)\n        tElapse := time.Since(t0)\n        t.Logf("RESPONSE %-10s %s\\t %s : %5v IN: %+v", subject, object, action, resp, tElapse)\n        if tElapse > time.Millisecond*100 {\n            t.Errorf("More than 100 milliseconds for %s %s %s : %+v", subject, object, action, tElapse)\n        }\n    }\n\n    request("abu", "/projects/1", "GET")        // really fast because only 2 roles in all policies and at the beginning of the casbin_rule table\n    request("abu", "/projects/2499", "GET")     // fast because only 2 roles in all policies\n    request("jasmine", "/projects/1", "GET")    // really fast at the beginning of the casbin_rule table\n\n    request("jasmine", "/projects/2499", "GET") // slow and fails the only 1st time   <<<< pb here\n    request("jasmine", "/projects/2499", "GET") // fast maybe due to internal cache mechanism\n\n    // same issue with non-existing roles\n    // request("jasmine", "/projects/999999", "GET") // slow fails the only 1st time   <<<< pb here\n    // request("jasmine", "/projects/999999", "GET") // fast maybe due to internal cache mechanism\n}\n')),(0,o.kt)("p",null,"El tiempo de aplicaci\xf3n puede ser muy largo, hasta 6 segundos."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go test -run ^TestManyRoles$ github.com/casbin/casbin/v2 -v\n\n=== RUN   TestManyRoles\n    rbac_api_test.go:598: RESPONSE abu        /projects/1        GET :  true IN: 438.379\xb5s\n    rbac_api_test.go:598: RESPONSE abu        /projects/2499     GET :  true IN: 39.005173ms\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/1        GET :  true IN: 1.774319ms\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/2499     GET :  true IN: 6.164071648s\n    rbac_api_test.go:600: More than 100 milliseconds for jasmine /projects/2499 GET : 6.164071648s\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/2499     GET :  true IN: 12.164122ms\n--- FAIL: TestManyRoles (6.24s)\nFAIL\nFAIL    github.com/casbin/casbin/v2     6.244s\nFAIL\n")),(0,o.kt)("p",null,"Sin embargo, si ajustamos el orden de las expresiones en los comparadores y ponemos expresiones que consumen m\xe1s tiempo como funciones detr\xe1s, el tiempo de ejecuci\xf3n ser\xe1 muy corto."),(0,o.kt)("p",null,"Cambiando el orden de las expresiones en los comparadores en el ejemplo anterior a:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"[matchers]\nm = r.obj == p.obj && g(r.sub, p.sub) && r.act == p.act\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go test -run ^TestManyRoles$ github.com/casbin/casbin/v2 -v\n=== RUN   TestManyRoles\n    rbac_api_test.go:599: RESPONSE abu        /projects/1        GET :  true IN: 786.635\xb5s\n    rbac_api_test.go:599: RESPONSE abu        /projects/2499     GET :  true IN: 4.933064ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/1        GET :  true IN: 2.908534ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/2499     GET :  true IN: 7.292963ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/2499     GET :  true IN: 6.168307ms\n--- PASS: TestManyRoles (0.05s)\nPASS\nok      github.com/casbin/casbin/v2     0.053s\n")),(0,o.kt)("h2",{id:"tipos-de-secci\xf3n-m\xfaltiples"},"Tipos de Secci\xf3n M\xfaltiples"),(0,o.kt)("p",null,"Si necesitas m\xfaltiples definiciones de pol\xedticas o m\xfaltiples comparadores, puedes usar ",(0,o.kt)("inlineCode",{parentName:"p"},"p2")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"m2")," como ejemplos. De hecho, las cuatro secciones mencionadas anteriormente pueden usar m\xfaltiples tipos, y la sintaxis es ",(0,o.kt)("inlineCode",{parentName:"p"},"r")," seguido de un n\xfamero, como ",(0,o.kt)("inlineCode",{parentName:"p"},"r2")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"e2"),". Por defecto, estas cuatro secciones deben corresponder uno a uno. Por ejemplo, tu secci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"r2")," solo usar\xe1 el comparador ",(0,o.kt)("inlineCode",{parentName:"p"},"m2")," para coincidir con las pol\xedticas ",(0,o.kt)("inlineCode",{parentName:"p"},"p2"),"."),(0,o.kt)("p",null,"Puedes pasar un ",(0,o.kt)("inlineCode",{parentName:"p"},"EnforceContext")," como el primer par\xe1metro del m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"enforce")," para especificar los tipos. El ",(0,o.kt)("inlineCode",{parentName:"p"},"EnforceContext")," se define de la siguiente manera:"),(0,o.kt)(d,{groupId:"langs",mdxType:"Tabs"},(0,o.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'EnforceContext{"r2","p2","e2","m2"}\ntype EnforceContext struct {\n    RType string\n    PType string\n    EType string\n    MType string\n}\n'))),(0,o.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const enforceContext = new EnforceContext('r2', 'p2', 'e2', 'm2');\nclass EnforceContext {\n  constructor(rType, pType, eType, mType) {\n    this.pType = pType;\n    this.eType = eType;\n    this.mType = mType;\n    this.rType = rType;\n  }\n}\n"))),(0,o.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'EnforceContext enforceContext = new EnforceContext("2");\npublic class EnforceContext {\n    private String pType;\n    private String eType;\n    private String mType;\n    private String rType;\n    public EnforceContext(String suffix) {\n      this.pType = "p" + suffix;\n      this.eType = "e" + suffix;\n      this.mType = "m" + suffix;\n      this.rType = "r" + suffix;\n    }\n}\n')))),(0,o.kt)("p",null,"Aqu\xed hay un ejemplo de uso. Por favor, consulta el ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/master/examples/multiple_policy_definitions_model.conf"},"modelo")," y la ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/master/examples/multiple_policy_definitions_policy.csv"},"pol\xedtica"),". La solicitud es la siguiente:"),(0,o.kt)(d,{groupId:"langs",mdxType:"Tabs"},(0,o.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nenforceContext := NewEnforceContext("2")\n// You can also specify a certain type individually\nenforceContext.EType = "e"\n// Don\'t pass in EnforceContext; the default is r, p, e, m\ne.Enforce("alice", "data2", "read")        // true\n// Pass in EnforceContext\ne.Enforce(enforceContext, struct{ Age int }{Age: 70}, "/data1", "read")        //false\ne.Enforce(enforceContext, struct{ Age int }{Age: 30}, "/data1", "read")        //true\n'))),(0,o.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nconst enforceContext = new NewEnforceContext(\'2\');\n\n// You can also specify a certain type individually\nenforceContext.eType = "e"\n\n// Don\'t pass in EnforceContext; the default is r, p, e, m\ne.Enforce("alice", "data2", "read")        // true\n\n// Pass in EnforceContext\ne.Enforce(enforceContext, {Age: 70}, "/data1", "read")        //false\ne.Enforce(enforceContext, {Age: 30}, "/data1", "read")        //true\n'))),(0,o.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nEnforceContext enforceContext = new EnforceContext("2");\n// You can also specify a certain type individually\nenforceContext.seteType("e");\n// Don\'t pass in EnforceContext; the default is r, p, e, m\ne.enforce("alice", "data2", "read");  // true\n// Pass in EnforceContext\n// TestEvalRule is located in https://github.com/casbin/jcasbin/blob/master/src/test/java/org/casbin/jcasbin/main/AbacAPIUnitTest.java#L56\ne.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule("alice", 70), "/data1", "read"); // false\ne.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule("alice", 30), "/data1", "read"); // true\n')))),(0,o.kt)("h2",{id:"gram\xe1tica-especial"},"Gram\xe1tica Especial"),(0,o.kt)("p",null,'Tambi\xe9n podr\xedas usar el operador "in", que es el \xfanico operador con un nombre de texto. Este operador verifica el arreglo en el lado derecho para ver si contiene un valor que es igual al valor del lado izquierdo. La igualdad se determina usando el operador ==, y esta biblioteca no verifica los tipos entre los valores. Mientras dos valores se puedan convertir a interface{} y todav\xeda se puedan verificar para la igualdad con ==, actuar\xe1n como se espera. Ten en cuenta que puedes usar un par\xe1metro para el arreglo, pero debe ser un []interface{}.'),(0,o.kt)("p",null,"Tambi\xe9n consulta ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/rbac_model_matcher_using_in_op.conf"},"rbac","_","model","_","matcher","_","using","_","in","_","op"),", ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/keyget2_model.conf"},"keyget2","_","model"),", y ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/keyget_model.conf"},"keyget","_","model"),"."),(0,o.kt)("p",null,"Ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj\n...\n[matchers]\nm = r.sub.Name in (r.obj.Admins)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'e.Enforce(Sub{Name: "alice"}, Obj{Name: "a book", Admins: []interface{}{"alice", "bob"}})\n')),(0,o.kt)("h2",{id:"evaluador-de-expresiones"},"Evaluador de Expresiones"),(0,o.kt)("p",null,"La evaluaci\xf3n de comparadores en Casbin se implementa mediante evaluadores de expresiones en cada idioma. Casbin integra sus poderes para proporcionar el lenguaje PERM unificado. Adem\xe1s de la sintaxis del modelo proporcionada aqu\xed, estos evaluadores de expresiones pueden ofrecer funcionalidades adicionales que podr\xedan no ser compatibles con otro idioma o implementaci\xf3n. Por favor, ten precauci\xf3n al usar esta funcionalidad."),(0,o.kt)("p",null,"Los evaluadores de expresiones utilizados por cada implementaci\xf3n de Casbin son los siguientes:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Implementaci\xf3n"),(0,o.kt)("th",{parentName:"tr",align:null},"Idioma"),(0,o.kt)("th",{parentName:"tr",align:null},"Evaluador de Expresiones"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Casbin"),(0,o.kt)("td",{parentName:"tr",align:null},"Golang"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/casbin/govaluate"},"https://github.com/casbin/govaluate"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"jCasbin"),(0,o.kt)("td",{parentName:"tr",align:null},"Java"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/killme2008/aviatorscript"},"https://github.com/killme2008/aviatorscript"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Node-Casbin"),(0,o.kt)("td",{parentName:"tr",align:null},"Node.js"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/donmccurdy/expression-eval"},"https://github.com/donmccurdy/expression-eval"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"PHP-Casbin"),(0,o.kt)("td",{parentName:"tr",align:null},"PHP"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/symfony/expression-language"},"https://github.com/symfony/expression-language"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"PyCasbin"),(0,o.kt)("td",{parentName:"tr",align:null},"Python"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/danthedeckie/simpleeval"},"https://github.com/danthedeckie/simpleeval"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Casbin.NET"),(0,o.kt)("td",{parentName:"tr",align:null},"C#"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/davideicardi/DynamicExpresso"},"https://github.com/davideicardi/DynamicExpresso"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Casbin4D"),(0,o.kt)("td",{parentName:"tr",align:null},"Delphi"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/casbin4d/Casbin4D/tree/master/SourceCode/Common/Third%20Party/TExpressionParser"},"https://github.com/casbin4d/Casbin4D/tree/master/SourceCode/Common/Third%20Party/TExpressionParser"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"casbin-rs"),(0,o.kt)("td",{parentName:"tr",align:null},"Rust"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/jonathandturner/rhai"},"https://github.com/jonathandturner/rhai"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"casbin-cpp"),(0,o.kt)("td",{parentName:"tr",align:null},"C++"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/ArashPartow/exprtk"},"https://github.com/ArashPartow/exprtk"))))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Si encuentras un problema de rendimiento con Casbin, es probable que sea causado por la baja eficiencia del evaluador de expresiones. Puedes dirigir el problema a Casbin o al evaluador de expresiones directamente para obtener consejos sobre c\xf3mo acelerar el rendimiento. Para m\xe1s detalles, por favor consulta la secci\xf3n ",(0,o.kt)("a",{parentName:"p",href:"/docs/benchmark"},"Benchmarks"),".")))}b.isMDXComponent=!0}}]);