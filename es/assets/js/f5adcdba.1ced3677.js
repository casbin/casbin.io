"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[8232],{3905:(e,a,r)=>{r.d(a,{Zo:()=>c,kt:()=>m});var t=r(7294);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function i(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?i(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function l(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var d=t.createContext({}),p=function(e){var a=t.useContext(d),r=a;return e&&(r="function"==typeof e?e(a):o(o({},a),e)),r},c=function(e){var a=p(e.components);return t.createElement(d.Provider,{value:a},e.children)},s={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=n,b=u["".concat(d,".").concat(m)]||u[m]||s[m]||i;return r?t.createElement(b,o(o({ref:a},c),{},{components:r})):t.createElement(b,o({ref:a},c))}));function m(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var d in a)hasOwnProperty.call(a,d)&&(l[d]=a[d]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8171:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>d,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var t=r(7462),n=(r(7294),r(3905));const i={id:"priority-model",title:"Priority Model",description:"Modelo de Prioridad de Casbin para gestionar pol\xedticas con diferentes prioridades",keywords:["priority model"],authors:["hsluoyz"]},o=void 0,l={unversionedId:"priority-model",id:"priority-model",title:"Priority Model",description:"Modelo de Prioridad de Casbin para gestionar pol\xedticas con diferentes prioridades",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/PriorityModel.mdx",sourceDirName:".",slug:"/priority-model",permalink:"/es/docs/priority-model",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/PriorityModel.mdx",tags:[],version:"current",frontMatter:{id:"priority-model",title:"Priority Model",description:"Modelo de Prioridad de Casbin para gestionar pol\xedticas con diferentes prioridades",keywords:["priority model"],authors:["hsluoyz"]},sidebar:"docs",previous:{title:"Biba",permalink:"/es/docs/biba"},next:{title:"Super Admin",permalink:"/es/docs/superadmin"}},d={},p=[{value:"Cargar Pol\xedtica con Prioridad Impl\xedcita",id:"cargar-pol\xedtica-con-prioridad-impl\xedcita",level:2},{value:"Cargar Pol\xedtica con Prioridad Expl\xedcita",id:"cargar-pol\xedtica-con-prioridad-expl\xedcita",level:2},{value:"Cargar Pol\xedtica con Prioridad Basada en Jerarqu\xeda de Rol y Usuario",id:"cargar-pol\xedtica-con-prioridad-basada-en-jerarqu\xeda-de-rol-y-usuario",level:2}],c={toc:p};function s(e){let{components:a,...r}=e;return(0,n.kt)("wrapper",(0,t.Z)({},c,r,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Casbin soporta la carga de pol\xedticas con prioridad."),(0,n.kt)("h2",{id:"cargar-pol\xedtica-con-prioridad-impl\xedcita"},"Cargar Pol\xedtica con Prioridad Impl\xedcita"),(0,n.kt)("p",null,"Es bastante simple: el orden determina la prioridad; las pol\xedticas que aparecen primero tienen mayor prioridad."),(0,n.kt)("p",null,"model.conf:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = priority(p.eft) || deny\n")),(0,n.kt)("h2",{id:"cargar-pol\xedtica-con-prioridad-expl\xedcita"},"Cargar Pol\xedtica con Prioridad Expl\xedcita"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Tambi\xe9n ver: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/issues/550"},"casbin#550"))),(0,n.kt)("p",null,"Un valor de prioridad menor indica una mayor prioridad. Si hay un car\xe1cter no num\xe9rico en la prioridad, se colocar\xe1 al final en lugar de lanzar un error."),(0,n.kt)("admonition",{title:"Convenci\xf3n de nombres de tokens",type:"info"},(0,n.kt)("p",{parentName:"admonition"},'El nombre de token de prioridad convencionalmente utilizado en la definici\xf3n de la pol\xedtica es "priority". Para usar uno personalizado, necesitas invocar ',(0,n.kt)("inlineCode",{parentName:"p"},"e.SetFieldIndex()")," y recargar las pol\xedticas (ver el ejemplo completo en ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/pull/1044"},"TestCustomizedFieldIndex"),")."),(0,n.kt)("p",{parentName:"admonition"},"model.conf:"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_definition]\np = customized_priority, sub, obj, act, eft\n")),(0,n.kt)("p",{parentName:"admonition"},"Ejemplo de c\xf3digo en Golang:"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-go"},'e, _ := NewEnforcer("./example/priority_model_explicit_customized.conf",\n                    "./example/priority_policy_explicit_customized.csv")\n// Due to the customized priority token, the enforcer fails to handle the priority.\nok, err := e.Enforce("bob", "data2", "read") // the result will be `true, nil`\n// Set PriorityIndex and reload\ne.SetFieldIndex("p", constant.PriorityIndex, 0)\nerr := e.LoadPolicy()\nif err != nil {\n    log.Fatalf("LoadPolicy: %v", err)\n}\nok, err := e.Enforce("bob", "data2", "read") // the result will be `false, nil`\n'))),(0,n.kt)("p",null,"Actualmente, la prioridad expl\xedcita solo soporta ",(0,n.kt)("inlineCode",{parentName:"p"},"AddPolicy")," & ",(0,n.kt)("inlineCode",{parentName:"p"},"AddPolicies"),". Si se ha llamado a ",(0,n.kt)("inlineCode",{parentName:"p"},"UpdatePolicy"),", no deber\xedas cambiar el atributo de prioridad."),(0,n.kt)("p",null,"model.conf:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = priority, sub, obj, act, eft\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = priority(p.eft) || deny\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n")),(0,n.kt)("p",null,"policy.csv"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csv"},"p, 10, data1_deny_group, data1, read, deny\np, 10, data1_deny_group, data1, write, deny\np, 10, data2_allow_group, data2, read, allow\np, 10, data2_allow_group, data2, write, allow\n\n\np, 1, alice, data1, write, allow\np, 1, alice, data1, read, allow\np, 1, bob, data2, read, deny\n\ng, bob, data2_allow_group\ng, alice, data1_deny_group\n")),(0,n.kt)("p",null,"solicitud:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csv"},"alice, data1, write --\x3e true // because `p, 1, alice, data1, write, allow` has the highest priority\nbob, data2, read --\x3e false\nbob, data2, write --\x3e true // because bob has the role of `data2_allow_group` which has the right to write data2, and there's no deny policy with higher priority \n")),(0,n.kt)("h2",{id:"cargar-pol\xedtica-con-prioridad-basada-en-jerarqu\xeda-de-rol-y-usuario"},"Cargar Pol\xedtica con Prioridad Basada en Jerarqu\xeda de Rol y Usuario"),(0,n.kt)("p",null,"La estructura heredada de roles y usuarios solo puede ser m\xfaltiples \xe1rboles, no gr\xe1ficos. Si un usuario tiene m\xfaltiples roles, tienes que asegurarte de que el usuario tenga el mismo nivel en diferentes \xe1rboles. Si dos roles tienen el mismo nivel, la pol\xedtica (asociada con el rol) que apareci\xf3 primero tiene mayor prioridad. Para m\xe1s detalles, tambi\xe9n ver ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/pull/833"},"casbin#833")," y ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/issues/831"},"casbin#831"),"."),(0,n.kt)("p",null,"model.conf:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act, eft\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = subjectPriority(p.eft) || deny\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act \n")),(0,n.kt)("p",null,"policy.csv"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csv"},"p, root, data1, read, deny\np, admin, data1, read, deny\n\np, editor, data1, read, deny\np, subscriber, data1, read, deny\n\np, jane, data1, read, allow\np, alice, data1, read, allow\n\ng, admin, root\n\ng, editor, admin\ng, subscriber, admin\n\ng, jane, editor\ng, alice, subscriber \n")),(0,n.kt)("p",null,"Solicitud:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csv"},"jane, data1, read --\x3e true // because jane is at the bottom, her priority is higher than that of editor, admin, and root\nalice, data1, read --\x3e true\n")),(0,n.kt)("p",null,"La jerarqu\xeda de roles se ve as\xed:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"role: root\n \u2514\u2500 role: admin\n    \u251c\u2500 role editor\n    \u2502  \u2514\u2500 user: jane\n    \u2502\n    \u2514\u2500 role: subscriber\n       \u2514\u2500 user: alice\n")),(0,n.kt)("p",null,"La prioridad autom\xe1ticamente se ve as\xed:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"role: root                 # auto priority: 30\n \u2514\u2500 role: admin            # auto priority: 20\n     \u251c\u2500 role: editor       # auto priority: 10\n     \u2514\u2500 role: subscriber   # auto priority: 10\n")))}s.isMDXComponent=!0}}]);