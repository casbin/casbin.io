"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[253],{3905:(e,a,l)=>{l.d(a,{Zo:()=>u,kt:()=>c});var t=l(7294);function n(e,a,l){return a in e?Object.defineProperty(e,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[a]=l,e}function d(e,a){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),l.push.apply(l,t)}return l}function r(e){for(var a=1;a<arguments.length;a++){var l=null!=arguments[a]?arguments[a]:{};a%2?d(Object(l),!0).forEach((function(a){n(e,a,l[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):d(Object(l)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(l,a))}))}return e}function i(e,a){if(null==e)return{};var l,t,n=function(e,a){if(null==e)return{};var l,t,n={},d=Object.keys(e);for(t=0;t<d.length;t++)l=d[t],a.indexOf(l)>=0||(n[l]=e[l]);return n}(e,a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(t=0;t<d.length;t++)l=d[t],a.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var o=t.createContext({}),p=function(e){var a=t.useContext(o),l=a;return e&&(l="function"==typeof e?e(a):r(r({},a),e)),l},u=function(e){var a=p(e.components);return t.createElement(o.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},s=t.forwardRef((function(e,a){var l=e.components,n=e.mdxType,d=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=p(l),c=n,g=s["".concat(o,".").concat(c)]||s[c]||m[c]||d;return l?t.createElement(g,r(r({ref:a},u),{},{components:l})):t.createElement(g,r({ref:a},u))}));function c(e,a){var l=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var d=l.length,r=new Array(d);r[0]=s;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,r[1]=i;for(var p=2;p<d;p++)r[p]=l[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,l)}s.displayName="MDXCreateElement"},6172:(e,a,l)=>{l.r(a),l.d(a,{assets:()=>o,contentTitle:()=>r,default:()=>g,frontMatter:()=>d,metadata:()=>i,toc:()=>p});var t=l(7462),n=(l(7294),l(3905));const d={id:"management-api",title:"Management-API",description:"The primitive API that provides full support for Casbin policy management",keywords:["management","Filtered API"],authors:["nodece"]},r=void 0,i={unversionedId:"management-api",id:"management-api",title:"Management-API",description:"The primitive API that provides full support for Casbin policy management",source:"@site/i18n/de/docusaurus-plugin-content-docs/current/ManagementAPI.mdx",sourceDirName:".",slug:"/management-api",permalink:"/de/docs/management-api",draft:!1,editUrl:"https://crowdin.com/project/casbin-website/de",tags:[],version:"current",frontMatter:{id:"management-api",title:"Management-API",description:"The primitive API that provides full support for Casbin policy management",keywords:["management","Filtered API"],authors:["nodece"]},sidebar:"docs",previous:{title:"API-\xdcbersicht",permalink:"/de/docs/api-overview"},next:{title:"RBAC API",permalink:"/de/docs/rbac-api"}},o={},p=[{value:"Gefilterte API",id:"gefilterte-api",level:2},{value:"Referenz",id:"referenz",level:2},{value:"<code>Enforce()</code>",id:"enforce",level:3},{value:"<code>EnforceWithMatcher()</code>",id:"enforcewithmatcher",level:3},{value:"<code>EnforceEx()</code>",id:"enforceex",level:3},{value:"<code>EnforceExWithMatcher()</code>",id:"enforceexwithmatcher",level:3},{value:"<code>BatchEnforce()</code>",id:"batchenforce",level:3},{value:"<code>GetAllSubjects()</code>",id:"getallsubjects",level:3},{value:"<code>GetAllNamedSubjects()</code>",id:"getallnamedsubjects",level:3},{value:"<code>GetAllObjects()</code>",id:"getallobjects",level:3},{value:"<code>GetAllNamedObjects()</code>",id:"getallnamedobjects",level:3},{value:"<code>GetAllActions()</code>",id:"getallactions",level:3},{value:"<code>GetAllNamedActions()</code>",id:"getallnamedactions",level:3},{value:"<code>GetAllRoles()</code>",id:"getallroles",level:3},{value:"<code>GetAllNamedRoles()</code>",id:"getallnamedroles",level:3},{value:"<code>GetPolicy()</code>",id:"getpolicy",level:3},{value:"<code>GetFilteredPolicy()</code>",id:"getfilteredpolicy",level:3},{value:"<code>GetNamedPolicy()</code>",id:"getnamedpolicy",level:3},{value:"<code>GetFilteredNamedPolicy()</code>",id:"getfilterednamedpolicy",level:3},{value:"<code>GetGroupingPolicy()</code>",id:"getgroupingpolicy",level:3},{value:"<code>GetFilteredGroupingPolicy()</code>",id:"getfilteredgroupingpolicy",level:3},{value:"<code>GetNamedGroupingPolicy()</code>",id:"getnamedgroupingpolicy",level:3},{value:"<code>GetFilteredNamedGroupingPolicy()</code>",id:"getfilterednamedgroupingpolicy",level:3},{value:"<code>HasPolicy()</code>",id:"haspolicy",level:3},{value:"<code>HasNamedPolicy()</code>",id:"hasnamedpolicy",level:3},{value:"<code>AddPolicy()</code>",id:"addpolicy",level:3},{value:"<code>AddPolicies()</code>",id:"addpolicies",level:3},{value:"<code>AddPoliciesEx()</code>",id:"addpoliciesex",level:3},{value:"<code>AddNamedPolicy()</code>",id:"addnamedpolicy",level:3},{value:"<code>AddNamedPolicies()</code>",id:"addnamedpolicies",level:3},{value:"<code>AddNamedPoliciesEx()</code>",id:"addnamedpoliciesex",level:3},{value:"<code>SelfAddPoliciesEx()</code>",id:"selfaddpoliciesex",level:3},{value:"<code>RemovePolicy()</code>",id:"removepolicy",level:3},{value:"<code>RemovePolicies()</code>",id:"removepolicies",level:3},{value:"<code>RemoveFilteredPolicy()</code>",id:"removefilteredpolicy",level:3},{value:"<code>RemoveNamedPolicy()</code>",id:"removenamedpolicy",level:3},{value:"<code>RemoveNamedPolicies()</code>",id:"removenamedpolicies",level:3},{value:"<code>RemoveFilteredNamedPolicy()</code>",id:"removefilterednamedpolicy",level:3},{value:"<code>HasGroupingPolicy()</code>",id:"hasgroupingpolicy",level:3},{value:"<code>HasNamedGroupingPolicy()</code>",id:"hasnamedgroupingpolicy",level:3},{value:"<code>AddGroupingPolicy()</code>",id:"addgroupingpolicy",level:3},{value:"<code>AddGroupingPolicies()</code>",id:"addgroupingpolicies",level:3},{value:"<code>AddGroupingPoliciesEx()</code>",id:"addgroupingpoliciesex",level:3},{value:"<code>AddNamedGroupingPolicy()</code>",id:"addnamedgroupingpolicy",level:3},{value:"<code>AddNamedGroupingPolicies()</code>",id:"addnamedgroupingpolicies",level:3},{value:"<code>AddNamedGroupingPoliciesEx()</code>",id:"addnamedgroupingpoliciesex",level:3},{value:"<code>RemoveGroupingPolicy()</code>",id:"removegroupingpolicy",level:3},{value:"<code>RemoveGroupingPolicies()</code>",id:"removegroupingpolicies",level:3},{value:"<code>RemoveFilteredGroupingPolicy()</code>",id:"removefilteredgroupingpolicy",level:3},{value:"<code>RemoveNamedGroupingPolicy()</code>",id:"removenamedgroupingpolicy",level:3},{value:"<code>RemoveNamedGroupingPolicies()</code>",id:"removenamedgroupingpolicies",level:3},{value:"<code>RemoveFilteredNamedGroupingPolicy()</code>",id:"removefilterednamedgroupingpolicy",level:3},{value:"<code>UpdatePolicy()</code>",id:"updatepolicy",level:3},{value:"<code>UpdatePolicies()</code>",id:"updatepolicies",level:3},{value:"<code>AddFunction()</code>",id:"addfunction",level:3},{value:"<code>LoadFilteredPolicy()</code>",id:"loadfilteredpolicy",level:3},{value:"<code>LoadIncrementalFilteredPolicy()</code>",id:"loadincrementalfilteredpolicy",level:3},{value:"<code>UpdateGroupingPolicy()</code>",id:"updategroupingpolicy",level:3},{value:"<code>UpdateNamedGroupingPolicy()</code>",id:"updatenamedgroupingpolicy",level:3},{value:"<code>SetFieldIndex()</code>",id:"setfieldindex",level:3}],u=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",a)},m=u("Tabs"),s=u("TabItem"),c={toc:p};function g(e){let{components:a,...l}=e;return(0,n.kt)("wrapper",(0,t.Z)({},c,l,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Die primitive API, die volle Unterst\xfctzung f\xfcr das Management der Casbin-Richtlinien bietet."),(0,n.kt)("h2",{id:"gefilterte-api"},"Gefilterte API"),(0,n.kt)("p",null,"Fast alle gefilterten api haben die gleichen Parameter ",(0,n.kt)("inlineCode",{parentName:"p"},"(fieldIndex int, fieldValues ...string)"),". ",(0,n.kt)("inlineCode",{parentName:"p"},"fieldIndex")," ist der Index, in dem der \xfcbereinstimmende Anfang, ",(0,n.kt)("inlineCode",{parentName:"p"},"fieldValues")," bezeichnet das Ergebnis, das Werte haben sollen. Beachten Sie, dass ein leerer String in Feldwerten ein beliebiges Wort sein kann."),(0,n.kt)("p",null,"Beispiel:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, book, read\np, bob, book, read\np, bob, book, write\np, alice, pen, get\np, bob, pen ,get\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'e.GetFilteredPolicy(1, "Buch") // wird zur\xfcckgegeben: [[Alice Book read] [Bob Book read] [Bob Book write]]\n\ne. etFilteredPolicy(1, "book", "read") // gibt zur\xfcck: [[alice book read] [bob book read]]\n\ne. etFilteredPolicy(0, "alice", "", "read") // wird zur\xfcckgegeben: [[alice book read]]\n\ne.GetFilteredPolicy(0, "alice") // wird zur\xfcckgeben: [[alice book read] [alice pen get]]\n')),(0,n.kt)("h2",{id:"referenz"},"Referenz"),(0,n.kt)("p",null,"globale Variable ",(0,n.kt)("inlineCode",{parentName:"p"},"e")," ist Enforcer Instanz."),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'e, err := NewEnforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const e = await newEnforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$e = new Enforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv');\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'e = casbin.Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var e = new Enforcer("path/to/model.conf", "path/to/policy.csv");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let mut e = Enforce::new("examples/rbac_model.conf", "examples/rbac_policy.csv").await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'Enforcer e = new Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv");\n')))),(0,n.kt)("h3",{id:"enforce"},(0,n.kt)("inlineCode",{parentName:"h3"},"Enforce()")),(0,n.kt)("p",null,'Enforce entscheidet, ob ein "Betreff" mit der Operation "action" auf ein "Objekt" zugreifen kann, die Eingabeparameter sind \xfcblich: (sub, obj, act).'),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"ok, err := e.Enforce(request)\n"))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const ok = await e.enforce(request);\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$ok = $e->enforcer($request);\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"ok = e.enforcer(request)\n"))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"boolean ok = e.enforce(request);\n")))),(0,n.kt)("h3",{id:"enforcewithmatcher"},(0,n.kt)("inlineCode",{parentName:"h3"},"EnforceWithMatcher()")),(0,n.kt)("p",null,'EnforceWithMatcher verwendet einen benutzerdefinierten Matcher um zu entscheiden, ob ein "Betreff" mit der Operation "Aktion" auf ein "Objekt" zugreifen kann Eingabeparameter sind \xfcblich: (Matcher, Sub, obj, act), verwenden Sie standardm\xe4\xdfig Modellmatcher wenn der Matcher "" ist.'),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"ok, err := e.EnforceWithMatcher(matcher, request)\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$ok = $e->enforceWithMatcher($matcher, $request);\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"ok = e.enforce_with_matcher(matcher, request)\n"))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"boolean ok = e.enforceWithMatcher(matcher, request);\n")))),(0,n.kt)("h3",{id:"enforceex"},(0,n.kt)("inlineCode",{parentName:"h3"},"EnforceEx()")),(0,n.kt)("p",null,"EnforceEx erkl\xe4rt die Durchsetzung durch entsprechende Regeln."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"ok, reason, err := e.EnforceEx(request)\n"))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const ok = await e.enforceEx(request);\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"list($ok, $reason) = $e->enforceEx($request);\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"ok, reason = e.enforce_ex(request)\n")))),(0,n.kt)("h3",{id:"enforceexwithmatcher"},(0,n.kt)("inlineCode",{parentName:"h3"},"EnforceExWithMatcher()")),(0,n.kt)("p",null,"EnforceExWithMatcher verwenden einen benutzerdefinierten Matcher und erl\xe4utern die Durchsetzung durch Informationen \xfcber die entsprechenden Regeln."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"ok, reason, err := e.EnforceExWithMatcher(matcher, request)\n")))),(0,n.kt)("h3",{id:"batchenforce"},(0,n.kt)("inlineCode",{parentName:"h3"},"BatchEnforce()")),(0,n.kt)("p",null,"BatchErzwinge jede Anfrage und gibt Ergebnis in einem Bool-Array zur\xfcck"),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"boolArray, err := e.BatchEnforce(requests)\n"))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const boolArray = await e.batchEnforce(requests);\n"))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<Boolean> boolArray = e.batchEnforce(requests);\n")))),(0,n.kt)("h3",{id:"getallsubjects"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllSubjects()")),(0,n.kt)("p",null,"GetAllSubjects bekommt die Liste der Themen, die in der aktuellen Richtlinie erscheinen."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"allSubjects := e.GetAllSubjects()\n"))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allSubjects = await e.getAllSubjects()\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$allSubjects = $e->getAllSubjects();\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"all_subjects = e.get_all_subjects()\n"))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"var allSubjects = e.GetAllSubjects();\n"))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let all_subjects = e.get_all_subjects();\n"))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<String> allSubjects = e.getAllSubjects();\n")))),(0,n.kt)("h3",{id:"getallnamedsubjects"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllNamedSubjects()")),(0,n.kt)("p",null,"GetAllNamedSubjects erh\xe4lt die Liste der Themen, die in der aktuell benannten Richtlinie erscheinen."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'allNamedSubjects := e.GetAllNamedSubjects("p")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allNamedSubjects = await e.getAllNamedSubjects('p')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$allNamedSubjects = $e->getAllNamedSubjects("p");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'all_named_subjects = e.get_all_named_subjects("p")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var allNamedSubjects = e.GetAllNamedSubjects("p");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let all_named_subjects = e.get_all_named_subjects("p");\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<String> allNamedSubjects = e.getAllNamedSubjects("p");\n')))),(0,n.kt)("h3",{id:"getallobjects"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllObjects()")),(0,n.kt)("p",null,"GetAllObjects erh\xe4lt die Liste der Objekte, die in der aktuellen Richtlinie erscheinen."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"allObjects := e.GetAllObjects()\n"))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allObjects = await e.getAllObjects()\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$allObjects = $e->getAllObjects();\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"all_objects = e.get_all_objects()\n"))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"var allObjects = e.GetAllObjects();\n"))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let all_objects = e.get_all_objects();\n"))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<String> allObjects = e.getAllObjects();\n")))),(0,n.kt)("h3",{id:"getallnamedobjects"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllNamedObjects()")),(0,n.kt)("p",null,"GetAllNamedObjects erh\xe4lt die Liste der Objekte, die in den aktuell benannten Richtlinien erscheinen."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'allNamedObjects := e.GetAllNamedObjects("p")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allNamedObjects = await e.getAllNamedObjects('p')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$allNamedObjects = $e->getAllNamedObjects("p");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'all_named_objects = e.get_all_named_objects("p")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var allNamedObjects = e.GetAllNamedObjects("p");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let all_named_objects = e.get_all_named_objects("p");\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<String> allNamedObjects = e.getAllNamedObjects("p");\n')))),(0,n.kt)("h3",{id:"getallactions"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllActions()")),(0,n.kt)("p",null,"GetAllActions erh\xe4lt die Liste der Aktionen, die in der aktuellen Richtlinie erscheinen."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"allActions := e.GetAllActions()\n"))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allActions = await e.getAllActions()\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$allActions = $e->getAllActions();\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"all_actions = e.get_all_actions()\n"))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"var allActions = e.GetAllActions();\n"))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let all_actions = e.get_all_actions();\n"))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<String> allActions = e.getAllActions();\n")))),(0,n.kt)("h3",{id:"getallnamedactions"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllNamedActions()")),(0,n.kt)("p",null,"GetAllNamedActions erh\xe4lt die Liste der Aktionen, die in den aktuell benannten Richtlinien erscheinen."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'allNamedActions := e.GetAllNamedActions("p")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allNamedActions = await e.getAllNamedActions('p')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$allNamedActions = $e->getAllNamedActions("p");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'all_named_actions = e.get_all_named_actions("p")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var allNamedActions = e.GetAllNamedActions("p");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let all_named_actions = e.get_all_named_actions("p");\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<String> allNamedActions = e.getAllNamedActions("p");\n')))),(0,n.kt)("h3",{id:"getallroles"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllRoles()")),(0,n.kt)("p",null,"GetAllRoles erh\xe4lt die Liste der Rollen, die in den aktuellen Richtlinien erscheinen."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"allRoles = e.GetAllRoles()\n"))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allRoles = await e.getAllRoles()\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$allRoles = $e->getAllRoles();\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"all_roles = e.get_all_roles()\n"))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"var allRoles = e.GetAllRoles();\n"))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let all_roles = e.get_all_roles();\n"))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<String> allRoles = e.getAllRoles();\n")))),(0,n.kt)("h3",{id:"getallnamedroles"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllNamedRoles()")),(0,n.kt)("p",null,"GetAllNamedRoles erh\xe4lt die Liste der Rollen, die in den aktuell benannten Richtlinien erscheinen."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'allNamedRoles := e.GetAllNamedRoles("g")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allNamedRoles = await e.getAllNamedRoles('g')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$allNamedRoles = $e->getAllNamedRoles('g');\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'all_named_roles = e.get_all_named_roles("g")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var allNamedRoles = e.GetAllNamedRoles("g");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let all_named_roles = e.get_all_named_roles("g");\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<String> allNamedRoles = e.getAllNamedRoles("g");\n')))),(0,n.kt)("h3",{id:"getpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetPolicy()")),(0,n.kt)("p",null,"GetPolicy erh\xe4lt alle Autorisierungsregeln in der Richtlinie."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"policy = e.GetPolicy()\n"))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const policy = await e.getPolicy()\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$policy = $e->getPolicy();\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"policy = e.get_policy()\n"))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"var policy = e.GetPolicy();\n"))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let policy = e.get_policy();\n"))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<List<String>> policy = e.getPolicy();\n")))),(0,n.kt)("h3",{id:"getfilteredpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetFilteredPolicy()")),(0,n.kt)("p",null,"GetFilteredPolicy holt alle Autorisierungsregeln in der Richtlinie, Feldfilter k\xf6nnen angegeben werden."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'filteredPolicy := e.GetFilteredPolicy(0, "alice")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const filteredPolicy = await e.getFilteredPolicy(0, 'alice')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$filteredPolicy = $e->getFilteredPolicy(0, "alice");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'filtered_policy = e.get_filtered_policy(0, "alice")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var filteredPolicy = e.GetFilteredPolicy(0, "alice");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let filtered_policy = e.get_filtered_policy(0, vec!["alice".to_owned()]);\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> filteredPolicy = e.getFilteredPolicy(0, "alice");\n')))),(0,n.kt)("h3",{id:"getnamedpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetNamedPolicy()")),(0,n.kt)("p",null,"GetNamedPolicy holt alle Autorisierungsregeln in den genannten Richtlinien."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'namedPolicy := e.GetNamedPolicy("p")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const namedPolicy = await e.getNamedPolicy('p')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$namedPolicy = $e->getNamedPolicy("p");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'named_policy = e.get_named_policy("p")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var namedPolicy = e.GetNamedPolicy("p");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let named_policy = e.get_named_policy("p");\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> namedPolicy = e.getNamedPolicy("p");\n')))),(0,n.kt)("h3",{id:"getfilterednamedpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetFilteredNamedPolicy()")),(0,n.kt)("p",null,"GetFilteredNamedPolicy holt alle Autorisierungsregeln in den angegebenen Richtlinien, Feldfilter k\xf6nnen angegeben werden."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'filteredNamedPolicy = e.GetFilteredNamedPolicy("p", 0, "bob")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const filteredNamedPolicy = await e.getFilteredNamedPolicy('p', 0, 'bob')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$filteredNamedPolicy = $e->getFilteredNamedPolicy("p", 0, "bob");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'filtered_named_policy = e.get_filtered_named_policy("p", 0, "alice")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var filteredNamedPolicy = e.GetFilteredNamedPolicy("p", 0, "alice");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let filtered_named_policy = e.get_filtered_named_policy("p", 0, vec!["bob".to_owned()]);\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> filteredNamedPolicy = e.getFilteredNamedPolicy("p", 0, "bob");\n')))),(0,n.kt)("h3",{id:"getgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetGroupingPolicy()")),(0,n.kt)("p",null,"GetGroupingPolicy erh\xe4lt alle Rollenvererbung Regeln in der Richtlinie."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"groupingPolicy := e.GetGroupingPolicy()\n"))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingPolicy = await e.getGroupingPolicy()\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$groupingPolicy = $e->getGroupingPolicy();\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"grouping_policy = e.get_grouping_policy()\n"))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"var groupingPolicy = e.GetGroupingPolicy();\n"))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let grouping_policy = e.get_grouping_policy();\n"))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<List<String>> groupingPolicy = e.getGroupingPolicy();\n")))),(0,n.kt)("h3",{id:"getfilteredgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetFilteredGroupingPolicy()")),(0,n.kt)("p",null,"GetFilteredGroupingPolicy erh\xe4lt alle Rollenvererbungsregeln in der Richtlinie, Feldfilter k\xf6nnen angegeben werden."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'filteredGroupingPolicy := e.GetFilteredGroupingPolicy(0, "alice")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const filteredGroupingPolicy = await e.getFilteredGroupingPolicy(0, 'alice')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$filteredGroupingPolicy = $e->getFilteredGroupingPolicy(0, "alice");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'filtered_grouping_policy = e.get_filtered_grouping_policy(0, "alice")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var filteredGroupingPolicy = e.GetFilteredGroupingPolicy(0, "alice");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let filtered_grouping_policy = e.get_filtered_grouping_policy(0, vec!["alice".to_owned()]);\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> filteredGroupingPolicy = e.getFilteredGroupingPolicy(0, "alice");\n')))),(0,n.kt)("h3",{id:"getnamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetNamedGroupingPolicy()")),(0,n.kt)("p",null,"GetNamedGroupingPolicy erh\xe4lt alle Rollenvererbungsregeln in der Richtlinie."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'namedGroupingPolicy := e.GetNamedGroupingPolicy("g")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const namedGroupingPolicy = await e.getNamedGroupingPolicy('g')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$namedGroupingPolicy = $e->getNamedGroupingPolicy("g");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'named_grouping_policy = e.get_named_grouping_policy("g")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var namedGroupingPolicy = e.GetNamedGroupingPolicy("g");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let named_grouping_policy = e.get_named_grouping_policy("g");\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> namedGroupingPolicy = e.getNamedGroupingPolicy("g");\n')))),(0,n.kt)("h3",{id:"getfilterednamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetFilteredNamedGroupingPolicy()")),(0,n.kt)("p",null,"GetFilteredNamedGroupingPolicy holt alle Rollenvererbungsregeln in der Richtlinie."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'namedGroupingPolicy := e.GetFilteredNamedGroupingPolicy("g", 0, "alice")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const namedGroupingPolicy = await e.getFilteredNamedGroupingPolicy('g', 0, 'alice')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$namedGroupingPolicy = $e->getFilteredNamedGroupingPolicy("g", 0, "alice");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'named_grouping_policy = e.get_filtered_named_grouping_policy("g", 0, "alice")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var namedGroupingPolicy = e.GetFilteredNamedGroupingPolicy("g", 0, "alice");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let named_grouping_policy = e.get_filtered_named_groupingPolicy("g", 0, vec!["alice".to_owned()]);\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> filteredNamedGroupingPolicy = e.getFilteredNamedGroupingPolicy("g", 0, "alice");\n')))),(0,n.kt)("h3",{id:"haspolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"HasPolicy()")),(0,n.kt)("p",null,"HasPolicy bestimmt, ob eine Autorisierungsregel existiert."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'hasPolicy := e.HasPolicy("data2_admin", "data2", "read")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const hasPolicy = await e.hasPolicy('data2_admin', 'data2', 'read')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$hasPolicy = $e->hasPolicy('data2_admin', 'data2', 'read');\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'has_policy = e.has_policy("data2_admin", "data2", "read")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var hasPolicy = e.HasPolicy("data2_admin", "data2", "read");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let has_policy = e.has_policy(vec!["data2_admin".to_owned(), "data2".to_owned(), "read".to_owned()]);\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean hasPolicy = e.hasPolicy("data2_admin", "data2", "read");\n')))),(0,n.kt)("h3",{id:"hasnamedpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"HasNamedPolicy()")),(0,n.kt)("p",null,"HasNamedPolicy bestimmt, ob eine benannte Autorisierungsregel existiert."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'hasNamedPolicy := e.HasNamedPolicy("p", "data2_admin", "data2", "read")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const hasNamedPolicy = await e.hasNamedPolicy('p', 'data2_admin', 'data2', 'read')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$hasNamedPolicy = $e->hasNamedPolicy("p", "data2_admin", "data2", "read");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'has_named_policy = e.has_named_policy("p", "data2_admin", "data2", "read")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var hasNamedPolicy = e.HasNamedPolicy("p", "data2_admin", "data2", "read");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let has_named_policy = e.has_named_policy("p", vec!["data2_admin".to_owned(), "data2".to_owned(), "read".to_owned()]);\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean hasNamedPolicy = e.hasNamedPolicy("p", "data2_admin", "data2", "read");\n')))),(0,n.kt)("h3",{id:"addpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddPolicy()")),(0,n.kt)("p",null,"AddPolicy f\xfcgt der aktuellen Richtlinie eine Autorisierungsregel hinzu. Wenn die Regel bereits existiert, gibt die Funktion falsch zur\xfcck und die Regel wird nicht hinzugef\xfcgt. Andernfalls gibt die Funktion true zur\xfcck, indem die neue Regel hinzugef\xfcgt wird."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"added := e.AddPolicy('eve', 'data3', 'read')\n"))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['eve', 'data3', 'read']\nconst added = await e.addPolicy(...p)\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$added = $e->addPolicy('eve', 'data3', 'read');\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'added = e.add_policy("eve", "data3", "read")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddPolicy("eve", "data3", "read");\nor\nvar added = await e.AddPolicyAsync("eve", "data3", "read");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_policy(vec!["eve".to_owned(), "data3".to_owned(), "read".to_owned()]);\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addPolicy("eve", "data3", "read");\n')))),(0,n.kt)("h3",{id:"addpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddPolicies()")),(0,n.kt)("p",null,"AddPolicies f\xfcgt Autorisierungsregeln zu den aktuellen Richtlinien hinzu. Die Operation ist atomarer Natur. Wenn also Autorisierungsregeln aus Regeln bestehen, die nicht mit der aktuellen Politik \xfcbereinstimmen die Funktion falsch zur\xfcckgibt und keine Richtlinien-Regel zur aktuellen Richtlinie hinzugef\xfcgt wird. Wenn alle Autorisierungsregeln mit den Regeln der Politik \xfcbereinstimmen, gibt die Funktion wahr zur\xfcck und jede Richtlinien-Regel wird der aktuellen Richtlinie hinzugef\xfcgt."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"jack", "data4", "read"},\n    []string {"katy", "data4", "write"},\n    []string {"leyo", "data4", "read"},\n    []string {"ham", "data4", "write"},\n}\n\nareRulesAdded := e.AddPolicies(rules)\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesAdded = await e.addPolicies(rules);\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["jack", "data4", "read"],\n    ["katy", "data4", "write"],\n    ["leyo", "data4", "read"],\n    ["ham", "data4", "write"]\n]\nare_rules_added = e.add_policies(rules)\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["jack".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["katy".to_owned(), "data4".to_owned(), "write".to_owned()],\n    vec!["leyo".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["ham".to_owned(), "data4".to_owned(), "write".to_owned()],\n];\n\nlet are_rules_added = e.add_policies(rules).await?\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String[][] rules = {\n    {"jack", "data4", "read"},\n    {"katy", "data4", "write"},\n    {"leyo", "data4", "read"},\n    {"ham", "data4", "write"},\n};\n\nboolean areRulesAdded = e.addPolicies(rules);\n')))),(0,n.kt)("h3",{id:"addpoliciesex"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddPoliciesEx()")),(0,n.kt)("p",null,"AddPoliciesEx adds authorization rules to the current policy. If the rule already exists, the rule will not be added. But unlike AddPolicies, other non-existent rules are added instead of returning false directly"),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'ok, err := e.AddPoliciesEx([][]string{{"user1", "data1", "read"}, {"user2", "data2", "read"}})\n')))),(0,n.kt)("h3",{id:"addnamedpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddNamedPolicy()")),(0,n.kt)("p",null,"AddNamedPolicy f\xfcgt der aktuell benannten Richtlinie eine Autorisierungsregel hinzu. Wenn die Regel bereits existiert, gibt die Funktion falsch zur\xfcck und die Regel wird nicht hinzugef\xfcgt. Andernfalls gibt die Funktion true zur\xfcck, indem die neue Regel hinzugef\xfcgt wird."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'added := e.AddNamedPolicy("p", "eve", "data3", "read")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['eve', 'data3', 'read']\nconst added = await e.addNamedPolicy('p', ...p)\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$added = $e->addNamedPolicy("p", "eve", "data3", "read");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'added = e.add_named_policy("p", "eve", "data3", "read")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddNamedPolicy("p", "eve", "data3", "read");\nor\nvar added = await e.AddNamedPolicyAsync("p", "eve", "data3", "read");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_named_policy("p", vec!["eve".to_owned(), "data3".to_owned(), "read".to_owned()]).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addNamedPolicy("p", "eve", "data3", "read");\n')))),(0,n.kt)("h3",{id:"addnamedpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddNamedPolicies()")),(0,n.kt)("p",null,"AddNamedPolicies f\xfcgt Autorisierungsregeln zu den aktuell benannten Richtlinien hinzu. Die Operation ist atomarer Natur. Wenn also Autorisierungsregeln aus Regeln bestehen, die nicht mit der aktuellen Politik \xfcbereinstimmen die Funktion falsch zur\xfcckgibt und keine Richtlinien-Regel zur aktuellen Richtlinie hinzugef\xfcgt wird. Wenn alle Autorisierungsregeln mit den Regeln der Politik \xfcbereinstimmen, gibt die Funktion wahr zur\xfcck und jede Richtlinien-Regel wird der aktuellen Richtlinie hinzugef\xfcgt."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"jack", "data4", "read"},\n    []string {"katy", "data4", "write"},\n    []string {"leyo", "data4", "read"},\n    []string {"ham", "data4", "write"},\n}\n\nareRulesAdded := e.AddNamedPolicies("p", rules)\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesAdded = await e.addNamedPolicies('p', rules);\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["jack", "data4", "read"],\n    ["katy", "data4", "write"],\n    ["leyo", "data4", "read"],\n    ["ham", "data4", "write"]\n]\nare_rules_added = e.add_named_policies("p", rules)\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["jack".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["katy".to_owned(), "data4".to_owned(), "write".to_owned()],\n    vec!["leyo".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["ham".to_owned(), "data4".to_owned(), "write".to_owned()],\n];\n\nlet are_rules_added := e.add_named_policies("p", rules).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> rules = Arrays.asList(\n    Arrays.asList("jack", "data4", "read"),\n    Arrays.asList("katy", "data4", "write"),\n    Arrays.asList("leyo", "data4", "read"),\n    Arrays.asList("ham", "data4", "write")\n);\nboolean areRulesAdded = e.addNamedPolicies("p", rules);\n')))),(0,n.kt)("h3",{id:"addnamedpoliciesex"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddNamedPoliciesEx()")),(0,n.kt)("p",null,"AddNamedPoliciesEx adds authorization rules to the current named policy. If the rule already exists, the rule will not be added. But unlike AddNamedPolicies, other non-existent rules are added instead of returning false directly"),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'ok, err := e.AddNamedPoliciesEx("p", [][]string{{"user1", "data1", "read"}, {"user2", "data2", "read"}})\n')))),(0,n.kt)("h3",{id:"selfaddpoliciesex"},(0,n.kt)("inlineCode",{parentName:"h3"},"SelfAddPoliciesEx()")),(0,n.kt)("p",null,"SelfAddPoliciesEx adds authorization rules to the current named policy with autoNotifyWatcher disabled. If the rule already exists, the rule will not be added. But unlike SelfAddPolicies, other non-existent rules are added instead of returning false directly"),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'ok, err := e.SelfAddPoliciesEx("p", "p", [][]string{{"user1", "data1", "read"}, {"user2", "data2", "read"}})\n')))),(0,n.kt)("h3",{id:"removepolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemovePolicy()")),(0,n.kt)("p",null,"Entfernt eine Autorisierungsregel aus der aktuellen Richtlinie."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemovePolicy("alice", "data1", "read")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['alice', 'data1', 'read']\nconst removed = await e.removePolicy(...p)\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removePolicy("alice", "data1", "read");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_policy("alice", "data1", "read")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemovePolicy("alice", "data1", "read");\nor\nvar removed = await e.RemovePolicyAsync("alice", "data1", "read");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_policy(vec!["alice".to_owned(), "data1".to_owned(), "read".to_owned()]).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removePolicy("alice", "data1", "read");\n')))),(0,n.kt)("h3",{id:"removepolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemovePolicies()")),(0,n.kt)("p",null,"Entfernen von Richtlinien entfernt Autorisierungsregeln aus der aktuellen Richtlinie. Die Operation ist atomarer Natur. Wenn also Autorisierungsregeln aus Regeln bestehen, die nicht mit der aktuellen Politik \xfcbereinstimmen die Funktion falsch zur\xfcckgibt und keine Richtlinien-Regel aus der aktuellen Richtlinie entfernt wird. Wenn alle Autorisierungsregeln mit den Regeln \xfcbereinstimmen, gibt die Funktion wahr zur\xfcck und jede Regel wird aus der aktuellen Richtlinie entfernt."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"jack", "data4", "read"},\n    []string {"katy", "data4", "write"},\n    []string {"leyo", "data4", "read"},\n    []string {"ham", "data4", "write"},\n}\n\nareRulesRemoved := e.RemovePolicies(rules)\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesRemoved = await e.removePolicies(rules);\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["jack", "data4", "read"],\n    ["katy", "data4", "write"],\n    ["leyo", "data4", "read"],\n    ["ham", "data4", "write"]\n]\nare_rules_removed = e.remove_policies(rules)\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["jack".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["katy".to_owned(), "data4".to_owned(), "write".to_owned()],\n    vec!["leyo".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["ham".to_owned(), "data4".to_owned(), "write".to_owned()],\n];\n\nlet are_rules_removed = e.remove_policies(rules).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String[][] rules = {\n    {"jack", "data4", "read"},\n    {"katy", "data4", "write"},\n    {"leyo", "data4", "read"},\n    {"ham", "data4", "write"},\n};\nboolean areRulesRemoved = e.removePolicies(rules);\n')))),(0,n.kt)("h3",{id:"removefilteredpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveFilteredPolicy()")),(0,n.kt)("p",null,"Entfernen FilteredPolicy entfernt eine Autorisierungsregel aus der aktuellen Richtlinie. Feldfilter k\xf6nnen angegeben werden. Entfernt eine Autorisierungsregel aus der aktuellen Richtlinie."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveFilteredPolicy(0, "alice", "data1", "read")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['alice', 'data1', 'read']\nconst removed = await e.removeFilteredPolicy(0, ...p)\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeFilteredPolicy(0, "alice", "data1", "read");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_filtered_policy(0, "alice", "data1", "read")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveFilteredPolicy("alice", "data1", "read");\nor\nvar removed = await e.RemoveFilteredPolicyAsync("alice", "data1", "read");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_filtered_policy(0, vec!["alice".to_owned(), "data1".to_owned(), "read".to_owned()]).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeFilteredPolicy(0, "alice", "data1", "read");\n')))),(0,n.kt)("h3",{id:"removenamedpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveNamedPolicy()")),(0,n.kt)("p",null,"Entfernt eine Autorisierungsregel aus der aktuell benannten Richtlinie."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveNamedPolicy("p", "alice", "data1", "read")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['alice', 'data1', 'read']\nconst removed = await e.removeNamedPolicy('p', ...p)\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeNamedPolicy("p", "alice", "data1", "read");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_named_policy("p", "alice", "data1", "read")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveNamedPolicy("p", "alice", "data1", "read");\nor\nvar removed = await e.RemoveNamedPolicyAsync("p", "alice", "data1", "read");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_named_policy("p", vec!["alice".to_owned(), "data1".to_owned(), "read".to_owned()]).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeNamedPolicy("p", "alice", "data1", "read");\n')))),(0,n.kt)("h3",{id:"removenamedpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveNamedPolicies()")),(0,n.kt)("p",null,"Entfernt die Autorisierungsregeln aus der aktuell benannten Richtlinie. Die Operation ist atomarer Natur. Wenn also Autorisierungsregeln aus Regeln bestehen, die nicht mit der aktuellen Politik \xfcbereinstimmen die Funktion falsch zur\xfcckgibt und keine Richtlinien-Regel aus der aktuellen Richtlinie entfernt wird. Wenn alle Autorisierungsregeln mit den Regeln \xfcbereinstimmen, gibt die Funktion wahr zur\xfcck und jede Regel wird aus der aktuellen Richtlinie entfernt."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"jack", "data4", "read"},\n    []string {"katy", "data4", "write"},\n    []string {"leyo", "data4", "read"},\n    []string {"ham", "data4", "write"},\n}\n\nareRulesRemoved := e.RemoveNamedPolicies("p", rules)\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesRemoved = await e.removeNamedPolicies('p', rules);\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["jack", "data4", "read"],\n    ["katy", "data4", "write"],\n    ["leyo", "data4", "read"],\n    ["ham", "data4", "write"]\n]\nare_rules_removed = e.remove_named_policies("p", rules)\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["jack".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["katy".to_owned(), "data4".to_owned(), "write".to_owned()],\n    vec!["leyo".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["ham".to_owned(), "data4".to_owned(), "write".to_owned()],\n];\n\nlet areRulesRemoved = e.remove_named_policies("p", rules).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> rules = Arrays.asList(\n    Arrays.asList("jack", "data4", "read"),\n    Arrays.asList("katy", "data4", "write"),\n    Arrays.asList("leyo", "data4", "read"),\n    Arrays.asList("ham", "data4", "write")\n);\nboolean areRulesRemoved = e.removeNamedPolicies("p", rules);\n')))),(0,n.kt)("h3",{id:"removefilterednamedpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveFilteredNamedPolicy()")),(0,n.kt)("p",null,"RemoveFilteredNamedPolicy entfernt eine Autorisierungsregel aus der aktuellen Richtlinie. Feldfilter k\xf6nnen angegeben werden."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveFilteredNamedPolicy("p", 0, "alice", "data1", "read")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['alice', 'data1', 'read']\nconst removed = await e.removeFilteredNamedPolicy('p', 0, ...p)\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeFilteredNamedPolicy("p", 0, "alice", "data1", "read");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_filtered_named_policy("p", 0, "alice", "data1", "read")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveFilteredNamedPolicy("p", 0, "alice", "data1", "read");\nor\nvar removed = e.RemoveFilteredNamedPolicyAync("p", 0, "alice", "data1", "read");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_filtered_named_policy("p", 0, vec!["alice".to_owned(), "data1".to_owned(), "read".to_owned()]).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeFilteredNamedPolicy("p", 0, "alice", "data1", "read");\n')))),(0,n.kt)("h3",{id:"hasgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"HasGroupingPolicy()")),(0,n.kt)("p",null,"HasGroupingPolicy bestimmt, ob eine Rollenvererbungsregel existiert."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'has := e.HasGroupingPolicy("alice", "data2_admin")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const has = await e.hasGroupingPolicy('alice', 'data2_admin')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$has = $e->hasGroupingPolicy("alice", "data2_admin");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'has = e.has_grouping_policy("alice", "data2_admin")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var has = e.HasGroupingPolicy("alice", "data2_admin");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let has = e.has_grouping_policy(vec!["alice".to_owned(), "data2_admin".to_owned()]);\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean has = e.hasGroupingPolicy("alice", "data2_admin");\n')))),(0,n.kt)("h3",{id:"hasnamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"HasNamedGroupingPolicy()")),(0,n.kt)("p",null,"HasNamedGroupingPolicy legt fest, ob eine benannte Rollenvererbungsregel existiert."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'has := e.HasNamedGroupingPolicy("g", "alice", "data2_admin")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const has = await e.hasNamedGroupingPolicy('g', 'alice', 'data2_admin')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$has = $e->hasNamedGroupingPolicy("g", "alice", "data2_admin");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'has = e.has_named_grouping_policy("g", "alice", "data2_admin")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var has = e.HasNamedGroupingPolicy("g", "alice", "data2_admin");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let has = e.has_named_grouping_policy("g", vec!["alice".to_owned(), "data2_admin".to_owned()]);\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean has = e.hasNamedGroupingPolicy("g", "alice", "data2_admin");\n')))),(0,n.kt)("h3",{id:"addgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddGroupingPolicy()")),(0,n.kt)("p",null,"AddGroupingPolicy f\xfcgt der aktuellen Richtlinie eine Rollenvererbungsregel hinzu. Wenn die Regel bereits existiert, gibt die Funktion falsch zur\xfcck und die Regel wird nicht hinzugef\xfcgt. Andernfalls gibt die Funktion true zur\xfcck, indem die neue Regel hinzugef\xfcgt wird."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'added := e.AddGroupingPolicy("group1", "data2_admin")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const added = await e.addGroupingPolicy('group1', 'data2_admin')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$added = $e->addGroupingPolicy("group1", "data2_admin");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'added = e.add_grouping_policy("group1", "data2_admin")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddGroupingPolicy("group1", "data2_admin");\nor\nvar added = await e.AddGroupingPolicyAsync("group1", "data2_admin");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_grouping_policy(vec!["group1".to_owned(), "data2_admin".to_owned()]).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addGroupingPolicy("group1", "data2_admin");\n')))),(0,n.kt)("h3",{id:"addgroupingpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddGroupingPolicies()")),(0,n.kt)("p",null,"AddGroupingPolicies f\xfcgt Rollenvererbungsregeln zu den aktuellen Richtlinien hinzu. Die Operation ist atomarer Natur. Wenn also Autorisierungsregeln aus Regeln bestehen, die nicht mit der aktuellen Politik \xfcbereinstimmen die Funktion falsch zur\xfcckgibt und keine Richtlinien-Regel zur aktuellen Richtlinie hinzugef\xfcgt wird. Wenn alle Autorisierungen mit den Regeln \xfcbereinstimmen, gibt die Funktion wahr zur\xfcck und jede Richtlinien-Regel wird der aktuellen Richtlinie hinzugef\xfcgt."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"ham", "data4_admin"},\n    []string {"jack", "data5_admin"},\n}\n\nareRulesAdded := e.AddGroupingPolicies(rules)\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesAdded = await e.addGroupingPolicies(groupingRules);\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["ham", "data4_admin"],\n    ["jack", "data5_admin"]\n]\n\nare_rules_added = e.add_grouping_policies(rules)\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["ham".to_owned(), "data4_admin".to_owned()],\n    vec!["jack".to_owned(), "data5_admin".to_owned()],\n];\n\nlet areRulesAdded = e.add_grouping_policies(rules).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String[][] groupingRules = {\n    {"ham", "data4_admin"},\n    {"jack", "data5_admin"}\n};\nboolean areRulesAdded = e.addGroupingPolicies(groupingRules);\n')))),(0,n.kt)("h3",{id:"addgroupingpoliciesex"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddGroupingPoliciesEx()")),(0,n.kt)("p",null,"AddGroupingPoliciesEx adds role inheritance rules to the current policy. If the rule already exists, the rule will not be added. But unlike AddGroupingPolicies, other non-existent rules are added instead of returning false directly"),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'ok, err := e.AddGroupingPoliciesEx([][]string{{"user1", "member"}, {"user2", "member"}})\n')))),(0,n.kt)("h3",{id:"addnamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddNamedGroupingPolicy()")),(0,n.kt)("p",null,"AddNamedGroupingPolicy f\xfcgt der aktuellen Richtlinie eine benannte Rollenvererbungsregel hinzu. Wenn die Regel bereits existiert, gibt die Funktion falsch zur\xfcck und die Regel wird nicht hinzugef\xfcgt. Andernfalls gibt die Funktion true zur\xfcck, indem die neue Regel hinzugef\xfcgt wird."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'added := e.AddNamedGroupingPolicy("g", "group1", "data2_admin")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const added = await e.addNamedGroupingPolicy('g', 'group1', 'data2_admin')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$added = $e->addNamedGroupingPolicy("g", "group1", "data2_admin");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'added = e.add_named_grouping_policy("g", "group1", "data2_admin")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddNamedGroupingPolicy("g", "group1", "data2_admin");\nor\nvar added = await e.AddNamedGroupingPolicyAsync("g", "group1", "data2_admin");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_named_grouping_policy("g", vec!["group1".to_owned(), "data2_admin".to_owned()]).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addNamedGroupingPolicy("g", "group1", "data2_admin");\n')))),(0,n.kt)("h3",{id:"addnamedgroupingpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddNamedGroupingPolicies()")),(0,n.kt)("p",null,"AddNamedGroupingPolicies f\xfcgt den aktuellen Richtlinien benannte Vererbungsregeln hinzu. Die Operation ist atomarer Natur. Wenn also Autorisierungsregeln aus Regeln bestehen, die nicht mit der aktuellen Politik \xfcbereinstimmen die Funktion falsch zur\xfcckgibt und keine Richtlinien-Regel zur aktuellen Richtlinie hinzugef\xfcgt wird. Wenn alle Autorisierungsregeln mit den Regeln der Politik \xfcbereinstimmen, gibt die Funktion wahr zur\xfcck und jede Richtlinien-Regel wird der aktuellen Richtlinie hinzugef\xfcgt."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"ham", "data4_admin"},\n    []string {"jack", "data5_admin"},\n}\n\nareRulesAdded := e.AddNamedGroupingPolicies("g", rules)\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesAdded = await e.addNamedGroupingPolicies('g', groupingRules);\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["ham", "data4_admin"],\n    ["jack", "data5_admin"]\n]\n\nare_rules_added = e.add_named_grouping_policies("g", rules)\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["ham".to_owned(), "data4_admin".to_owned()],\n    vec!["jack".to_owned(), "data5_admin".to_owned()],\n];\n\nlet are_rules_added = e.add_named_grouping_policies("g", rules).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String[][] groupingRules = {\n    {"ham", "data4_admin"},\n    {"jack", "data5_admin"}\n};\nboolean areRulesAdded = e.addNamedGroupingPolicies("g", groupingRules);\n')))),(0,n.kt)("h3",{id:"addnamedgroupingpoliciesex"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddNamedGroupingPoliciesEx()")),(0,n.kt)("p",null,"AddNamedGroupingPoliciesEx adds named role inheritance rules to the current policy. If the rule already exists, the rule will not be added. But unlike AddNamedGroupingPolicies, other non-existent rules are added instead of returning false directly"),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'ok, err := e.AddNamedGroupingPoliciesEx("g", [][]string{{"user1", "member"}, {"user2", "member"}})\n')))),(0,n.kt)("h3",{id:"removegroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveGroupingPolicy()")),(0,n.kt)("p",null,"RemoveGroupingPolicy entfernt eine Rollenvererbungsregel aus der aktuellen Richtlinie."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveGroupingPolicy("alice", "data2_admin")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const removed = await e.removeGroupingPolicy('alice', 'data2_admin')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeGroupingPolicy("alice", "data2_admin");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_grouping_policy("alice", "data2_admin")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveGroupingPolicy("alice", "data2_admin");\nor\nvar removed = await e.RemoveGroupingPolicyAsync("alice", "data2_admin");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_grouping_policy(vec!["alice".to_owned(), "data2_admin".to_owned()]).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeGroupingPolicy("alice", "data2_admin");\n')))),(0,n.kt)("h3",{id:"removegroupingpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveGroupingPolicies()")),(0,n.kt)("p",null,"Entfernen von GroupingPolicies entfernt Rollenvererbungsregeln aus der aktuellen Richtlinie. Die Operation ist atomarer Natur. Wenn also Autorisierungsregeln aus Regeln bestehen, die nicht mit der aktuellen Politik \xfcbereinstimmen die Funktion falsch zur\xfcckgibt und keine Richtlinien-Regel aus der aktuellen Richtlinie entfernt wird. Wenn alle Autorisierungsregeln mit den Regeln \xfcbereinstimmen, gibt die Funktion wahr zur\xfcck und jede Regel wird aus der aktuellen Richtlinie entfernt."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n                []string {"ham", "data4_admin"},\n                []string {"jack", "data5_admin"},\n        }\n\nareRulesRemoved := e.RemoveGroupingPolicies(rules)\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesRemoved = await e.removeGroupingPolicies(groupingRules);\n"))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["ham".to_owned(), "data4_admin".to_owned()],\n    vec!["jack".to_owned(), "data5_admin".to_owned()],\n];\n\nlet are_rules_removed = e.remove_grouping_policies(rules).await?;\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["ham", "data4_admin"],\n    ["jack", "data5_admin"]\n]\n\nare_rules_removed = e.remove_grouping_policies(rules)\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String[][] groupingRules = {\n    {"ham", "data4_admin"},\n    {"jack", "data5_admin"}\n};\nboolean areRulesRemoved = e.removeGroupingPolicies(groupingRules);\n')))),(0,n.kt)("h3",{id:"removefilteredgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveFilteredGroupingPolicy()")),(0,n.kt)("p",null,"RemoveFilteredGroupingPolicy entfernt eine Rollenvererbungsregel aus der aktuellen Richtlinie. Feldfilter k\xf6nnen angegeben werden."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveFilteredGroupingPolicy(0, "alice")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const removed = await e.removeFilteredGroupingPolicy(0, 'alice')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeFilteredGroupingPolicy(0, "alice");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_filtered_grouping_policy(0, "alice")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveFilteredGroupingPolicy(0, "alice");\nor\nvar removed = await e.RemoveFilteredGroupingPolicyAsync(0, "alice");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_filtered_grouping_policy(0, vec!["alice".to_owned()]).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeFilteredGroupingPolicy(0, "alice");\n')))),(0,n.kt)("h3",{id:"removenamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveNamedGroupingPolicy()")),(0,n.kt)("p",null,"RemoveNamedGroupingPolicy entfernt eine Rollenvererbungsregel aus der aktuell benannten Richtlinie."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveNamedGroupingPolicy("g", "alice")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const removed = await e.removeNamedGroupingPolicy('g', 'alice')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeNamedGroupingPolicy("g", "alice");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_named_grouping_policy("g", "alice", "data2_admin")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveNamedGroupingPolicy("g", "alice");\nor \nvar removed = await e.RemoveNamedGroupingPolicyAsync("g", "alice");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_named_grouping_policy("g", vec!["alice".to_owned()]).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeNamedGroupingPolicy("g", "alice");\n')))),(0,n.kt)("h3",{id:"removenamedgroupingpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveNamedGroupingPolicies()")),(0,n.kt)("p",null,"RemoveNamedGroupingPolicies entfernt benannte Rollenvererbungsregeln aus der aktuellen Richtlinie. Die Operation ist atomarer Natur. Wenn also Autorisierungsregeln aus Regeln bestehen, die nicht mit der aktuellen Politik \xfcbereinstimmen die Funktion falsch zur\xfcckgibt und keine Richtlinien-Regel aus der aktuellen Richtlinie entfernt wird. Wenn alle Autorisierungsregeln mit den Regeln \xfcbereinstimmen, gibt die Funktion wahr zur\xfcck und jede Regel wird aus der aktuellen Richtlinie entfernt."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"ham", "data4_admin"},\n    []string {"jack", "data5_admin"},\n}\n\nareRulesRemoved := e.RemoveNamedGroupingPolicies("g", rules)\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesRemoved = await e.removeNamedGroupingPolicies('g', groupingRules);\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["ham", "data4_admin"],\n    ["jack", "data5_admin"]\n]\nare_rules_removed = e.remove_named_grouping_policies("g", rules)\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["ham".to_owned(), "data4_admin".to_owned()],\n    vec!["jack".to_owned(), "data5_admin".to_owned()],\n];\n\nlet are_rules_removed = e.remove_named_grouping_policies("g", rules).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String[][] groupingRules = {\n    {"ham", "data4_admin"},\n    {"jack", "data5_admin"}\n};\nboolean areRulesRemoved = e.removeNamedGroupingPolicies("g", groupingRules);\n')))),(0,n.kt)("h3",{id:"removefilterednamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveFilteredNamedGroupingPolicy()")),(0,n.kt)("p",null,"RemoveFilteredNamedGroupingPolicy entfernt eine Rollenvererbungsregel aus der aktuell benannten Richtlinie. Feldfilter k\xf6nnen angegeben werden."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveFilteredNamedGroupingPolicy("g", 0, "alice")\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const removed = await e.removeFilteredNamedGroupingPolicy('g', 0, 'alice')\n"))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeFilteredNamedGroupingPolicy("g", 0, "alice");\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_filtered_named_grouping_policy("g", 0, "alice")\n'))),(0,n.kt)(s,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveFilteredNamedGroupingPolicy("g", 0, "alice");\nor\nvar removed = await e.RemoveFilteredNamedGroupingPolicyAsync("g", 0, "alice");\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_filtered_named_groupingPolicy("g", 0, vec!["alice".to_owned()]).await?;\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeFilteredNamedGroupingPolicy("g", 0, "alice");\n')))),(0,n.kt)("h3",{id:"updatepolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"UpdatePolicy()")),(0,n.kt)("p",null,"UpdatePolicy aktualisiert eine alte Richtlinie auf neue Richtlinien."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'updated, err := e.UpdatePolicy([]string{"eve", "data3", "read"}, []string{"eve", "data3", "write"})\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},'const update = await e.updatePolicy(["eve", "data3", "read"], ["eve", "data3", "write"]);\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'updated = e.update_policy(["eve", "data3", "read"], ["eve", "data3", "write"])\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean updated = e.updatePolicy(Arrays.asList("eve", "data3", "read"), Arrays.asList("eve", "data3", "write"));\n')))),(0,n.kt)("h3",{id:"updatepolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"UpdatePolicies()")),(0,n.kt)("p",null,"UpdatePolicies aktualisiert alle alten Richtlinien auf neue Richtlinien."),(0,n.kt)("p",null,"Zum Beispiel:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'updated, err := e.UpdatePolicies([][]string{{"eve", "data3", "read"}, {"jack", "data3", "read"}}, [][]string{{"eve", "data3", "write"}, {"jack", "data3", "write"}})\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'old_rules = [["eve", "data3", "read"], ["jack", "data3", "read"]]\nnew_rules = [["eve", "data3", "write"], ["jack", "data3", "write"]]\n\nupdated = e.update_policies(old_rules, new_rules)\n')))),(0,n.kt)("h3",{id:"addfunction"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddFunction()")),(0,n.kt)("p",null,"AddFunction f\xfcgt eine benutzerdefinierte Funktion hinzu."),(0,n.kt)("p",null,"For example:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'func CustomFunction(key1 string, key2 string) bool {\n    if key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data/:resource" {\n        return true\n    } else if key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data2/:id/using/:resId" {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc CustomFunctionWrapper(args ...interface{}) (interface{}, error) {\n    key1 := args[0].(string)\n    key2 := args[1].(string)\n\n    return bool(CustomFunction(key1, key2)), nil\n}\n\ne.AddFunction("keyMatchCustom", CustomFunctionWrapper)\n'))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},'function customFunction(key1, key2){\n    if(key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data/:resource") {\n        return true\n    } else if(key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data2/:id/using/:resId") {\n        return true\n    } else {\n        return false\n    }\n}\n\ne.addFunction("keyMatchCustom", customFunction);\n'))),(0,n.kt)(s,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'func customFunction($key1, $key2) {\n    if ($key1 == "/alice_data2/myid/using/res_id" && $key2 == "/alice_data/:resource") {\n        return true;\n    } elseif ($key1 == "/alice_data2/myid/using/res_id" && $key2 == "/alice_data2/:id/using/:resId") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunc customFunctionWrapper(...$args){\n    $key1 := $args[0];\n    $key2 := $args[1];\n\n    return customFunction($key1, $key2);\n}\n\n$e->addFunction("keyMatchCustom", customFunctionWrapper);\n'))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'def custom_function(key1, key2):\n    return ((key1 == "/alice_data2/myid/using/res_id" and key2 == "/alice_data/:resource") or (key1 == "/alice_data2/myid/using/res_id" and key2 == "/alice_data2/:id/using/:resId"))\n\n\ne.add_function("keyMatchCustom", custom_function)\n'))),(0,n.kt)(s,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'fn custom_function(key1: STring, key2: String) {\n    key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data/:resource" || key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data2/:id/using/:resId"\n}\n\n\ne.add_function("keyMatchCustom", custom_function);\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'public static class CustomFunc extends CustomFunction {\n    @Override\n    public AviatorObject call(Map<String, Object> env, AviatorObject arg1, AviatorObject arg2) {\n        String key1 = FunctionUtils.getStringValue(arg1, env);\n        String key2 = FunctionUtils.getStringValue(arg2, env);\n        if (key1.equals("/alice_data2/myid/using/res_id") && key2.equals("/alice_data/:resource")) {\n            return AviatorBoolean.valueOf(true);\n        } else if (key1.equals("/alice_data2/myid/using/res_id") && key2.equals("/alice_data2/:id/using/:resId")) {\n            return AviatorBoolean.valueOf(true);\n        } else {\n            return AviatorBoolean.valueOf(false);\n        }\n    }\n\n    @Override\n    public String getName() {\n        return "keyMatchCustom";\n    }\n}\n\nFunctionTest.CustomFunc customFunc = new FunctionTest.CustomFunc();\ne.addFunction(customFunc.getName(), customFunc);\n')))),(0,n.kt)("h3",{id:"loadfilteredpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"LoadFilteredPolicy()")),(0,n.kt)("p",null,"LoadFilteredPolicy l\xe4dt gefilterte Richtlinien aus der Datei/Datenbank."),(0,n.kt)("p",null,"For example:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"err := e.LoadFilteredPolicy()\n"))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const ok = await e.loadFilteredPolicy();\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'class Filter:\n    P = []\n    G = []\n\nadapter = casbin.persist.adapters.FilteredAdapter("rbac_with_domains_policy.csv")\ne = casbin.Enforcer("rbac_with_domains_model.conf", adapter)\nfilter = Filter()\nfilter.P = ["", "domain1"]\nfilter.G = ["", "", "domain1"]\ne.load_filtered_policy(filter)\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'e.loadFilteredPolicy(new String[] { "", "domain1" });\n')))),(0,n.kt)("h3",{id:"loadincrementalfilteredpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"LoadIncrementalFilteredPolicy()")),(0,n.kt)("p",null,"LoadIncrementalFilteredPolicy f\xfcgt eine gefilterte Richtlinie aus der Datei/Datenbank hinzu."),(0,n.kt)("p",null,"For example:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"err := e.LoadIncrementalFilteredPolicy()\n"))),(0,n.kt)(s,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const ok = await e.loadIncrementalFilteredPolicy();\n"))),(0,n.kt)(s,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'adapter = casbin.persist.adapters.FilteredAdapter("rbac_with_domains_policy.csv")\ne = casbin.Enforcer("rbac_with_domains_model.conf", adapter)\nfilter = Filter()\nfilter.P = ["", "domain1"]\nfilter.G = ["", "", "domain1"]\ne.load_increment_filtered_policy(filter)\n')))),(0,n.kt)("h3",{id:"updategroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"UpdateGroupingPolicy()")),(0,n.kt)("p",null,"UpdateGroupingPolicy aktualisiert alte Regeln auf newRulein ",(0,n.kt)("inlineCode",{parentName:"p"},"g Abschnitt")),(0,n.kt)("p",null,"For example:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'succeed, err : = e.UpdateGroupingPolicy([]string{"data3_admin", "data4_admin"}, []string{"admin", "data4_admin"})\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Java"},'boolean succeed = e.updateGroupingPolicy(Arrays.asList("data3_admin", "data4_admin"), Arrays.asList("admin", "data4_admin"));\n')))),(0,n.kt)("h3",{id:"updatenamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"UpdateNamedGroupingPolicy()")),(0,n.kt)("p",null,"UpdateNamedGroupingPolicy aktualisiert alte Regeln mit dem Namen ",(0,n.kt)("inlineCode",{parentName:"p"},"ptype")," auf newRulein ",(0,n.kt)("inlineCode",{parentName:"p"},"g")," Abschnitt"),(0,n.kt)("p",null,"For example:"),(0,n.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'succeed, err : = e.UpdateGroupingPolicy("g1",[]string{"data3_admin", "data4_admin"}, []string{"admin", "data4_admin"})\n'))),(0,n.kt)(s,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Java"},'boolean succeed = e.updateNamedGroupingPolicy("g1", Arrays.asList("data3_admin", "data4_admin"), Arrays.asList("admin", "data4_admin"));\n')))),(0,n.kt)("h3",{id:"setfieldindex"},(0,n.kt)("inlineCode",{parentName:"h3"},"SetFieldIndex()")),(0,n.kt)("p",null,"SetFieldIndex suport customization of conventional name and position of ",(0,n.kt)("inlineCode",{parentName:"p"},"sub"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"obj"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"domain")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"priority"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_definition]\np = customized_priority, obj, act, eft, subject\n")),(0,n.kt)("p",null,"For example:"),(0,n.kt)(m,{mdxType:"Tabs"},(0,n.kt)(s,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'e.SetFieldIndex("p", constant.PriorityIndex, 0)\ne.SetFieldIndex("p", constant.SubjectIndex, 4)\n')))))}g.isMDXComponent=!0}}]);