"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[6975],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),d=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(t),m=r,b=u["".concat(o,".").concat(m)]||u[m]||c[m]||i;return t?a.createElement(b,l(l({ref:n},p),{},{components:t})):a.createElement(b,l({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var d=2;d<i;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1178:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>b,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const i={id:"syntax-for-models",title:"Syntax for Models",description:"Syntax f\xfcr Modelle",keywords:["syntax"],authors:["nodece"]},l=void 0,s={unversionedId:"syntax-for-models",id:"syntax-for-models",title:"Syntax for Models",description:"Syntax f\xfcr Modelle",source:"@site/i18n/de/docusaurus-plugin-content-docs/current/SyntaxForModels.mdx",sourceDirName:".",slug:"/syntax-for-models",permalink:"/de/docs/syntax-for-models",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/SyntaxForModels.mdx",tags:[],version:"current",frontMatter:{id:"syntax-for-models",title:"Syntax for Models",description:"Syntax f\xfcr Modelle",keywords:["syntax"],authors:["nodece"]},sidebar:"docs",previous:{title:"Supported Models",permalink:"/de/docs/supported-models"},next:{title:"Effector",permalink:"/de/docs/effector"}},o={},d=[{value:"Anforderungsdefinition",id:"anforderungsdefinition",level:2},{value:"Richtliniendefinition",id:"richtliniendefinition",level:2},{value:"Richtlinienwirkung",id:"richtlinienwirkung",level:2},{value:"Matchers",id:"matchers",level:2},{value:"Reihenfolge der Ausdr\xfccke in Matchern",id:"reihenfolge-der-ausdr\xfccke-in-matchern",level:3},{value:"Mehrere Abschnittstypen",id:"mehrere-abschnittstypen",level:2},{value:"Spezielle Grammatik",id:"spezielle-grammatik",level:2},{value:"Ausdrucksbewerter",id:"ausdrucksbewerter",level:2}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)},c=p("Tabs"),u=p("TabItem"),m={toc:d};function b(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Eine Modellkonfiguration (CONF) sollte mindestens vier Abschnitte haben: ",(0,r.kt)("inlineCode",{parentName:"p"},"[request_definition]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"[policy_definition]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"[policy_effect]")," und ",(0,r.kt)("inlineCode",{parentName:"p"},"[matchers]"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Wenn ein Modell Role-Based Access Control (RBAC) verwendet, sollte es auch den Abschnitt ",(0,r.kt)("inlineCode",{parentName:"p"},"[role_definition]")," enthalten.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Eine Modellkonfiguration (CONF) kann Kommentare enthalten. Kommentare beginnen mit dem ",(0,r.kt)("inlineCode",{parentName:"p"},"#")," Symbol, und alles nach dem ",(0,r.kt)("inlineCode",{parentName:"p"},"#")," Symbol wird auskommentiert."))),(0,r.kt)("h2",{id:"anforderungsdefinition"},"Anforderungsdefinition"),(0,r.kt)("p",null,"Der Abschnitt ",(0,r.kt)("inlineCode",{parentName:"p"},"[request_definition]")," definiert die Argumente in der Funktion ",(0,r.kt)("inlineCode",{parentName:"p"},"e.Enforce(...)"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n")),(0,r.kt)("p",null,"In diesem Beispiel repr\xe4sentieren ",(0,r.kt)("inlineCode",{parentName:"p"},"sub"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"obj")," und ",(0,r.kt)("inlineCode",{parentName:"p"},"act")," das klassische Zugriffstriplett: das Subjekt (zugreifende Entit\xe4t), das Objekt (zugegriffene Ressource) und die Aktion (Zugriffsmethode). Sie k\xf6nnen jedoch Ihr eigenes Anforderungsformat anpassen. Zum Beispiel k\xf6nnen Sie ",(0,r.kt)("inlineCode",{parentName:"p"},"sub, act")," verwenden, wenn Sie keine bestimmte Ressource angeben m\xfcssen, oder ",(0,r.kt)("inlineCode",{parentName:"p"},"sub, sub2, obj, act"),", wenn Sie zwei zugreifende Entit\xe4ten haben."),(0,r.kt)("h2",{id:"richtliniendefinition"},"Richtliniendefinition"),(0,r.kt)("p",null,"Die ",(0,r.kt)("inlineCode",{parentName:"p"},"[policy_definition]")," ist die Definition f\xfcr eine Richtlinie. Es definiert die Bedeutung der Richtlinie. Zum Beispiel haben wir das folgende Modell:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_definition]\np = sub, obj, act\np2 = sub, act\n")),(0,r.kt)("p",null,"Und wir haben die folgende Richtlinie (wenn in einer Richtliniendatei):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, data1, read\np2, bob, write-all-objects\n")),(0,r.kt)("p",null,"Jede Zeile in einer Richtlinie wird als Richtlinienregel bezeichnet. Jede Richtlinienregel beginnt mit einem ",(0,r.kt)("inlineCode",{parentName:"p"},"Richtlinientyp"),", wie ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," oder ",(0,r.kt)("inlineCode",{parentName:"p"},"p2"),". Es wird verwendet, um die Richtliniendefinition abzugleichen, wenn es mehrere Definitionen gibt. Die obige Richtlinie zeigt die folgende Bindung. Die Bindung kann im Matcher verwendet werden."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"(alice, data1, read) -> (p.sub, p.obj, p.act)\n(bob, write-all-objects) -> (p2.sub, p2.act)\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Die Elemente in einer Richtlinienregel werden immer als ",(0,r.kt)("inlineCode",{parentName:"p"},"Zeichenketten")," betrachtet. Wenn Sie dazu Fragen haben, verweisen Sie bitte auf die Diskussion unter: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/issues/113"},"https://github.com/casbin/casbin/issues/113"))),(0,r.kt)("h2",{id:"richtlinienwirkung"},"Richtlinienwirkung"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[policy_effect]")," ist die Definition f\xfcr die Richtlinienwirkung. Es bestimmt, ob die Zugriffsanforderung genehmigt werden sollte, wenn mehrere Richtlinienregeln der Anforderung entsprechen. Zum Beispiel erlaubt eine Regel und die andere verbietet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = some(where (p.eft == allow))\n")),(0,r.kt)("p",null,"Die obige Richtlinienwirkung bedeutet, dass, wenn es irgendeine \xfcbereinstimmende Richtlinienregel von ",(0,r.kt)("inlineCode",{parentName:"p"},"allow")," gibt, die endg\xfcltige Wirkung ",(0,r.kt)("inlineCode",{parentName:"p"},"allow")," ist (auch bekannt als allow-override). ",(0,r.kt)("inlineCode",{parentName:"p"},"p.eft")," ist die Wirkung f\xfcr eine Richtlinie, und es kann entweder ",(0,r.kt)("inlineCode",{parentName:"p"},"allow")," oder ",(0,r.kt)("inlineCode",{parentName:"p"},"deny")," sein. Es ist optional, und der Standardwert ist ",(0,r.kt)("inlineCode",{parentName:"p"},"allow"),". Da wir es oben nicht angegeben haben, verwendet es den Standardwert."),(0,r.kt)("p",null,"Ein weiteres Beispiel f\xfcr den Effekt der Richtlinie ist:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = !some(where (p.eft == deny))\n")),(0,r.kt)("p",null,"Das bedeutet, dass, wenn es keine passenden Richtlinienregeln f\xfcr ",(0,r.kt)("inlineCode",{parentName:"p"},"deny")," gibt, der endg\xfcltige Effekt ",(0,r.kt)("inlineCode",{parentName:"p"},"allow")," ist (auch bekannt als deny-override). ",(0,r.kt)("inlineCode",{parentName:"p"},"some")," bedeutet, dass es eine passende Richtlinienregel gibt. ",(0,r.kt)("inlineCode",{parentName:"p"},"any")," bedeutet, dass alle passenden Richtlinienregeln (hier nicht verwendet). Der Effekt der Richtlinie kann sogar mit logischen Ausdr\xfccken verbunden werden:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = some(where (p.eft == allow)) && !some(where (p.eft == deny))\n")),(0,r.kt)("p",null,"Das bedeutet, dass es mindestens eine passende Richtlinienregel f\xfcr ",(0,r.kt)("inlineCode",{parentName:"p"},"allow")," geben muss und es darf keine passende Richtlinienregel f\xfcr ",(0,r.kt)("inlineCode",{parentName:"p"},"deny")," geben. Daher werden auf diese Weise sowohl allow- als auch deny-Autorisierungen unterst\xfctzt und deny hat Vorrang."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Obwohl wir die Syntax des Richtlinieneffekts wie oben entworfen haben, verwenden die aktuellen Implementierungen nur fest codierte Richtlinieneffekte. Das liegt daran, dass wir festgestellt haben, dass es nicht viel Bedarf f\xfcr diese Flexibilit\xe4t gibt. Daher m\xfcssen Sie derzeit einen der eingebauten Richtlinieneffekte verwenden, anstatt Ihren eigenen anzupassen.")),(0,r.kt)("p",null,"Die unterst\xfctzten eingebauten Richtlinieneffekte sind:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Richtlinien Effekt"),(0,r.kt)("th",{parentName:"tr",align:null},"Bedeutung"),(0,r.kt)("th",{parentName:"tr",align:null},"Beispiel"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"some(where (p.eft == allow))"),(0,r.kt)("td",{parentName:"tr",align:null},"allow-override"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"ACL, RBAC, etc."))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"!some(where (p.eft == deny))"),(0,r.kt)("td",{parentName:"tr",align:null},"deny-override"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Deny-override"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"some(where (p.eft == allow)) && !some(where (p.eft == deny))"),(0,r.kt)("td",{parentName:"tr",align:null},"allow-and-deny"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Allow-and-deny"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"priority(p.eft) ","|","|"," deny"),(0,r.kt)("td",{parentName:"tr",align:null},"priority"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Priority"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"subjectPriority(p.eft)"),(0,r.kt)("td",{parentName:"tr",align:null},"Priorit\xe4t basierend auf Rolle"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Subject-Priority"))))),(0,r.kt)("h2",{id:"matchers"},"Matchers"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[matchers]")," ist die Definition f\xfcr Policy-Matcher. Die Matcher sind Ausdr\xfccke, die definieren, wie die Policy-Regeln gegen die Anfrage ausgewertet werden."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n")),(0,r.kt)("p",null,"Der oben genannte Matcher ist der einfachste und bedeutet, dass das Subjekt, das Objekt und die Aktion in einer Anfrage mit denen in einer Policy-Regel \xfcbereinstimmen sollten."),(0,r.kt)("p",null,"In Matchern k\xf6nnen arithmetische Operatoren wie ",(0,r.kt)("inlineCode",{parentName:"p"},"+, -, *, /")," und logische Operatoren wie ",(0,r.kt)("inlineCode",{parentName:"p"},"&&, ||, !")," verwendet werden."),(0,r.kt)("h3",{id:"reihenfolge-der-ausdr\xfccke-in-matchern"},"Reihenfolge der Ausdr\xfccke in Matchern"),(0,r.kt)("p",null,"Die Reihenfolge der Ausdr\xfccke kann die Leistung erheblich beeinflussen. Schauen Sie sich das folgende Beispiel f\xfcr weitere Details an:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'const rbac_models = `\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n`\n\nfunc TestManyRoles(t *testing.T) {\n\n    m, _ := model.NewModelFromString(rbac_models)\n    e, _ := NewEnforcer(m, false)\n\n    roles := []string{"admin", "manager", "developer", "tester"}\n\n    // 2500 projects\n    for nbPrj := 1; nbPrj < 2500; nbPrj++ {\n        // 4 objects and 1 role per object (so 4 roles)\n        for _, role := range roles {\n            roleDB := fmt.Sprintf("%s_project:%d", role, nbPrj)\n            objectDB := fmt.Sprintf("/projects/%d", nbPrj)\n            e.AddPolicy(roleDB, objectDB, "GET")\n        }\n        jasmineRole := fmt.Sprintf("%s_project:%d", roles[1], nbPrj)\n        e.AddGroupingPolicy("jasmine", jasmineRole)\n    }\n\n    e.AddGroupingPolicy("abu", "manager_project:1")\n    e.AddGroupingPolicy("abu", "manager_project:2499")\n\n    // With same number of policies\n    // User \'abu\' has only two roles\n    // User \'jasmine\' has many roles (1 role per policy, here 2500 roles)\n\n    request := func(subject, object, action string) {\n        t0 := time.Now()\n        resp, _ := e.Enforce(subject, object, action)\n        tElapse := time.Since(t0)\n        t.Logf("RESPONSE %-10s %s\\t %s : %5v IN: %+v", subject, object, action, resp, tElapse)\n        if tElapse > time.Millisecond*100 {\n            t.Errorf("More than 100 milliseconds for %s %s %s : %+v", subject, object, action, tElapse)\n        }\n    }\n\n    request("abu", "/projects/1", "GET")        // really fast because only 2 roles in all policies and at the beginning of the casbin_rule table\n    request("abu", "/projects/2499", "GET")     // fast because only 2 roles in all policies\n    request("jasmine", "/projects/1", "GET")    // really fast at the beginning of the casbin_rule table\n\n    request("jasmine", "/projects/2499", "GET") // slow and fails the only 1st time   <<<< pb here\n    request("jasmine", "/projects/2499", "GET") // fast maybe due to internal cache mechanism\n\n    // same issue with non-existing roles\n    // request("jasmine", "/projects/999999", "GET") // slow fails the only 1st time   <<<< pb here\n    // request("jasmine", "/projects/999999", "GET") // fast maybe due to internal cache mechanism\n}\n')),(0,r.kt)("p",null,"Die Durchsetzungszeit kann sehr lang sein, bis zu 6 Sekunden."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go test -run ^TestManyRoles$ github.com/casbin/casbin/v2 -v\n\n=== RUN   TestManyRoles\n    rbac_api_test.go:598: RESPONSE abu        /projects/1        GET :  true IN: 438.379\xb5s\n    rbac_api_test.go:598: RESPONSE abu        /projects/2499     GET :  true IN: 39.005173ms\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/1        GET :  true IN: 1.774319ms\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/2499     GET :  true IN: 6.164071648s\n    rbac_api_test.go:600: More than 100 milliseconds for jasmine /projects/2499 GET : 6.164071648s\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/2499     GET :  true IN: 12.164122ms\n--- FAIL: TestManyRoles (6.24s)\nFAIL\nFAIL    github.com/casbin/casbin/v2     6.244s\nFAIL\n")),(0,r.kt)("p",null,"Wenn wir jedoch die Reihenfolge der Ausdr\xfccke in Matchern anpassen und zeitaufw\xe4ndigere Ausdr\xfccke wie Funktionen nach hinten stellen, wird die Ausf\xfchrungszeit sehr kurz sein."),(0,r.kt)("p",null,"\xc4ndern der Reihenfolge der Ausdr\xfccke in Matchern im obigen Beispiel zu:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[matchers]\nm = r.obj == p.obj && g(r.sub, p.sub) && r.act == p.act\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go test -run ^TestManyRoles$ github.com/casbin/casbin/v2 -v\n=== RUN   TestManyRoles\n    rbac_api_test.go:599: RESPONSE abu        /projects/1        GET :  true IN: 786.635\xb5s\n    rbac_api_test.go:599: RESPONSE abu        /projects/2499     GET :  true IN: 4.933064ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/1        GET :  true IN: 2.908534ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/2499     GET :  true IN: 7.292963ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/2499     GET :  true IN: 6.168307ms\n--- PASS: TestManyRoles (0.05s)\nPASS\nok      github.com/casbin/casbin/v2     0.053s\n")),(0,r.kt)("h2",{id:"mehrere-abschnittstypen"},"Mehrere Abschnittstypen"),(0,r.kt)("p",null,"Wenn Sie mehrere Policy-Definitionen oder mehrere Matcher ben\xf6tigen, k\xf6nnen Sie ",(0,r.kt)("inlineCode",{parentName:"p"},"p2")," oder ",(0,r.kt)("inlineCode",{parentName:"p"},"m2")," als Beispiele verwenden. Tats\xe4chlich k\xf6nnen alle vier oben genannten Abschnitte mehrere Typen verwenden, und die Syntax ist ",(0,r.kt)("inlineCode",{parentName:"p"},"r")," gefolgt von einer Zahl, wie ",(0,r.kt)("inlineCode",{parentName:"p"},"r2")," oder ",(0,r.kt)("inlineCode",{parentName:"p"},"e2"),". Standardm\xe4\xdfig sollten diese vier Abschnitte eins zu eins entsprechen. Zum Beispiel wird Ihr Abschnitt ",(0,r.kt)("inlineCode",{parentName:"p"},"r2")," nur den Matcher ",(0,r.kt)("inlineCode",{parentName:"p"},"m2")," verwenden, um ",(0,r.kt)("inlineCode",{parentName:"p"},"p2"),"-Richtlinien abzugleichen."),(0,r.kt)("p",null,"Sie k\xf6nnen einen ",(0,r.kt)("inlineCode",{parentName:"p"},"EnforceContext")," als ersten Parameter der ",(0,r.kt)("inlineCode",{parentName:"p"},"enforce"),"-Methode \xfcbergeben, um die Typen anzugeben. Der ",(0,r.kt)("inlineCode",{parentName:"p"},"EnforceContext")," ist wie folgt definiert:"),(0,r.kt)(c,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'EnforceContext{"r2","p2","e2","m2"}\ntype EnforceContext struct {\n    RType string\n    PType string\n    EType string\n    MType string\n}\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const enforceContext = new EnforceContext('r2', 'p2', 'e2', 'm2');\nclass EnforceContext {\n  constructor(rType, pType, eType, mType) {\n    this.pType = pType;\n    this.eType = eType;\n    this.mType = mType;\n    this.rType = rType;\n  }\n}\n"))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'EnforceContext enforceContext = new EnforceContext("2");\npublic class EnforceContext {\n    private String pType;\n    private String eType;\n    private String mType;\n    private String rType;\n    public EnforceContext(String suffix) {\n      this.pType = "p" + suffix;\n      this.eType = "e" + suffix;\n      this.mType = "m" + suffix;\n      this.rType = "r" + suffix;\n    }\n}\n')))),(0,r.kt)("p",null,"Hier ist ein Beispiel f\xfcr die Verwendung. Bitte beziehen Sie sich auf das ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/master/examples/multiple_policy_definitions_model.conf"},"Modell")," und die ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/master/examples/multiple_policy_definitions_policy.csv"},"Richtlinie"),". Die Anfrage ist wie folgt:"),(0,r.kt)(c,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nenforceContext := NewEnforceContext("2")\n// You can also specify a certain type individually\nenforceContext.EType = "e"\n// Don\'t pass in EnforceContext; the default is r, p, e, m\ne.Enforce("alice", "data2", "read")        // true\n// Pass in EnforceContext\ne.Enforce(enforceContext, struct{ Age int }{Age: 70}, "/data1", "read")        //false\ne.Enforce(enforceContext, struct{ Age int }{Age: 30}, "/data1", "read")        //true\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nconst enforceContext = new NewEnforceContext(\'2\');\n\n// You can also specify a certain type individually\nenforceContext.eType = "e"\n\n// Don\'t pass in EnforceContext; the default is r, p, e, m\ne.Enforce("alice", "data2", "read")        // true\n\n// Pass in EnforceContext\ne.Enforce(enforceContext, {Age: 70}, "/data1", "read")        //false\ne.Enforce(enforceContext, {Age: 30}, "/data1", "read")        //true\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nEnforceContext enforceContext = new EnforceContext("2");\n// You can also specify a certain type individually\nenforceContext.seteType("e");\n// Don\'t pass in EnforceContext; the default is r, p, e, m\ne.enforce("alice", "data2", "read");  // true\n// Pass in EnforceContext\n// TestEvalRule is located in https://github.com/casbin/jcasbin/blob/master/src/test/java/org/casbin/jcasbin/main/AbacAPIUnitTest.java#L56\ne.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule("alice", 70), "/data1", "read"); // false\ne.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule("alice", 30), "/data1", "read"); // true\n')))),(0,r.kt)("h2",{id:"spezielle-grammatik"},"Spezielle Grammatik"),(0,r.kt)("p",null,'Sie k\xf6nnten auch den Operator "in" verwenden, der der einzige Operator mit einem Textnamen ist. Dieser Operator \xfcberpr\xfcft das Array auf der rechten Seite, um zu sehen, ob es einen Wert enth\xe4lt, der dem Wert auf der linken Seite entspricht. Die Gleichheit wird durch Verwendung des == Operators bestimmt, und diese Bibliothek \xfcberpr\xfcft nicht die Typen zwischen den Werten. Solange zwei Werte in interface{} umgewandelt werden k\xf6nnen und immer noch auf Gleichheit mit == \xfcberpr\xfcft werden k\xf6nnen, werden sie wie erwartet funktionieren. Beachten Sie, dass Sie einen Parameter f\xfcr das Array verwenden k\xf6nnen, aber es muss ein []interface{} sein.'),(0,r.kt)("p",null,"Siehe auch ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/rbac_model_matcher_using_in_op.conf"},"rbac","_","model","_","matcher","_","using","_","in","_","op"),", ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/keyget2_model.conf"},"keyget2","_","model")," und ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/keyget_model.conf"},"keyget","_","model"),"."),(0,r.kt)("p",null,"Beispiel:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj\n...\n[matchers]\nm = r.sub.Name in (r.obj.Admins)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.Enforce(Sub{Name: "alice"}, Obj{Name: "a book", Admins: []interface{}{"alice", "bob"}})\n')),(0,r.kt)("h2",{id:"ausdrucksbewerter"},"Ausdrucksbewerter"),(0,r.kt)("p",null,"Die Matcher-Bewertung in Casbin wird durch Ausdrucksbewerter in jeder Sprache implementiert. Casbin integriert ihre Kr\xe4fte, um die einheitliche PERM-Sprache bereitzustellen. Zus\xe4tzlich zur hier bereitgestellten Modellsyntax k\xf6nnen diese Ausdrucksauswerter zus\xe4tzliche Funktionen bieten, die m\xf6glicherweise nicht von einer anderen Sprache oder Implementierung unterst\xfctzt werden. Bitte seien Sie vorsichtig bei der Verwendung dieser Funktion."),(0,r.kt)("p",null,"Die von jeder Casbin-Implementierung verwendeten Ausdrucksauswerter sind wie folgt:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Implementierung"),(0,r.kt)("th",{parentName:"tr",align:null},"Sprache"),(0,r.kt)("th",{parentName:"tr",align:null},"Ausdrucksauswerter"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Casbin"),(0,r.kt)("td",{parentName:"tr",align:null},"Golang"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/casbin/govaluate"},"https://github.com/casbin/govaluate"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"jCasbin"),(0,r.kt)("td",{parentName:"tr",align:null},"Java"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/killme2008/aviator"},"https://github.com/killme2008/aviator"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Node-Casbin"),(0,r.kt)("td",{parentName:"tr",align:null},"Node.js"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/donmccurdy/expression-eval"},"https://github.com/donmccurdy/expression-eval"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PHP-Casbin"),(0,r.kt)("td",{parentName:"tr",align:null},"PHP"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/symfony/expression-language"},"https://github.com/symfony/expression-language"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PyCasbin"),(0,r.kt)("td",{parentName:"tr",align:null},"Python"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/danthedeckie/simpleeval"},"https://github.com/danthedeckie/simpleeval"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Casbin.NET"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/davideicardi/DynamicExpresso"},"https://github.com/davideicardi/DynamicExpresso"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Casbin4D"),(0,r.kt)("td",{parentName:"tr",align:null},"Delphi"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/casbin4d/Casbin4D/tree/master/SourceCode/Common/Third%20Party/TExpressionParser"},"https://github.com/casbin4d/Casbin4D/tree/master/SourceCode/Common/Third%20Party/TExpressionParser"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"casbin-rs"),(0,r.kt)("td",{parentName:"tr",align:null},"Rost"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/jonathandturner/rhai"},"https://github.com/jonathandturner/rhai"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"casbin-cpp"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/ArashPartow/exprtk"},"https://github.com/ArashPartow/exprtk"))))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Wenn Sie auf ein Leistungsproblem mit Casbin sto\xdfen, wird dies wahrscheinlich durch die geringe Effizienz des Ausdrucksauswerters verursacht. Sie k\xf6nnen das Problem an Casbin oder den Ausdrucksauswerter direkt zur Beratung zur Beschleunigung der Leistung richten. F\xfcr weitere Details verweisen Sie bitte auf den Abschnitt ",(0,r.kt)("a",{parentName:"p",href:"/docs/benchmark"},"Benchmarks"),".")))}b.isMDXComponent=!0}}]);