"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[6070],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),d=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=d(e.components);return i.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=r,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||a;return t?i.createElement(f,o(o({ref:n},s),{},{components:t})):i.createElement(f,o({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<a;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7922:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=t(7462),r=(t(7294),t(3905));const a={id:"policy-subset-loading",title:"Policy Subset Loading",description:"Gefilterte Richtlinien werden geladen",keywords:["filtered policies","policy subset","performance optimization"],authors:["hsluoyz"]},o=void 0,l={unversionedId:"policy-subset-loading",id:"policy-subset-loading",title:"Policy Subset Loading",description:"Gefilterte Richtlinien werden geladen",source:"@site/i18n/de/docusaurus-plugin-content-docs/current/PolicySubsetLoading.mdx",sourceDirName:".",slug:"/policy-subset-loading",permalink:"/de/docs/policy-subset-loading",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/PolicySubsetLoading.mdx",tags:[],version:"current",frontMatter:{id:"policy-subset-loading",title:"Policy Subset Loading",description:"Gefilterte Richtlinien werden geladen",keywords:["filtered policies","policy subset","performance optimization"],authors:["hsluoyz"]},sidebar:"docs",previous:{title:"Policy Storage",permalink:"/de/docs/policy-storage"},next:{title:"Scenarios",permalink:"/de/docs/category/scenarios"}},c={},d=[],s={toc:d};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Einige Adapter unterst\xfctzen die Verwaltung von gefilterten Richtlinien. Das bedeutet, dass die von Casbin geladene Richtlinie eine Teilmenge der in der Datenbank gespeicherten Richtlinie basierend auf einem gegebenen Filter ist. Dies erm\xf6glicht eine effiziente Durchsetzung von Richtlinien in gro\xdfen, mehrmandantenf\xe4higen Umgebungen, in denen das Parsen der gesamten Richtlinie zu einem Leistungsengpass wird."),(0,r.kt)("p",null,"Um gefilterte Richtlinien mit einem unterst\xfctzten Adapter zu verwenden, rufen Sie einfach die Methode ",(0,r.kt)("inlineCode",{parentName:"p"},"LoadFilteredPolicy")," auf. Das g\xfcltige Format f\xfcr den Filterparameter h\xe4ngt vom verwendeten Adapter ab. Um versehentlichen Datenverlust zu verhindern, wird die Methode ",(0,r.kt)("inlineCode",{parentName:"p"},"SavePolicy")," deaktiviert, wenn eine gefilterte Richtlinie geladen ist."),(0,r.kt)("p",null,'Zum Beispiel verwendet der folgende Codeausschnitt den eingebauten gefilterten Dateiadapter und das RBAC-Modell mit Dom\xe4nen. In diesem Fall beschr\xe4nkt der Filter die Richtlinie auf eine einzelne Dom\xe4ne. Alle Richtlinienzeilen f\xfcr Dom\xe4nen, die nicht "domain1" sind, werden aus der geladenen Richtlinie ausgelassen:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/casbin/casbin/v2"\n    fileadapter "github.com/casbin/casbin/v2/persist/file-adapter"\n)\n\nenforcer, _ := casbin.NewEnforcer()\n\nadapter := fileadapter.NewFilteredAdapter("examples/rbac_with_domains_policy.csv")\nenforcer.InitWithAdapter("examples/rbac_with_domains_model.conf", adapter)\n\nfilter := &fileadapter.Filter{\n    P: []string{"", "domain1"},\n    G: []string{"", "", "domain1"},\n}\nenforcer.LoadFilteredPolicy(filter)\n\n// The loaded policy now only contains the entries pertaining to "domain1".\n')),(0,r.kt)("p",null,"Es gibt eine weitere Methode, die die Teilmenge-Ladefunktion unterst\xfctzt: ",(0,r.kt)("inlineCode",{parentName:"p"},"LoadIncrementalFilteredPolicy"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"LoadIncrementalFilteredPolicy")," \xe4hnelt ",(0,r.kt)("inlineCode",{parentName:"p"},"LoadFilteredPolicy"),", l\xf6scht jedoch nicht die zuvor geladene Richtlinie. Es f\xfcgt nur die gefilterte Richtlinie zur bestehenden Richtlinie hinzu."))}p.isMDXComponent=!0}}]);