"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[2915],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),u=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return i.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=u(t),f=r,g=p["".concat(l,".").concat(f)]||p[f]||c[f]||a;return t?i.createElement(g,s(s({ref:n},d),{},{components:t})):i.createElement(g,s({ref:n},d))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=p;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var u=2;u<a;u++)s[u]=t[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1259:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var i=t(7462),r=(t(7294),t(3905));const a={id:"how-it-works",title:"How It Works",description:"Wie Casbin funktioniert",keywords:["PERM","request","policy","matcher","effect"],authors:["nodece"]},s=void 0,o={unversionedId:"how-it-works",id:"how-it-works",title:"How It Works",description:"Wie Casbin funktioniert",source:"@site/i18n/de/docusaurus-plugin-content-docs/current/HowItWorks.mdx",sourceDirName:".",slug:"/how-it-works",permalink:"/de/docs/how-it-works",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/HowItWorks.mdx",tags:[],version:"current",frontMatter:{id:"how-it-works",title:"How It Works",description:"Wie Casbin funktioniert",keywords:["PERM","request","policy","matcher","effect"],authors:["nodece"]},sidebar:"docs",previous:{title:"Get Started",permalink:"/de/docs/get-started"},next:{title:"Tutorials",permalink:"/de/docs/tutorials"}},l={},u=[{value:"Request",id:"request",level:3},{value:"Policy",id:"policy",level:3},{value:"Matcher",id:"matcher",level:3},{value:"Effect",id:"effect",level:3}],d={toc:u};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In Casbin wird ein Zugriffskontrollmodell in eine CONF-Datei abstrahiert, basierend auf dem ",(0,r.kt)("strong",{parentName:"p"},"PERM-Metamodell (Policy, Effect, Request, Matchers)"),". Das Wechseln oder Aktualisieren des Autorisierungsmechanismus f\xfcr ein Projekt ist so einfach wie das \xc4ndern einer Konfiguration. Sie k\xf6nnen Ihr eigenes Zugriffskontrollmodell anpassen, indem Sie die verf\xfcgbaren Modelle kombinieren. Zum Beispiel k\xf6nnen Sie RBAC-Rollen und ABAC-Attribute in einem Modell kombinieren und einen Satz von Richtlinienregeln teilen."),(0,r.kt)("p",null,"Das PERM-Modell besteht aus vier Grundlagen: Policy, Effect, Request und Matchers. Diese Grundlagen beschreiben die Beziehung zwischen Ressourcen und Benutzern."),(0,r.kt)("h3",{id:"request"},"Request"),(0,r.kt)("p",null,"Definiert die Anforderungsparameter. Eine grundlegende Anforderung ist ein Tupel-Objekt, das mindestens ein Subjekt (zugreifende Entit\xe4t), ein Objekt (zugreifende Ressource) und eine Aktion (Zugriffsmethode) erfordert."),(0,r.kt)("p",null,"Zum Beispiel k\xf6nnte eine Anforderungsdefinition so aussehen: ",(0,r.kt)("inlineCode",{parentName:"p"},"r={sub,obj,act}")),(0,r.kt)("p",null,"Diese Definition gibt die erforderlichen Parameternamen und die Reihenfolge f\xfcr die Zugriffskontroll-Matching-Funktion an."),(0,r.kt)("h3",{id:"policy"},"Policy"),(0,r.kt)("p",null,"Definiert das Modell f\xfcr die Zugriffsstrategie. Es gibt den Namen und die Reihenfolge der Felder im Policy-Regeldokument an."),(0,r.kt)("p",null,"Zum Beispiel: ",(0,r.kt)("inlineCode",{parentName:"p"},"p={sub, obj, act}")," oder ",(0,r.kt)("inlineCode",{parentName:"p"},"p={sub, obj, act, eft}")),(0,r.kt)("p",null,"Hinweis: Wenn eft (Policy-Ergebnis) nicht definiert ist, wird das Ergebnisfeld in der Policy-Datei nicht gelesen und das \xfcbereinstimmende Policy-Ergebnis wird standardm\xe4\xdfig zugelassen."),(0,r.kt)("h3",{id:"matcher"},"Matcher"),(0,r.kt)("p",null,"Definiert die \xdcbereinstimmungsregeln f\xfcr Request und Policy."),(0,r.kt)("p",null,"Zum Beispiel: ",(0,r.kt)("inlineCode",{parentName:"p"},"m = r.sub == p.sub && r.act == p.act && r.obj == p.obj")," Diese einfache und g\xe4ngige \xdcbereinstimmungsregel bedeutet, dass wenn die angeforderten Parameter (Entit\xe4ten, Ressourcen und Methoden) gleich denen in der Policy sind, dann wird das Policy-Ergebnis (",(0,r.kt)("inlineCode",{parentName:"p"},"p.eft"),") zur\xfcckgegeben. Das Ergebnis der Strategie wird in ",(0,r.kt)("inlineCode",{parentName:"p"},"p.eft")," gespeichert."),(0,r.kt)("h3",{id:"effect"},"Effect"),(0,r.kt)("p",null,"F\xfchrt eine logische Kombinationsbeurteilung der \xdcbereinstimmungsergebnisse von Matchers durch."),(0,r.kt)("p",null,"Zum Beispiel: ",(0,r.kt)("inlineCode",{parentName:"p"},"e = some(where(p.eft == allow))")),(0,r.kt)("p",null,"Diese Aussage bedeutet, dass wenn das \xdcbereinstimmungsergebnis ",(0,r.kt)("inlineCode",{parentName:"p"},"p.eft")," das Ergebnis von (einigen) erlauben hat, dann ist das endg\xfcltige Ergebnis wahr."),(0,r.kt)("p",null,"Schauen wir uns ein weiteres Beispiel an:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"e = some(where (p.eft == allow)) && !some(where (p.eft == deny))")),(0,r.kt)("p",null,"Die logische Bedeutung dieser Beispielkombination ist: Wenn es eine Strategie gibt, die das Ergebnis von erlauben \xfcbereinstimmt und keine Strategie, die das Ergebnis von verweigern \xfcbereinstimmt, ist das Ergebnis wahr. Mit anderen Worten, es ist wahr, wenn die \xfcbereinstimmenden Strategien alle erlauben. Wenn es irgendein Verweigern gibt, sind beide falsch (einfacher gesagt, wenn Erlauben und Verweigern gleichzeitig existieren, hat Verweigern Vorrang)."),(0,r.kt)("p",null,"Das grundlegendste und einfachste Modell in Casbin ist ACL. Das Modell CONF f\xfcr ACL ist wie folgt:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"# Request definition\n[request_definition]\nr = sub, obj, act\n\n# Policy definition\n[policy_definition]\np = sub, obj, act\n\n# Policy effect\n[policy_effect]\ne = some(where (p.eft == allow))\n\n# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n\n")),(0,r.kt)("p",null,"Ein Beispiel f\xfcr eine Richtlinie f\xfcr das ACL-Modell ist:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, data1, read\np, bob, data2, write\n")),(0,r.kt)("p",null,"Das bedeutet:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"alice kann data1 lesen"),(0,r.kt)("li",{parentName:"ul"},"bob kann data2 schreiben")),(0,r.kt)("p",null,"Wir unterst\xfctzen auch den Mehrzeilenmodus, indem wir am Ende ein '' anh\xe4ngen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj \\\n  && r.act == p.act\n")),(0,r.kt)("p",null,"Dar\xfcber hinaus, wenn Sie ABAC verwenden, k\xf6nnen Sie den 'in' Operator ausprobieren, wie im folgenden Beispiel f\xfcr die Casbin ",(0,r.kt)("strong",{parentName:"p"},"golang")," Edition gezeigt (jCasbin und Node-Casbin werden noch nicht unterst\xfctzt):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"# Matchers\n[matchers]\nm = r.obj == p.obj && r.act == p.act || r.obj in ('data2', 'data3')\n")),(0,r.kt)("p",null,"But you ",(0,r.kt)("strong",{parentName:"p"},"MUST")," make sure that the length of the array is ",(0,r.kt)("strong",{parentName:"p"},"MORE")," than ",(0,r.kt)("strong",{parentName:"p"},"1"),", otherwise it will cause a panic."),(0,r.kt)("p",null,"For more operators, you may take a look at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/govaluate"},"govaluate"),"."))}c.isMDXComponent=!0}}]);