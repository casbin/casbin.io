"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[9370],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5437:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={id:"syntax-for-models",title:"Syntaxe pour les mod\xe8les",description:"Syntax for Models",keywords:["syntax"],authors:["nodece"]},o=void 0,s={unversionedId:"syntax-for-models",id:"syntax-for-models",title:"Syntaxe pour les mod\xe8les",description:"Syntax for Models",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/SyntaxForModels.mdx",sourceDirName:".",slug:"/syntax-for-models",permalink:"/fr/docs/syntax-for-models",draft:!1,editUrl:"https://crowdin.com/project/casbin-website/fr",tags:[],version:"current",frontMatter:{id:"syntax-for-models",title:"Syntaxe pour les mod\xe8les",description:"Syntax for Models",keywords:["syntax"],authors:["nodece"]},sidebar:"docs",previous:{title:"Mod\xe8les pris en charge",permalink:"/fr/docs/supported-models"},next:{title:"Effet",permalink:"/fr/docs/effector"}},l={},p=[{value:"D\xe9finition de la requ\xeate",id:"d\xe9finition-de-la-requ\xeate",level:2},{value:"D\xe9finition de la politique",id:"d\xe9finition-de-la-politique",level:2},{value:"Effet de la politique",id:"effet-de-la-politique",level:2},{value:"Matchs",id:"matchs",level:2},{value:"Orders of expressions in matchers",id:"orders-of-expressions-in-matchers",level:3},{value:"Type de sections multiples",id:"type-de-sections-multiples",level:2},{value:"Special Grammer",id:"special-grammer",level:2},{value:"\xc9valuateur d&#39;expressions",id:"\xe9valuateur-dexpressions",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=u("Tabs"),d=u("TabItem"),m={toc:p};function f(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Un mod\xe8le CONF doit avoir au moins quatre sections : ",(0,r.kt)("inlineCode",{parentName:"p"},"[request_definition], [policy_definition], [policy_effect], [matchers]"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Si un mod\xe8le utilise RBAC, il devrait \xe9galement ajouter la section ",(0,r.kt)("inlineCode",{parentName:"p"},"[role_definition]"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Un mod\xe8le CONF peut contenir des commentaires. Les commentaires commencent par ",(0,r.kt)("inlineCode",{parentName:"p"},"#"),", et ",(0,r.kt)("inlineCode",{parentName:"p"},"#")," commentera le reste de la ligne."))),(0,r.kt)("h2",{id:"d\xe9finition-de-la-requ\xeate"},"D\xe9finition de la requ\xeate"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[request_definition]")," est la d\xe9finition de la demande d'acc\xe8s. Il d\xe9finit les arguments dans la fonction ",(0,r.kt)("inlineCode",{parentName:"p"},"e.Enforce(...)"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sub, obj, act")," repr\xe9sente le triple classique : acc\xe8s \xe0 l'entit\xe9 (Sujet), ressource acc\xe9d\xe9e (Objet) et la m\xe9thode d'acc\xe8s (Action). Cependant, vous pouvez personnaliser votre propre formulaire de requ\xeate, comme ",(0,r.kt)("inlineCode",{parentName:"p"},"sub, agir")," si vous n'avez pas besoin de sp\xe9cifier une ressource particuli\xe8re, ou ",(0,r.kt)("inlineCode",{parentName:"p"},"sub, sub2, obj, act")," si vous avez deux entit\xe9s d'acc\xe8s."),(0,r.kt)("h2",{id:"d\xe9finition-de-la-politique"},"D\xe9finition de la politique"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[policy_definition]")," est la d\xe9finition de la politique. Il d\xe9finit le sens de la politique. Par exemple, nous avons le mod\xe8le suivant :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_definition]\np = sub, obj, act\np2 = sub, act\n")),(0,r.kt)("p",null,"Et nous avons la politique suivante (si dans un fichier de politiques)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"p, alice, data1, read\np2, bob, write-all-objects\n")),(0,r.kt)("p",null,"Chaque ligne dans une politique est appel\xe9e r\xe8gle de police. Chaque r\xe8gle de politique commence par un ",(0,r.kt)("inlineCode",{parentName:"p"},"type de politique"),", par exemple ",(0,r.kt)("inlineCode",{parentName:"p"},"p"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"p2"),". Il est utilis\xe9 pour correspondre \xe0 la d\xe9finition de la politique s'il y a plusieurs d\xe9finitions. La politique ci-dessus montre le caract\xe8re contraignant suivant. La reliure peut \xeatre utilis\xe9e dans le matcher."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(alice, data1, read) -> (p.sub, p.obj, p.act)\n(bob, write-all-objects) -> (p2.sub, p2.act)\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Les \xe9l\xe9ments d'une r\xe8gle de politique sont toujours consid\xe9r\xe9s comme",(0,r.kt)("inlineCode",{parentName:"p"},"cha\xeene"),". Si vous avez des questions \xe0 ce sujet, veuillez consulter la discussion sur: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/issues/113"},"https://github.com/casbin/casbin/issues/113"))),(0,r.kt)("h2",{id:"effet-de-la-politique"},"Effet de la politique"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[policy_effect]")," est la d\xe9finition de l'effet de politique. Il d\xe9finit si la requ\xeate d'acc\xe8s doit \xeatre approuv\xe9e si plusieurs r\xe8gles de politique correspondent \xe0 la requ\xeate. Par exemple, une r\xe8gle autorise et l'autre refuse."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = some(where (p.eft == allow))\n")),(0,r.kt)("p",null,"L'effet de la politique ci-dessus signifie s'il y a une r\xe8gle de politique correspondante de ",(0,r.kt)("inlineCode",{parentName:"p"},"autoriser"),", l'effet final est ",(0,r.kt)("inlineCode",{parentName:"p"},"autoriser")," (aka allow-override). ",(0,r.kt)("inlineCode",{parentName:"p"},"p.eft")," est l'effet d'une politique, il peut \xeatre ",(0,r.kt)("inlineCode",{parentName:"p"},"autoriser")," ou ",(0,r.kt)("inlineCode",{parentName:"p"},"refuser"),". C'est optionnel et la valeur par d\xe9faut est ",(0,r.kt)("inlineCode",{parentName:"p"},"autoriser"),". Donc, comme nous ne l'avons pas sp\xe9cifi\xe9 ci-dessus, il utilise la valeur par d\xe9faut."),(0,r.kt)("p",null,"Un autre exemple d'effet de politique est :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = !some(where (p.eft == deny))\n")),(0,r.kt)("p",null,"Cela signifie que s'il n'y a pas de r\xe8gles de politique correspondantes de",(0,r.kt)("inlineCode",{parentName:"p"},"refus"),", l'effet final est ",(0,r.kt)("inlineCode",{parentName:"p"},"autoriser")," (aka refus de remplacement). ",(0,r.kt)("inlineCode",{parentName:"p"},"certains")," signifient : s'il existe une r\xe8gle de politique correspondante. ",(0,r.kt)("inlineCode",{parentName:"p"},"n'importe quel")," signifie : toutes les r\xe8gles de politique correspondantes (non utilis\xe9es ici). L'effet de la politique peut m\xeame \xeatre li\xe9 aux expressions logiques:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = some(where (p.eft == allow)) && !some(where (p.eft == deny))\n")),(0,r.kt)("p",null,"Cela signifie qu'au moins une r\xe8gle de politique correspondante de",(0,r.kt)("inlineCode",{parentName:"p"},"autorise"),", et qu'il n'y a pas de r\xe8gle de politique correspondante de",(0,r.kt)("inlineCode",{parentName:"p"},"refus"),". Donc, de cette fa\xe7on, les autorisations d\u2019autorisation et de refus sont soutenues et les d\xe9rogations de refus."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Bien que nous ayons con\xe7u la syntaxe de l'effet de politique comme ci-dessus, les impl\xe9mentations actuelles n'utilisent que des effets de politique cod\xe9e en dur. Comme nous avons trouv\xe9 qu'il n'y avait pas grand besoin de ce genre de flexibilit\xe9. Donc, pour l'instant, vous devez utiliser l'un des effets de la politique int\xe9gr\xe9e au lieu de personnaliser le v\xf4tre.")),(0,r.kt)("p",null,"Les effets de politique int\xe9gr\xe9e pris en charge sont :"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Effet de la politique"),(0,r.kt)("th",{parentName:"tr",align:null},"Sens"),(0,r.kt)("th",{parentName:"tr",align:null},"Exemple"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"some(where (p.eft == allow))"),(0,r.kt)("td",{parentName:"tr",align:null},"autoriser-substituer"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"ACL, RBAC, etc."))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"!some(where (p.eft == deny))"),(0,r.kt)("td",{parentName:"tr",align:null},"refus de surcharger"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Refuser la substitution"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"some(where (p.eft == allow)) && !some(where (p.eft == deny))"),(0,r.kt)("td",{parentName:"tr",align:null},"autoriser/refuser"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Allumer et refuser"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"priority(p.eft) ","|","|"," deny"),(0,r.kt)("td",{parentName:"tr",align:null},"priorit\xe9"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Priorit\xe9"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"subjectPriority(p.eft)"),(0,r.kt)("td",{parentName:"tr",align:null},"base de priorit\xe9 sur le r\xf4le"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Sujet-Priorit\xe9"))))),(0,r.kt)("h2",{id:"matchs"},"Matchs"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[matchers]")," est la d\xe9finition pour les correspondants de politique. Les correspondants sont des expressions. Il d\xe9finit comment les r\xe8gles de politique sont \xe9valu\xe9es en fonction de la demande."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n")),(0,r.kt)("p",null,"Le r\xe9sultat ci-dessus est le plus simple, cela signifie que le sujet, l'objet et l'action dans une requ\xeate doivent correspondre \xe0 ceux d'une r\xe8gle de police."),(0,r.kt)("p",null,"Vous pouvez utiliser l'arithm\xe9tique comme ",(0,r.kt)("inlineCode",{parentName:"p"},"+, -, *, /")," et les op\xe9rateurs logiques comme ",(0,r.kt)("inlineCode",{parentName:"p"},"&&, ||, !")," dans les matchers."),(0,r.kt)("h3",{id:"orders-of-expressions-in-matchers"},"Orders of expressions in matchers"),(0,r.kt)("p",null,"The order of expressions can greatly affect performance. Look at the following example for details:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'const rbac_models = `\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n`\n\nfunc TestManyRoles(t *testing.T) {\n\n    m, _ := model.NewModelFromString(rbac_models)\n    e, _ := NewEnforcer(m, false)\n\n    roles := []string{"admin", "manager", "developer", "tester"}\n\n    // 2500 projects\n    for nbPrj := 1; nbPrj < 2500; nbPrj++ {\n        // 4 objects and 1 role per object (so 4 roles)\n        for _, role := range roles {\n            roleDB := fmt.Sprintf("%s_project:%d", role, nbPrj)\n            objectDB := fmt.Sprintf("/projects/%d", nbPrj)\n            e.AddPolicy(roleDB, objectDB, "GET")\n        }\n        jasmineRole := fmt.Sprintf("%s_project:%d", roles[1], nbPrj)\n        e.AddGroupingPolicy("jasmine", jasmineRole)\n    }\n\n    e.AddGroupingPolicy("abu", "manager_project:1")\n    e.AddGroupingPolicy("abu", "manager_project:2499")\n\n    // With same number of policies\n    //  User \'abu\' has only two roles\n    //  User \'jasmine\' has many roles (1 role per policy, here 2500 roles)\n\n    request := func(subject, object, action string) {\n        t0 := time.Now()\n        resp, _ := e.Enforce(subject, object, action)\n        tElapse := time.Since(t0)\n        t.Logf("RESPONSE %-10s %s\\t %s : %5v IN: %+v", subject, object, action, resp, tElapse)\n        if tElapse > time.Millisecond*100 {\n            t.Errorf("More than 100 milliseconds for %s %s %s : %+v", subject, object, action, tElapse)\n        }\n    }\n\n    request("abu", "/projects/1", "GET")        // really fast because only 2 roles in all policies and at the beginning of the casbin_rule table\n    request("abu", "/projects/2499", "GET")     // fast because only 2 roles in all policies\n    request("jasmine", "/projects/1", "GET")    // really fast at the beginning of the casbin_rule table\n\n    request("jasmine", "/projects/2499", "GET") // slow and fail the only 1st time   <<<< pb here\n    request("jasmine", "/projects/2499", "GET") // fast maybe due to internal cache mechanism\n\n    // same issue with non-existing roles\n    // request("jasmine", "/projects/999999", "GET") // slow fail the only 1st time   <<<< pb here\n    // request("jasmine", "/projects/999999", "GET") // fast maybe due to internal cache mechanism\n}\n')),(0,r.kt)("p",null,"The enforce time may be very very long, up to 6 seconds"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"go test -run ^TestManyRoles$ github.com/casbin/casbin/v2 -v\n\n=== RUN   TestManyRoles\n    rbac_api_test.go:598: RESPONSE abu        /projects/1        GET :  true IN: 438.379\xb5s\n    rbac_api_test.go:598: RESPONSE abu        /projects/2499     GET :  true IN: 39.005173ms\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/1        GET :  true IN: 1.774319ms\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/2499     GET :  true IN: 6.164071648s\n    rbac_api_test.go:600: More than 100 milliseconds for jasmine /projects/2499 GET : 6.164071648s\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/2499     GET :  true IN: 12.164122ms\n--- FAIL: TestManyRoles (6.24s)\nFAIL\nFAIL    github.com/casbin/casbin/v2     6.244s\nFAIL\n")),(0,r.kt)("p",null,"However, if we can adjust the order of the expressions in matchers, and put more time-consuming expressions like functions behind, the execution time will be very short. Changing the order of expressions in matchers in the above example to"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[matchers]\nm = r.obj == p.obj && g(r.sub, p.sub) && r.act == p.act\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"go test -run ^TestManyRoles$ github.com/casbin/casbin/v2 -v\n=== RUN   TestManyRoles\n    rbac_api_test.go:599: RESPONSE abu        /projects/1        GET :  true IN: 786.635\xb5s\n    rbac_api_test.go:599: RESPONSE abu        /projects/2499     GET :  true IN: 4.933064ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/1        GET :  true IN: 2.908534ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/2499     GET :  true IN: 7.292963ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/2499     GET :  true IN: 6.168307ms\n--- PASS: TestManyRoles (0.05s)\nPASS\nok      github.com/casbin/casbin/v2     0.053s\n")),(0,r.kt)("h2",{id:"type-de-sections-multiples"},"Type de sections multiples"),(0,r.kt)("p",null,"Si vous avez besoin de plusieurs d\xe9finitions de politique ou de plusieurs correspondants, vous pouvez utiliser comme ",(0,r.kt)("inlineCode",{parentName:"p"},"p2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"m2"),". En fait, toutes les quatre sections ci-dessus peuvent utiliser plusieurs types et la syntaxe est ",(0,r.kt)("inlineCode",{parentName:"p"},"r"),"+ num\xe9ro, comme ",(0,r.kt)("inlineCode",{parentName:"p"},"r2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"e2"),". Par d\xe9faut, ces quatre sections doivent correspondre \xe0 une seule. Comme votre ",(0,r.kt)("inlineCode",{parentName:"p"},"r2")," n'utilisera que le matcher ",(0,r.kt)("inlineCode",{parentName:"p"},"m2")," pour correspondre aux politiques ",(0,r.kt)("inlineCode",{parentName:"p"},"p2"),"."),(0,r.kt)("p",null,"Vous pouvez passer dans ",(0,r.kt)("inlineCode",{parentName:"p"},"EnforceContext")," en tant que premier param\xe8tre de la m\xe9thode ",(0,r.kt)("inlineCode",{parentName:"p"},"enforce")," pour sp\xe9cifier les types, le ",(0,r.kt)("inlineCode",{parentName:"p"},"EnforceContext")," est comme ceci"),(0,r.kt)(c,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(d,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'EnforceContext{"r2","p2","e2","m2"}\ntype EnforceContext struct {\n    RType string\n    PType string\n    EType string\n    MType string\n}\n'))),(0,r.kt)(d,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const enforceContext = new EnforceContext('r2', 'p2', 'e2', 'm2');\nclass EnforceContext {\n  constructor(rType, pType, eType, mType) {\n    this.pType = pType;\n    this.eType = eType;\n    this.mType = mType;\n    this.rType = rType;\n  }\n}\n"))),(0,r.kt)(d,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'EnforceContext enforceContext = new EnforceContext("2");\npublic class EnforceContext {\n    private String pType;\n    private String eType;\n    private String mType;\n    private String rType;\n    public EnforceContext(String suffix) {\n      this.pType = "p" + suffix;\n      this.eType = "e" + suffix;\n      this.mType = "m" + suffix;\n      this.rType = "r" + suffix;\n    }\n}\n')))),(0,r.kt)("p",null,"Exemple d'utilisation, voir ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/master/examples/multiple_policy_definitions_model.conf"},"mod\xe8le")," et ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/master/examples/multiple_policy_definitions_policy.csv"},"politique"),", la requ\xeate est la suivante"),(0,r.kt)(c,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(d,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Passez dans un suffixe en tant que param\xe8tre \xe0 NewEnforceContext,comme 2 ou 3 et il cr\xe9era r2,p2,etc..\nenforceContext := NewEnforceContext("2")\n// Vous pouvez \xe9galement sp\xe9cifier un certain type individuellement\nenforceContext. Type = "e"\n// Ne pas passer dans EnforceContext,le d\xe9faut est r,p,e,m\ne. nforce("alice", "data2", "read") // true\n// passe dans EnforceContext\ne. nforce(enforceContext, struct{ Age int }{Age: 70}, "/data1", "read") //false\ne. nforce(enforceContext, struct{ Age int }{Age: 30}, "/data1", "read") //true\n'))),(0,r.kt)(d,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'\n// Passez dans un suffixe en tant que param\xe8tre \xe0 NewEnforceContext,comme 2 ou 3 et il cr\xe9era r2,p2,etc..\nconst enforceContext = new NewEnforceContext(\'2\');\n\n// You can also specify a certain type individually\nenforceContext.eType = "e"\n\n// Don\'t pass in EnforceContext,the default is r,p,e,m\ne.Enforce("alice", "data2", "read")     // true\n\n// pass in EnforceContext\ne.Enforce(enforceContext, {Age: 70}, "/data1", "read")      //false\ne.Enforce(enforceContext, {Age: 30}, "/data1", "read")      //true\n'))),(0,r.kt)(d,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Passez dans un suffixe comme param\xe8tre \xe0 NewEnforceContext,comme 2 ou 3 et il cr\xe9era r2, p2, etc.\nEnforceContext enforceContext = new EnforceContext("2");\n// Vous pouvez \xe9galement sp\xe9cifier un certain type individuellement\nenforceContext. eteType("e");\n// Ne passe pas dans EnforceContext, la valeur par d\xe9faut est r, p, e, m\ne. nforce("alice", "data2", "read"); // true\n// Pass in EnforceContext\n// TestEvalRule est situ\xe9 sur https://github. om/casbin/jcasbin/blob/master/src/test/java/org/casbin/jcasbin/main/AbacAPIUnitTest.java#L56\ne.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule("alice", 70), "/data1", "read"); // false\ne.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule("alice", 30), "/data1", "read"); // true\n')))),(0,r.kt)("h2",{id:"special-grammer"},"Special Grammer"),(0,r.kt)("p",null,"Vous pouvez \xe9galement utiliser ",(0,r.kt)("inlineCode",{parentName:"p"},"dans"),", le seul op\xe9rateur avec un nom de texte. Cet op\xe9rateur v\xe9rifie le tableau \xe0 droite pour voir s'il contient une valeur \xe9gale \xe0 la valeur \xe0 gauche. L'\xe9galit\xe9 est d\xe9termin\xe9e par l'utilisation de l'op\xe9rateur == et cette biblioth\xe8que ne v\xe9rifie pas les types entre les valeurs. Toutes les deux valeurs, lorsqu'elles sont converties en interface{}, et peuvent toujours \xeatre v\xe9rifi\xe9es si l'\xe9galit\xe9 avec == agit comme pr\xe9vu. Notez que vous pouvez utiliser un param\xe8tre pour le tableau, mais ce doit \xeatre une ",(0,r.kt)("inlineCode",{parentName:"p"},"[]interface{}"),"."),(0,r.kt)("p",null,"Reportez-vous \xe9galement \xe0 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/rbac_model_matcher_using_in_op.conf"},"rbac_model_matcher_using_in_op"),", ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/keyget2_model.conf"},"keyget2_model")," et ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/keyget_model.conf"},"keyget_model")),(0,r.kt)("p",null,"Exemple:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj\n...\n[matchers]\nm = r.sub.Name in (r.obj.Admins)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.Enforce(Sub{Name: "alice"}, Obj{Name: "a book", Admins: []interface{}{"alice", "bob"}})\n')),(0,r.kt)("h2",{id:"\xe9valuateur-dexpressions"},"\xc9valuateur d'expressions"),(0,r.kt)("p",null,"L'\xe9valuation de la correspondance \xe0 Casbin est impl\xe9ment\xe9e par des \xe9valuateurs d'expressions dans chaque langue. Casbin int\xe8gre ses pouvoirs pour fournir le langage PERM unifi\xe9. En plus de toute la syntaxe de mod\xe8le fournie ici, ces \xe9valuateurs d'expressions peuvent fournir des fonctionnalit\xe9s suppl\xe9mentaires, qui peuvent ne pas \xeatre support\xe9es par un autre langage ou une impl\xe9mentation. Utilisez-la \xe0 vos propres risques."),(0,r.kt)("p",null,"L'expression utilis\xe9e par chaque impl\xe9mentation de Casbin est :"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Impl\xe9mentation"),(0,r.kt)("th",{parentName:"tr",align:null},"Langue"),(0,r.kt)("th",{parentName:"tr",align:null},"Expression evaluator"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Casbin"),(0,r.kt)("td",{parentName:"tr",align:null},"Golang"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Knetic/govaluate"},"https://github.com/Knetic/govaluate"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"jCasbin"),(0,r.kt)("td",{parentName:"tr",align:null},"Java"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/killme2008/aviator"},"https://github.com/killme2008/aviator"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Node-Casbin"),(0,r.kt)("td",{parentName:"tr",align:null},"Node.js"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/donmccurdy/expression-eval"},"https://github.com/donmccurdy/expression-eval"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PHP-Casbin"),(0,r.kt)("td",{parentName:"tr",align:null},"PHP"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/symfony/expression-language"},"https://github.com/symfony/expression-language"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PyCasbin"),(0,r.kt)("td",{parentName:"tr",align:null},"Python"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/danthedeckie/simpleeval"},"https://github.com/danthedeckie/simpleeval"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Casbin.NET"),(0,r.kt)("td",{parentName:"tr",align:null},"N\xb0 C"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/davideicardi/DynamicExpresso"},"https://github.com/davideicardi/DynamicExpresso"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Casbin4D"),(0,r.kt)("td",{parentName:"tr",align:null},"Delphi"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/casbin4d/Casbin4D/tree/master/SourceCode/Common/Troisi%C3%A8me%20Party/TExpressionParser"},"https://github.com/casbin4d/Casbin4D/tree/master/SourceCode/Common/Troisi\xe8me%20Party/TExpressionParser"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"casbin-rs"),(0,r.kt)("td",{parentName:"tr",align:null},"Rouille"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/jonathandturner/rhai"},"https://github.com/jonathandturner/rhai"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"casbin-cpp"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/ArashPartow/exprtk"},"https://github.com/ArashPartow/exprtk"))))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Si vous rencontrez un probl\xe8me de performance au sujet de Casbin, il est probablement d\xfb \xe0 la faible efficacit\xe9 de l'\xe9valuateur d'expression. Vous pouvez tous les deux envoyer un probl\xe8me \xe0 Casbin ou \xe0 l\u2019\xe9valuateur d\u2019expression directement pour obtenir des conseils pour acc\xe9l\xe9rer. Voir la section ",(0,r.kt)("a",{parentName:"p",href:"/docs/benchmark"},"Benchmarks")," pour plus de d\xe9tails.")))}f.isMDXComponent=!0}}]);