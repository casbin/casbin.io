"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[9541],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},674:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={id:"how-it-works",title:"How It Works",description:"How Casbin Works",keywords:["PERM","request","policy","matcher","effect"],authors:["nodece"]},i=void 0,l={unversionedId:"how-it-works",id:"how-it-works",title:"How It Works",description:"How Casbin Works",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/HowItWorks.mdx",sourceDirName:".",slug:"/how-it-works",permalink:"/fr/docs/how-it-works",draft:!1,editUrl:"https://crowdin.com/project/casbin-website/fr",tags:[],version:"current",frontMatter:{id:"how-it-works",title:"How It Works",description:"How Casbin Works",keywords:["PERM","request","policy","matcher","effect"],authors:["nodece"]},sidebar:"docs",previous:{title:"Commencer",permalink:"/fr/docs/get-started"},next:{title:"Tutoriels",permalink:"/fr/docs/tutorials"}},s={},p=[{value:"Demander",id:"demander",level:3},{value:"Politique de confidentialit\xe9",id:"politique-de-confidentialit\xe9",level:3},{value:"Correspondant",id:"correspondant",level:3},{value:"Effet",id:"effet",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"En Casbin, un mod\xe8le de contr\xf4le d'acc\xe8s est r\xe9sum\xe9 dans un fichier CONF bas\xe9 sur le ",(0,a.kt)("strong",{parentName:"p"},"m\xe9tamodel PERM (Politique, Effect, Demande, Matchers)"),". Switching or upgrading the authorization mechanism for a project is as simple as modifying a configuration. Vous pouvez personnaliser votre propre mod\xe8le de contr\xf4le d'acc\xe8s en combinant les mod\xe8les disponibles. Par exemple, vous pouvez combiner les r\xf4les RBAC et les attributs ABAC ensemble dans un mod\xe8le et partager un ensemble de r\xe8gles de politique."),(0,a.kt)("p",null,"The PERM model is composed of four foundations: Policy, Effect, Request, and Matchers. These foundations describe the relationship between resources and users."),(0,a.kt)("h3",{id:"demander"},"Demander"),(0,a.kt)("p",null,"Defines the request parameters. A basic request is a tuple object, requiring at least a subject (accessed entity), object (accessed resource), and action (access method)."),(0,a.kt)("p",null,"Par exemple, une d\xe9finition de requ\xeate peut ressembler \xe0 ceci : ",(0,a.kt)("inlineCode",{parentName:"p"},"r={sub,obj,act}")),(0,a.kt)("p",null,"This definition specifies the parameter names and ordering required by the access control matching function."),(0,a.kt)("h3",{id:"politique-de-confidentialit\xe9"},"Politique de confidentialit\xe9"),(0,a.kt)("p",null,"Defines the model for the access strategy. It specifies the name and order of the fields in the Policy rule document."),(0,a.kt)("p",null,"Par exemple : ",(0,a.kt)("inlineCode",{parentName:"p"},"p={sub, obj, act}")," ou ",(0,a.kt)("inlineCode",{parentName:"p"},"p={sub, obj, act, eft}")),(0,a.kt)("p",null,"Note: If eft (policy result) is not defined, the result field in the policy file will not be read, and the matching policy result will be allowed by default."),(0,a.kt)("h3",{id:"correspondant"},"Correspondant"),(0,a.kt)("p",null,"Defines the matching rules for Request and Policy."),(0,a.kt)("p",null,"For example: ",(0,a.kt)("inlineCode",{parentName:"p"},"m = r.sub == p.sub && r.act == p.act && r.obj == p.obj")," This simple and common matching rule means that if the requested parameters (entities, resources, and methods) are equal to those found in the policy, then the policy result (",(0,a.kt)("inlineCode",{parentName:"p"},"p.eft"),") is returned. Le r\xe9sultat de la strat\xe9gie sera sauvegard\xe9 dans ",(0,a.kt)("inlineCode",{parentName:"p"},"p.eft"),"."),(0,a.kt)("h3",{id:"effet"},"Effet"),(0,a.kt)("p",null,"Performs a logical combination judgment on the matching results of Matchers."),(0,a.kt)("p",null,"Par exemple : ",(0,a.kt)("inlineCode",{parentName:"p"},"e = quelque(o\xf9(p.eft == allow))")),(0,a.kt)("p",null,"This statement means that if the matching strategy result ",(0,a.kt)("inlineCode",{parentName:"p"},"p.eft")," has the result of (some) allow, then the final result is true."),(0,a.kt)("p",null,"Let's look at another example:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"e = some(where (p.eft == allow)) && !some(where (p.eft == deny))")),(0,a.kt)("p",null,"The logical meaning of this example combination is: if there is a strategy that matches the result of allow and no strategy that matches the result of deny, the result is true. In other words, it is true when the matching strategies are all allow. If there is any deny, both are false (more simply, when allow and deny exist at the same time, deny takes precedence)."),(0,a.kt)("p",null,"Le mod\xe8le le plus basique et le plus simple de Casbin est ACL. The model CONF for ACL is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"# D\xe9finition de la requ\xeate\n[request_definition]\nr = sub, obj, act\n\n# D\xe9finition de la politique\n[policy_definition]\np = sub, obj, acte\n\n# Effet de police\n[policy_effect]\ne = quelque part (o\xf9 (p. ft == allow))\n\n# correspondances\n[matchers]\nm = r. ub == p.sub && r.obj == p.obj && r.act == p.act\n\n")),(0,a.kt)("p",null,"An example policy for the ACL model is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, data1, read\np, bob, data2, write\n")),(0,a.kt)("p",null,"This means:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"alice peut lire les donn\xe9es1"),(0,a.kt)("li",{parentName:"ul"},"bob peut \xe9crire des donn\xe9es2")),(0,a.kt)("p",null,"We also support multi-line mode by appending '","\\","' in the end:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj \\\n  && r.act == p.act\n")),(0,a.kt)("p",null,"Furthermore, if you are using ABAC, you can try the 'in' operator as shown in the following example for the Casbin ",(0,a.kt)("strong",{parentName:"p"},"golang")," edition (jCasbin and Node-Casbin are not supported yet):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"# Matchs\n[matchers]\nm = r.obj == p.obj && r.act == p.act || r.obj in ('data2', 'data3')\n")),(0,a.kt)("p",null,"But you ",(0,a.kt)("strong",{parentName:"p"},"SHOULD")," make sure that the length of the array is ",(0,a.kt)("strong",{parentName:"p"},"MORE")," than ",(0,a.kt)("strong",{parentName:"p"},"1"),", otherwise it will cause a panic."),(0,a.kt)("p",null,"For more operators, you may take a look at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Knetic/govaluate"},"govaluate"),"."))}u.isMDXComponent=!0}}]);