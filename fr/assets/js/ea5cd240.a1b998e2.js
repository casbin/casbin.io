"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[1806],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,b=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(b,i(i({ref:t},p),{},{components:r})):n.createElement(b,i({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1303:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={id:"rebac",title:"ReBAC",description:"ReBAC based on Casbin",keywords:["ReBAC","ReBAC model"],authors:["D0000M"]},i=void 0,s={unversionedId:"rebac",id:"rebac",title:"ReBAC",description:"ReBAC based on Casbin",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/ReBAC.mdx",sourceDirName:".",slug:"/rebac",permalink:"/fr/docs/rebac",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/ReBAC.mdx",tags:[],version:"current",frontMatter:{id:"rebac",title:"ReBAC",description:"ReBAC based on Casbin",keywords:["ReBAC","ReBAC model"],authors:["D0000M"]},sidebar:"docs",previous:{title:"Casbin RBAC vs. RBAC96",permalink:"/fr/docs/rbac-96"},next:{title:"ABAC",permalink:"/fr/docs/abac"}},l={},c=[{value:"What is the ReBAC Model?",id:"what-is-the-rebac-model",level:2},{value:"ReBAC Support in Casbin",id:"rebac-support-in-casbin",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"what-is-the-rebac-model"},"What is the ReBAC Model?"),(0,o.kt)("p",null,"ReBAC (Relationship-Based Access Control) is a modern access control model that focuses on relationships between entities for permission management. Compared to traditional RBAC (Role-Based Access Control) or ABAC (Attribute-Based Access Control), ReBAC is better suited for systems with complex relationship networks, such as social networks, collaboration platforms, and multi-tenant systems."),(0,o.kt)("p",null,"In ReBAC, authorization decisions are based on relationships between entities, such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'Is the user the "owner" of the resource?'),(0,o.kt)("li",{parentName:"ul"},'Is the user a "friend" of the resource\'s "creator"?'),(0,o.kt)("li",{parentName:"ul"},"Does the user belong to an organization associated with the resource?"),(0,o.kt)("li",{parentName:"ul"},'Is the user an "admin" of a certain "project"?')),(0,o.kt)("p",null,"These relationships are typically modeled as graph structures or paths."),(0,o.kt)("h2",{id:"rebac-support-in-casbin"},"ReBAC Support in Casbin"),(0,o.kt)("p",null,"Casbin provides the following mechanisms to implement ReBAC:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"User-Resource-Role Relationships"),(0,o.kt)("li",{parentName:"ul"},"Resource-Type Relationships")),(0,o.kt)("p",null,"A single policy rule can cover multiple users and multiple resources of the same type, enabling flexible and scalable permission control through relationship combinations."),(0,o.kt)("p",null,"Casbin uses ",(0,o.kt)("inlineCode",{parentName:"p"},".conf")," files to define access control models. Below is an official ReBAC model example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = role, obj_type, act\n\n[role_definition]\ng = _, _, _\ng2 = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, r.obj, p.role) && g2(r.obj, p.obj_type) && r.act == p.act\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv"},'# Permission definition: The "collaborator" role can read files of type "doc"\np, collaborator, doc, read\n\n# User-Resource-Role Relationship: alice is a collaborator of doc1\ng, alice, doc1, collaborator\n\n# Resource-Type Relationship: doc1 is of type "doc"\ng2, doc1, doc\n')),(0,o.kt)("p",null,"By checking whether a user has a specific role for a given resource and whether the resource belongs to a specified type, permissions are automatically derived through ",(0,o.kt)("strong",{parentName:"p"},"role relationships + type relationships + permission definitions"),"."))}u.isMDXComponent=!0}}]);