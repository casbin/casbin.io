"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[6954],{3905:(e,a,l)=>{l.d(a,{Zo:()=>u,kt:()=>c});var t=l(7294);function n(e,a,l){return a in e?Object.defineProperty(e,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[a]=l,e}function o(e,a){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),l.push.apply(l,t)}return l}function r(e){for(var a=1;a<arguments.length;a++){var l=null!=arguments[a]?arguments[a]:{};a%2?o(Object(l),!0).forEach((function(a){n(e,a,l[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):o(Object(l)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(l,a))}))}return e}function d(e,a){if(null==e)return{};var l,t,n=function(e,a){if(null==e)return{};var l,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)l=o[t],a.indexOf(l)>=0||(n[l]=e[l]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)l=o[t],a.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var p=t.createContext({}),i=function(e){var a=t.useContext(p),l=a;return e&&(l="function"==typeof e?e(a):r(r({},a),e)),l},u=function(e){var a=i(e.components);return t.createElement(p.Provider,{value:a},e.children)},s={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var l=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),m=i(l),c=n,g=m["".concat(p,".").concat(c)]||m[c]||s[c]||o;return l?t.createElement(g,r(r({ref:a},u),{},{components:l})):t.createElement(g,r({ref:a},u))}));function c(e,a){var l=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=l.length,r=new Array(o);r[0]=m;var d={};for(var p in a)hasOwnProperty.call(a,p)&&(d[p]=a[p]);d.originalType=e,d.mdxType="string"==typeof e?e:n,r[1]=d;for(var i=2;i<o;i++)r[i]=l[i];return t.createElement.apply(null,r)}return t.createElement.apply(null,l)}m.displayName="MDXCreateElement"},6101:(e,a,l)=>{l.r(a),l.d(a,{assets:()=>p,contentTitle:()=>r,default:()=>g,frontMatter:()=>o,metadata:()=>d,toc:()=>i});var t=l(7462),n=(l(7294),l(3905));const o={id:"management-api",title:"API de gestion",description:"The primitive API that provides full support for Casbin policy management",keywords:["management","Filtered API"],authors:["nodece"]},r=void 0,d={unversionedId:"management-api",id:"management-api",title:"API de gestion",description:"The primitive API that provides full support for Casbin policy management",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/ManagementAPI.mdx",sourceDirName:".",slug:"/management-api",permalink:"/fr/docs/management-api",draft:!1,editUrl:"https://crowdin.com/project/casbin-website/fr",tags:[],version:"current",frontMatter:{id:"management-api",title:"API de gestion",description:"The primitive API that provides full support for Casbin policy management",keywords:["management","Filtered API"],authors:["nodece"]},sidebar:"docs",previous:{title:"Aper\xe7u de l'API",permalink:"/fr/docs/api-overview"},next:{title:"RBAC API",permalink:"/fr/docs/rbac-api"}},p={},i=[{value:"API filtr\xe9e",id:"api-filtr\xe9e",level:2},{value:"R\xe9f\xe9rence",id:"r\xe9f\xe9rence",level:2},{value:"<code>Enforce()</code>",id:"enforce",level:3},{value:"<code>EnforceWithMatcher()</code>",id:"enforcewithmatcher",level:3},{value:"<code>EnforceEx()</code>",id:"enforceex",level:3},{value:"<code>EnforceExWithMatcher()</code>",id:"enforceexwithmatcher",level:3},{value:"<code>BatchEnforce()</code>",id:"batchenforce",level:3},{value:"<code>GetAllSubjects()</code>",id:"getallsubjects",level:3},{value:"<code>GetAllNamedSubjects()</code>",id:"getallnamedsubjects",level:3},{value:"<code>GetAllObjects()</code>",id:"getallobjects",level:3},{value:"<code>GetAllNamedObjects()</code>",id:"getallnamedobjects",level:3},{value:"<code>GetAllActions()</code>",id:"getallactions",level:3},{value:"<code>GetAllNamedActions()</code>",id:"getallnamedactions",level:3},{value:"<code>GetAllRoles()</code>",id:"getallroles",level:3},{value:"<code>GetAllNamedRoles()</code>",id:"getallnamedroles",level:3},{value:"<code>GetPolicy()</code>",id:"getpolicy",level:3},{value:"<code>GetFilteredPolicy()</code>",id:"getfilteredpolicy",level:3},{value:"<code>GetNamedPolicy()</code>",id:"getnamedpolicy",level:3},{value:"<code>GetFilteredNamedPolicy()</code>",id:"getfilterednamedpolicy",level:3},{value:"<code>GetGroupingPolicy()</code>",id:"getgroupingpolicy",level:3},{value:"<code>GetFilteredGroupingPolicy()</code>",id:"getfilteredgroupingpolicy",level:3},{value:"<code>GetNamedGroupingPolicy()</code>",id:"getnamedgroupingpolicy",level:3},{value:"<code>GetFilteredNamedGroupingPolicy()</code>",id:"getfilterednamedgroupingpolicy",level:3},{value:"<code>HasPolicy()</code>",id:"haspolicy",level:3},{value:"<code>HasNamedPolicy()</code>",id:"hasnamedpolicy",level:3},{value:"<code>AddPolicy()</code>",id:"addpolicy",level:3},{value:"<code>AddPolicies()</code>",id:"addpolicies",level:3},{value:"<code>AddPoliciesEx()</code>",id:"addpoliciesex",level:3},{value:"<code>AddNamedPolicy()</code>",id:"addnamedpolicy",level:3},{value:"<code>AddNamedPolicies()</code>",id:"addnamedpolicies",level:3},{value:"<code>AddNamedPoliciesEx()</code>",id:"addnamedpoliciesex",level:3},{value:"<code>SelfAddPoliciesEx()</code>",id:"selfaddpoliciesex",level:3},{value:"<code>RemovePolicy()</code>",id:"removepolicy",level:3},{value:"<code>RemovePolicies()</code>",id:"removepolicies",level:3},{value:"<code>RemoveFilteredPolicy()</code>",id:"removefilteredpolicy",level:3},{value:"<code>RemoveNamedPolicy()</code>",id:"removenamedpolicy",level:3},{value:"<code>RemoveNamedPolicies()</code>",id:"removenamedpolicies",level:3},{value:"<code>RemoveFilteredNamedPolicy()</code>",id:"removefilterednamedpolicy",level:3},{value:"<code>HasGroupingPolicy()</code>",id:"hasgroupingpolicy",level:3},{value:"<code>HasNamedGroupingPolicy()</code>",id:"hasnamedgroupingpolicy",level:3},{value:"<code>AddGroupingPolicy()</code>",id:"addgroupingpolicy",level:3},{value:"<code>AddGroupingPolicies()</code>",id:"addgroupingpolicies",level:3},{value:"<code>AddGroupingPoliciesEx()</code>",id:"addgroupingpoliciesex",level:3},{value:"<code>AddNamedGroupingPolicy()</code>",id:"addnamedgroupingpolicy",level:3},{value:"<code>AddNamedGroupingPolicies()</code>",id:"addnamedgroupingpolicies",level:3},{value:"<code>AddNamedGroupingPoliciesEx()</code>",id:"addnamedgroupingpoliciesex",level:3},{value:"<code>RemoveGroupingPolicy()</code>",id:"removegroupingpolicy",level:3},{value:"<code>RemoveGroupingPolicies()</code>",id:"removegroupingpolicies",level:3},{value:"<code>RemoveFilteredGroupingPolicy()</code>",id:"removefilteredgroupingpolicy",level:3},{value:"<code>RemoveNamedGroupingPolicy()</code>",id:"removenamedgroupingpolicy",level:3},{value:"<code>RemoveNamedGroupingPolicies()</code>",id:"removenamedgroupingpolicies",level:3},{value:"<code>RemoveFilteredNamedGroupingPolicy()</code>",id:"removefilterednamedgroupingpolicy",level:3},{value:"<code>UpdatePolicy()</code>",id:"updatepolicy",level:3},{value:"<code>UpdatePolicies()</code>",id:"updatepolicies",level:3},{value:"<code>AddFunction()</code>",id:"addfunction",level:3},{value:"<code>LoadFilteredPolicy()</code>",id:"loadfilteredpolicy",level:3},{value:"<code>LoadIncrementalFilteredPolicy()</code>",id:"loadincrementalfilteredpolicy",level:3},{value:"<code>UpdateGroupingPolicy()</code>",id:"updategroupingpolicy",level:3},{value:"<code>UpdateNamedGroupingPolicy()</code>",id:"updatenamedgroupingpolicy",level:3},{value:"<code>SetFieldIndex()</code>",id:"setfieldindex",level:3}],u=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",a)},s=u("Tabs"),m=u("TabItem"),c={toc:i};function g(e){let{components:a,...l}=e;return(0,n.kt)("wrapper",(0,t.Z)({},c,l,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"L'API primitive qui fournit un support complet pour la gestion des politiques de Casbin."),(0,n.kt)("h2",{id:"api-filtr\xe9e"},"API filtr\xe9e"),(0,n.kt)("p",null,"Presque toutes les api filtr\xe9es ont les m\xeames param\xe8tres ",(0,n.kt)("inlineCode",{parentName:"p"},"(fieldIndex int, fieldValues ...string)"),". ",(0,n.kt)("inlineCode",{parentName:"p"},"fieldIndex")," est l'index o\xf9 commence la correspondance, ",(0,n.kt)("inlineCode",{parentName:"p"},"fieldValues")," indique les valeurs r\xe9sultat doivent avoir. Notez que la cha\xeene vide dans les valeurs du champ peut \xeatre n'importe quel mot."),(0,n.kt)("p",null,"Exemple:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, livre, lire\np, bob, livre, lire\np, bob, livre, \xe9crire\np, alice, stylo, get\np, bob, stylo ,get\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'e.GetFilteredPolicy(1, "book") // retournera : [[alice book read] [bob book read] [bob book write]]\n\ne. etFilteredPolicy(1, "book", "read") // retournera : [[alice book read] [bob book read]]\n\ne. etFilteredPolicy(0, "alice", "", "read") // retournera : [[alice book read]]\n\ne.GetFilteredPolicy(0, "alice") // retournera : [[alice book read] [alice pen get]]\n')),(0,n.kt)("h2",{id:"r\xe9f\xe9rence"},"R\xe9f\xe9rence"),(0,n.kt)("p",null,"la variable globale ",(0,n.kt)("inlineCode",{parentName:"p"},"e")," est l'instance Enforcer ."),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'e, err := NewEnforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const e = await newEnforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$e = new Enforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv');\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'e = casbin.Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var e = new Enforcer("path/to/model.conf", "path/to/policy.csv");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let mut e = Enforce::new("examples/rbac_model.conf", "examples/rbac_policy.csv").await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'Enforcer e = new Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv");\n')))),(0,n.kt)("h3",{id:"enforce"},(0,n.kt)("inlineCode",{parentName:"h3"},"Enforce()")),(0,n.kt)("p",null,'Enforce d\xe9cide si un "sujet" peut acc\xe9der \xe0 un "objet" avec l\'op\xe9ration "action", les param\xe8tres d\'entr\xe9e sont g\xe9n\xe9ralement : (sub, obj, act).'),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"ok, err := e.Enforce(request)\n"))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const ok = await e.enforce(request);\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$ok = $e->enforcer($request);\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"ok = e.enforcer(request)\n"))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"boolean ok = e.enforce(request);\n")))),(0,n.kt)("h3",{id:"enforcewithmatcher"},(0,n.kt)("inlineCode",{parentName:"h3"},"EnforceWithMatcher()")),(0,n.kt)("p",null,'EnforceWithMatcher utilise un matcher personnalis\xe9 pour d\xe9cider si un "sujet" peut acc\xe9der \xe0 un "objet" avec l\'op\xe9ration "action", les param\xe8tres d\'entr\xe9e sont g\xe9n\xe9ralement : (matcher, sub, obj, act), utiliser le mod\xe8le de correspondance par d\xe9faut lorsque le matcher est "".'),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"ok, err := e.EnforceWithMatcher(matcher, request)\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$ok = $e->enforceWithMatcher($matcher, $request);\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"ok = e.enforce_with_matcher(matcher, request)\n"))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"boolean ok = e.enforceWithMatcher(matcher, request);\n")))),(0,n.kt)("h3",{id:"enforceex"},(0,n.kt)("inlineCode",{parentName:"h3"},"EnforceEx()")),(0,n.kt)("p",null,"EnforceEx explique l'application en informant les r\xe8gles correspondantes."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"ok, reason, err := e.EnforceEx(request)\n"))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const ok = await e.enforceEx(request);\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"list($ok, $reason) = $e->enforceEx($request);\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"ok, reason = e.enforce_ex(request)\n")))),(0,n.kt)("h3",{id:"enforceexwithmatcher"},(0,n.kt)("inlineCode",{parentName:"h3"},"EnforceExWithMatcher()")),(0,n.kt)("p",null,"EnforceExWithMatcher utilise un matcher personnalis\xe9 et explique l'application en informant les r\xe8gles correspondantes."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"ok, reason, err := e.EnforceExWithMatcher(matcher, request)\n")))),(0,n.kt)("h3",{id:"batchenforce"},(0,n.kt)("inlineCode",{parentName:"h3"},"BatchEnforce()")),(0,n.kt)("p",null,"BatchEnforce ex\xe9cute chaque requ\xeate et renvoie un tableau bool"),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"boolArray, err := e.BatchEnforce(requests)\n"))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const boolArray = await e.batchEnforce(requests);\n"))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<Boolean> boolArray = e.batchEnforce(requests);\n")))),(0,n.kt)("h3",{id:"getallsubjects"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllSubjects()")),(0,n.kt)("p",null,"GetAllSubjects obtient la liste des sujets qui apparaissent dans la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"allSubjects := e.GetAllSubjects()\n"))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allSubjects = await e.getAllSubjects()\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$allSubjects = $e->getAllSubjects();\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"all_subjects = e.get_all_subjects()\n"))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"var allSubjects = e.GetAllSubjects();\n"))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let all_subjects = e.get_all_subjects();\n"))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<String> allSubjects = e.getAllSubjects();\n")))),(0,n.kt)("h3",{id:"getallnamedsubjects"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllNamedSubjects()")),(0,n.kt)("p",null,"GetAllNamedSubjects r\xe9cup\xe8re la liste des sujets qui apparaissent dans la politique actuelle nomm\xe9e."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'allNamedSubjects := e.GetAllNamedSubjects("p")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allNamedSubjects = await e.getAllNamedSubjects('p')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$allNamedSubjects = $e->getAllNamedSubjects("p");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'all_named_subjects = e.get_all_named_subjects("p")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var allNamedSubjects = e.GetAllNamedSubjects("p");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let all_named_subjects = e.get_all_named_subjects("p");\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<String> allNamedSubjects = e.getAllNamedSubjects("p");\n')))),(0,n.kt)("h3",{id:"getallobjects"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllObjects()")),(0,n.kt)("p",null,"GetAllObjects r\xe9cup\xe8re la liste des objets qui apparaissent dans la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"allObjects := e.GetAllObjects()\n"))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allObjects = await e.getAllObjects()\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$allObjects = $e->getAllObjects();\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"all_objects = e.get_all_objects()\n"))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"var allObjects = e.GetAllObjects();\n"))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let all_objects = e.get_all_objects();\n"))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<String> allObjects = e.getAllObjects();\n")))),(0,n.kt)("h3",{id:"getallnamedobjects"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllNamedObjects()")),(0,n.kt)("p",null,"GetAllNamedObjects r\xe9cup\xe8re la liste des objets qui apparaissent dans la politique actuelle nomm\xe9e."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'allNamedObjects := e.GetAllNamedObjects("p")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allNamedObjects = await e.getAllNamedObjects('p')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$allNamedObjects = $e->getAllNamedObjects("p");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'all_named_objects = e.get_all_named_objects("p")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var allNamedObjects = e.GetAllNamedObjects("p");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let all_named_objects = e.get_all_named_objects("p");\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<String> allNamedObjects = e.getAllNamedObjects("p");\n')))),(0,n.kt)("h3",{id:"getallactions"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllActions()")),(0,n.kt)("p",null,"GetAllActions obtient la liste des actions qui apparaissent dans la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"allActions := e.GetAllActions()\n"))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allActions = await e.getAllActions()\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$allActions = $e->getAllActions();\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"all_actions = e.get_all_actions()\n"))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"var allActions = e.GetAllActions();\n"))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let all_actions = e.get_all_actions();\n"))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<String> allActions = e.getAllActions();\n")))),(0,n.kt)("h3",{id:"getallnamedactions"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllNamedActions()")),(0,n.kt)("p",null,"GetAllNamedActions obtient la liste des actions qui s'affichent dans la politique actuelle nomm\xe9e."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'allNamedActions := e.GetAllNamedActions("p")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allNamedActions = await e.getAllNamedActions('p')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$allNamedActions = $e->getAllNamedActions("p");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'all_named_actions = e.get_all_named_actions("p")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var allNamedActions = e.GetAllNamedActions("p");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let all_named_actions = e.get_all_named_actions("p");\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<String> allNamedActions = e.getAllNamedActions("p");\n')))),(0,n.kt)("h3",{id:"getallroles"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllRoles()")),(0,n.kt)("p",null,"GetAllRoles obtient la liste des r\xf4les qui apparaissent dans la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"allRoles = e.GetAllRoles()\n"))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allRoles = await e.getAllRoles()\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$allRoles = $e->getAllRoles();\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"all_roles = e.get_all_roles()\n"))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"var allRoles = e.GetAllRoles();\n"))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let all_roles = e.get_all_roles();\n"))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<String> allRoles = e.getAllRoles();\n")))),(0,n.kt)("h3",{id:"getallnamedroles"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetAllNamedRoles()")),(0,n.kt)("p",null,"GetAllNamedRoles obtient la liste des r\xf4les qui apparaissent dans la politique actuelle nomm\xe9e."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'allNamedRoles := e.GetAllNamedRoles("g")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const allNamedRoles = await e.getAllNamedRoles('g')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$allNamedRoles = $e->getAllNamedRoles('g');\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'all_named_roles = e.get_all_named_roles("g")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var allNamedRoles = e.GetAllNamedRoles("g");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let all_named_roles = e.get_all_named_roles("g");\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<String> allNamedRoles = e.getAllNamedRoles("g");\n')))),(0,n.kt)("h3",{id:"getpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetPolicy()")),(0,n.kt)("p",null,"GetPolicy obtient toutes les r\xe8gles d'autorisation dans la politique."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"policy = e.GetPolicy()\n"))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const policy = await e.getPolicy()\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$policy = $e->getPolicy();\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"policy = e.get_policy()\n"))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"var policy = e.GetPolicy();\n"))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let policy = e.get_policy();\n"))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<List<String>> policy = e.getPolicy();\n")))),(0,n.kt)("h3",{id:"getfilteredpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetFilteredPolicy()")),(0,n.kt)("p",null,"GetFilteredPolicy r\xe9cup\xe8re toutes les r\xe8gles d'autorisation dans la politique, les filtres de champs peuvent \xeatre sp\xe9cifi\xe9s."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'filteredPolicy := e.GetFilteredPolicy(0, "alice")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const filteredPolicy = await e.getFilteredPolicy(0, 'alice')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$filteredPolicy = $e->getFilteredPolicy(0, "alice");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'filtered_policy = e.get_filtered_policy(0, "alice")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var filteredPolicy = e.GetFilteredPolicy(0, "alice");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let filtered_policy = e.get_filtered_policy(0, vec!["alice".to_owned()]);\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> filteredPolicy = e.getFilteredPolicy(0, "alice");\n')))),(0,n.kt)("h3",{id:"getnamedpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetNamedPolicy()")),(0,n.kt)("p",null,"GetNamedPolicy r\xe9cup\xe8re toutes les r\xe8gles d'autorisation dans la politique nomm\xe9e."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'namedPolicy := e.GetNamedPolicy("p")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const namedPolicy = await e.getNamedPolicy('p')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$namedPolicy = $e->getNamedPolicy("p");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'named_policy = e.get_named_policy("p")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var namedPolicy = e.GetNamedPolicy("p");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let named_policy = e.get_named_policy("p");\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> namedPolicy = e.getNamedPolicy("p");\n')))),(0,n.kt)("h3",{id:"getfilterednamedpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetFilteredNamedPolicy()")),(0,n.kt)("p",null,"GetFilteredNamedPolicy r\xe9cup\xe8re toutes les r\xe8gles d'autorisation dans la politique nomm\xe9e, les filtres de champs peuvent \xeatre sp\xe9cifi\xe9s."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'filteredNamedPolicy = e.GetFilteredNamedPolicy("p", 0, "bob")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const filteredNamedPolicy = await e.getFilteredNamedPolicy('p', 0, 'bob')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$filteredNamedPolicy = $e->getFilteredNamedPolicy("p", 0, "bob");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'filtered_named_policy = e.get_filtered_named_policy("p", 0, "alice")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var filteredNamedPolicy = e.GetFilteredNamedPolicy("p", 0, "alice");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let filtered_named_policy = e.get_filtered_named_policy("p", 0, vec!["bob".to_owned()]);\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> filteredNamedPolicy = e.getFilteredNamedPolicy("p", 0, "bob");\n')))),(0,n.kt)("h3",{id:"getgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetGroupingPolicy()")),(0,n.kt)("p",null,"GetGroupingPolicy r\xe9cup\xe8re toutes les r\xe8gles d'h\xe9ritage de r\xf4le dans la politique."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"groupingPolicy := e.GetGroupingPolicy()\n"))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingPolicy = await e.getGroupingPolicy()\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$groupingPolicy = $e->getGroupingPolicy();\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"grouping_policy = e.get_grouping_policy()\n"))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"var groupingPolicy = e.GetGroupingPolicy();\n"))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let grouping_policy = e.get_grouping_policy();\n"))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<List<String>> groupingPolicy = e.getGroupingPolicy();\n")))),(0,n.kt)("h3",{id:"getfilteredgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetFilteredGroupingPolicy()")),(0,n.kt)("p",null,"GetFilteredGroupingPolicy r\xe9cup\xe8re toutes les r\xe8gles d'h\xe9ritage de r\xf4le dans la politique, les filtres de champs peuvent \xeatre sp\xe9cifi\xe9s."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'filteredGroupingPolicy := e.GetFilteredGroupingPolicy(0, "alice")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const filteredGroupingPolicy = await e.getFilteredGroupingPolicy(0, 'alice')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$filteredGroupingPolicy = $e->getFilteredGroupingPolicy(0, "alice");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'filtered_grouping_policy = e.get_filtered_grouping_policy(0, "alice")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var filteredGroupingPolicy = e.GetFilteredGroupingPolicy(0, "alice");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let filtered_grouping_policy = e.get_filtered_grouping_policy(0, vec!["alice".to_owned()]);\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> filteredGroupingPolicy = e.getFilteredGroupingPolicy(0, "alice");\n')))),(0,n.kt)("h3",{id:"getnamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetNamedGroupingPolicy()")),(0,n.kt)("p",null,"GetNamedGroupingPolicy r\xe9cup\xe8re toutes les r\xe8gles d'h\xe9ritage de r\xf4le dans la politique."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'namedGroupingPolicy := e.GetNamedGroupingPolicy("g")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const namedGroupingPolicy = await e.getNamedGroupingPolicy('g')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$namedGroupingPolicy = $e->getNamedGroupingPolicy("g");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'named_grouping_policy = e.get_named_grouping_policy("g")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var namedGroupingPolicy = e.GetNamedGroupingPolicy("g");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let named_grouping_policy = e.get_named_grouping_policy("g");\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> namedGroupingPolicy = e.getNamedGroupingPolicy("g");\n')))),(0,n.kt)("h3",{id:"getfilterednamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"GetFilteredNamedGroupingPolicy()")),(0,n.kt)("p",null,"GetFilteredNamedGroupingPolicy r\xe9cup\xe8re toutes les r\xe8gles d'h\xe9ritage de r\xf4le dans la politique."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'namedGroupingPolicy := e.GetFilteredNamedGroupingPolicy("g", 0, "alice")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const namedGroupingPolicy = await e.getFilteredNamedGroupingPolicy('g', 0, 'alice')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$namedGroupingPolicy = $e->getFilteredNamedGroupingPolicy("g", 0, "alice");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'named_grouping_policy = e.get_filtered_named_grouping_policy("g", 0, "alice")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var namedGroupingPolicy = e.GetFilteredNamedGroupingPolicy("g", 0, "alice");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let named_grouping_policy = e.get_filtered_named_groupingPolicy("g", 0, vec!["alice".to_owned()]);\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> filteredNamedGroupingPolicy = e.getFilteredNamedGroupingPolicy("g", 0, "alice");\n')))),(0,n.kt)("h3",{id:"haspolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"HasPolicy()")),(0,n.kt)("p",null,"HasPolicy d\xe9termine si une r\xe8gle d'autorisation existe."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'hasPolicy := e.HasPolicy("data2_admin", "data2", "read")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const hasPolicy = await e.hasPolicy('data2_admin', 'data2', 'read')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$hasPolicy = $e->hasPolicy('data2_admin', 'data2', 'read');\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'has_policy = e.has_policy("data2_admin", "data2", "read")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var hasPolicy = e.HasPolicy("data2_admin", "data2", "read");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let has_policy = e.has_policy(vec!["data2_admin".to_owned(), "data2".to_owned(), "read".to_owned()]);\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean hasPolicy = e.hasPolicy("data2_admin", "data2", "read");\n')))),(0,n.kt)("h3",{id:"hasnamedpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"HasNamedPolicy()")),(0,n.kt)("p",null,"HasNamedPolicy d\xe9termine si une r\xe8gle d'autorisation nomm\xe9e existe."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'hasNamedPolicy := e.HasNamedPolicy("p", "data2_admin", "data2", "read")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const hasNamedPolicy = await e.hasNamedPolicy('p', 'data2_admin', 'data2', 'read')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$hasNamedPolicy = $e->hasNamedPolicy("p", "data2_admin", "data2", "read");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'has_named_policy = e.has_named_policy("p", "data2_admin", "data2", "read")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var hasNamedPolicy = e.HasNamedPolicy("p", "data2_admin", "data2", "read");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let has_named_policy = e.has_named_policy("p", vec!["data2_admin".to_owned(), "data2".to_owned(), "read".to_owned()]);\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean hasNamedPolicy = e.hasNamedPolicy("p", "data2_admin", "data2", "read");\n')))),(0,n.kt)("h3",{id:"addpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddPolicy()")),(0,n.kt)("p",null,"AddPolicy ajoute une r\xe8gle d'autorisation \xe0 la politique actuelle. Si la r\xe8gle existe d\xe9j\xe0, la fonction retourne false et la r\xe8gle ne sera pas ajout\xe9e. Sinon, la fonction retourne true en ajoutant la nouvelle r\xe8gle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"added := e.AddPolicy('eve', 'data3', 'read')\n"))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['eve', 'data3', 'read']\nconst added = await e.addPolicy(...p)\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"$added = $e->addPolicy('eve', 'data3', 'read');\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'added = e.add_policy("eve", "data3", "read")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddPolicy("eve", "data3", "read");\nor\nvar added = await e.AddPolicyAsync("eve", "data3", "read");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_policy(vec!["eve".to_owned(), "data3".to_owned(), "read".to_owned()]);\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addPolicy("eve", "data3", "read");\n')))),(0,n.kt)("h3",{id:"addpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddPolicies()")),(0,n.kt)("p",null,"AddPolicies ajoute des r\xe8gles d'autorisation \xe0 la politique actuelle. L'op\xe9ration est de nature atomique. Par cons\xe9quent, si les r\xe8gles d'autorisation se composent de r\xe8gles qui ne sont pas compatibles avec la politique actuelle, la fonction retourne false et aucune r\xe8gle de r\xe9gulation n'est ajout\xe9e \xe0 la police courante. Si toutes les r\xe8gles d'autorisation sont conformes aux r\xe8gles de la police, la fonction renvoie la vraie et chaque r\xe8gle de politique est ajout\xe9e \xe0 la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"jack", "data4", "read"},\n    []string {"katy", "data4", "write"},\n    []string {"leyo", "data4", "read"},\n    []string {"ham", "data4", "write"},\n}\n\nareRulesAdded := e.AddPolicies(rules)\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesAdded = await e.addPolicies(rules);\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["jack", "data4", "read"],\n    ["katy", "data4", "write"],\n    ["leyo", "data4", "read"],\n    ["ham", "data4", "write"]\n]\nare_rules_added = e.add_policies(rules)\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["jack".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["katy".to_owned(), "data4".to_owned(), "write".to_owned()],\n    vec!["leyo".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["ham".to_owned(), "data4".to_owned(), "write".to_owned()],\n];\n\nlet are_rules_added = e.add_policies(rules).await?\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String[][] rules = {\n    {"jack", "data4", "read"},\n    {"katy", "data4", "write"},\n    {"leyo", "data4", "read"},\n    {"ham", "data4", "write"},\n};\n\nboolean areRulesAdded = e.addPolicies(rules);\n')))),(0,n.kt)("h3",{id:"addpoliciesex"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddPoliciesEx()")),(0,n.kt)("p",null,"AddPoliciesEx adds authorization rules to the current policy. If the rule already exists, the rule will not be added. But unlike AddPolicies, other non-existent rules are added instead of returning false directly"),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'ok, err := e.AddPoliciesEx([][]string{{"user1", "data1", "read"}, {"user2", "data2", "read"}})\n')))),(0,n.kt)("h3",{id:"addnamedpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddNamedPolicy()")),(0,n.kt)("p",null,"AddNamedPolicy ajoute une r\xe8gle d'autorisation \xe0 la politique courante. Si la r\xe8gle existe d\xe9j\xe0, la fonction retourne false et la r\xe8gle ne sera pas ajout\xe9e. Sinon, la fonction retourne true en ajoutant la nouvelle r\xe8gle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'added := e.AddNamedPolicy("p", "eve", "data3", "read")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['eve', 'data3', 'read']\nconst added = await e.addNamedPolicy('p', ...p)\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$added = $e->addNamedPolicy("p", "eve", "data3", "read");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'added = e.add_named_policy("p", "eve", "data3", "read")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddNamedPolicy("p", "eve", "data3", "read");\nor\nvar added = await e.AddNamedPolicyAsync("p", "eve", "data3", "read");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_named_policy("p", vec!["eve".to_owned(), "data3".to_owned(), "read".to_owned()]).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addNamedPolicy("p", "eve", "data3", "read");\n')))),(0,n.kt)("h3",{id:"addnamedpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddNamedPolicies()")),(0,n.kt)("p",null,"AddNamedPolicies ajoute des r\xe8gles d'autorisation \xe0 la politique courante. L'op\xe9ration est de nature atomique. Par cons\xe9quent, si les r\xe8gles d'autorisation se composent de r\xe8gles qui ne sont pas compatibles avec la politique actuelle, la fonction retourne false et aucune r\xe8gle de r\xe9gulation n'est ajout\xe9e \xe0 la police courante. Si toutes les r\xe8gles d'autorisation sont conformes aux r\xe8gles de la police, la fonction renvoie la vraie et chaque r\xe8gle de politique est ajout\xe9e \xe0 la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"jack", "data4", "read"},\n    []string {"katy", "data4", "write"},\n    []string {"leyo", "data4", "read"},\n    []string {"ham", "data4", "write"},\n}\n\nareRulesAdded := e.AddNamedPolicies("p", rules)\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesAdded = await e.addNamedPolicies('p', rules);\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["jack", "data4", "read"],\n    ["katy", "data4", "write"],\n    ["leyo", "data4", "read"],\n    ["ham", "data4", "write"]\n]\nare_rules_added = e.add_named_policies("p", rules)\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["jack".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["katy".to_owned(), "data4".to_owned(), "write".to_owned()],\n    vec!["leyo".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["ham".to_owned(), "data4".to_owned(), "write".to_owned()],\n];\n\nlet are_rules_added := e.add_named_policies("p", rules).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> rules = Arrays.asList(\n    Arrays.asList("jack", "data4", "read"),\n    Arrays.asList("katy", "data4", "write"),\n    Arrays.asList("leyo", "data4", "read"),\n    Arrays.asList("ham", "data4", "write")\n);\nboolean areRulesAdded = e.addNamedPolicies("p", rules);\n')))),(0,n.kt)("h3",{id:"addnamedpoliciesex"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddNamedPoliciesEx()")),(0,n.kt)("p",null,"AddNamedPoliciesEx adds authorization rules to the current named policy. If the rule already exists, the rule will not be added. But unlike AddNamedPolicies, other non-existent rules are added instead of returning false directly"),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'ok, err := e.AddNamedPoliciesEx("p", [][]string{{"user1", "data1", "read"}, {"user2", "data2", "read"}})\n')))),(0,n.kt)("h3",{id:"selfaddpoliciesex"},(0,n.kt)("inlineCode",{parentName:"h3"},"SelfAddPoliciesEx()")),(0,n.kt)("p",null,"SelfAddPoliciesEx adds authorization rules to the current named policy with autoNotifyWatcher disabled. If the rule already exists, the rule will not be added. But unlike SelfAddPolicies, other non-existent rules are added instead of returning false directly"),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'ok, err := e.SelfAddPoliciesEx("p", "p", [][]string{{"user1", "data1", "read"}, {"user2", "data2", "read"}})\n')))),(0,n.kt)("h3",{id:"removepolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemovePolicy()")),(0,n.kt)("p",null,"RemovePolicy supprime une r\xe8gle d'autorisation de la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemovePolicy("alice", "data1", "read")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['alice', 'data1', 'read']\nconst removed = await e.removePolicy(...p)\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removePolicy("alice", "data1", "read");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_policy("alice", "data1", "read")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemovePolicy("alice", "data1", "read");\nor\nvar removed = await e.RemovePolicyAsync("alice", "data1", "read");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_policy(vec!["alice".to_owned(), "data1".to_owned(), "read".to_owned()]).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removePolicy("alice", "data1", "read");\n')))),(0,n.kt)("h3",{id:"removepolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemovePolicies()")),(0,n.kt)("p",null,"RemovePolicies supprime les r\xe8gles d'autorisation de la politique actuelle. L'op\xe9ration est de nature atomique. Par cons\xe9quent, si les r\xe8gles d'autorisation se composent de r\xe8gles qui ne sont pas compatibles avec la politique actuelle, la fonction retourne false et aucune r\xe8gle de r\xe9gulation n'est retir\xe9e de la charte courante. Si toutes les r\xe8gles d'autorisation sont conformes aux r\xe8gles de la police, la fonction renvoie la vraie et chaque r\xe8gle de politique est retir\xe9e de la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"jack", "data4", "read"},\n    []string {"katy", "data4", "write"},\n    []string {"leyo", "data4", "read"},\n    []string {"ham", "data4", "write"},\n}\n\nareRulesRemoved := e.RemovePolicies(rules)\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesRemoved = await e.removePolicies(rules);\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["jack", "data4", "read"],\n    ["katy", "data4", "write"],\n    ["leyo", "data4", "read"],\n    ["ham", "data4", "write"]\n]\nare_rules_removed = e.remove_policies(rules)\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["jack".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["katy".to_owned(), "data4".to_owned(), "write".to_owned()],\n    vec!["leyo".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["ham".to_owned(), "data4".to_owned(), "write".to_owned()],\n];\n\nlet are_rules_removed = e.remove_policies(rules).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String[][] rules = {\n    {"jack", "data4", "read"},\n    {"katy", "data4", "write"},\n    {"leyo", "data4", "read"},\n    {"ham", "data4", "write"},\n};\nboolean areRulesRemoved = e.removePolicies(rules);\n')))),(0,n.kt)("h3",{id:"removefilteredpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveFilteredPolicy()")),(0,n.kt)("p",null,"RemoveFilteredPolicy supprime une r\xe8gle d'autorisation de la politique actuelle, les filtres de champs peuvent \xeatre sp\xe9cifi\xe9s. RemovePolicy supprime une r\xe8gle d'autorisation de la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveFilteredPolicy(0, "alice", "data1", "read")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['alice', 'data1', 'read']\nconst removed = await e.removeFilteredPolicy(0, ...p)\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeFilteredPolicy(0, "alice", "data1", "read");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_filtered_policy(0, "alice", "data1", "read")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveFilteredPolicy("alice", "data1", "read");\nor\nvar removed = await e.RemoveFilteredPolicyAsync("alice", "data1", "read");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_filtered_policy(0, vec!["alice".to_owned(), "data1".to_owned(), "read".to_owned()]).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeFilteredPolicy(0, "alice", "data1", "read");\n')))),(0,n.kt)("h3",{id:"removenamedpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveNamedPolicy()")),(0,n.kt)("p",null,"RemoveNamedPolicy supprime une r\xe8gle d'autorisation de la charte nomm\xe9e courante."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveNamedPolicy("p", "alice", "data1", "read")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['alice', 'data1', 'read']\nconst removed = await e.removeNamedPolicy('p', ...p)\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeNamedPolicy("p", "alice", "data1", "read");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_named_policy("p", "alice", "data1", "read")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveNamedPolicy("p", "alice", "data1", "read");\nor\nvar removed = await e.RemoveNamedPolicyAsync("p", "alice", "data1", "read");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_named_policy("p", vec!["alice".to_owned(), "data1".to_owned(), "read".to_owned()]).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeNamedPolicy("p", "alice", "data1", "read");\n')))),(0,n.kt)("h3",{id:"removenamedpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveNamedPolicies()")),(0,n.kt)("p",null,"RemoveNamedPolicy supprime les r\xe8gles d'autorisation de la politique actuelle nomm\xe9e. L'op\xe9ration est de nature atomique. Par cons\xe9quent, si les r\xe8gles d'autorisation se composent de r\xe8gles qui ne sont pas compatibles avec la politique actuelle, la fonction retourne false et aucune r\xe8gle de r\xe9gulation n'est retir\xe9e de la charte courante. Si toutes les r\xe8gles d'autorisation sont conformes aux r\xe8gles de la police, la fonction renvoie la vraie et chaque r\xe8gle de politique est retir\xe9e de la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"jack", "data4", "read"},\n    []string {"katy", "data4", "write"},\n    []string {"leyo", "data4", "read"},\n    []string {"ham", "data4", "write"},\n}\n\nareRulesRemoved := e.RemoveNamedPolicies("p", rules)\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesRemoved = await e.removeNamedPolicies('p', rules);\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["jack", "data4", "read"],\n    ["katy", "data4", "write"],\n    ["leyo", "data4", "read"],\n    ["ham", "data4", "write"]\n]\nare_rules_removed = e.remove_named_policies("p", rules)\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["jack".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["katy".to_owned(), "data4".to_owned(), "write".to_owned()],\n    vec!["leyo".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["ham".to_owned(), "data4".to_owned(), "write".to_owned()],\n];\n\nlet areRulesRemoved = e.remove_named_policies("p", rules).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> rules = Arrays.asList(\n    Arrays.asList("jack", "data4", "read"),\n    Arrays.asList("katy", "data4", "write"),\n    Arrays.asList("leyo", "data4", "read"),\n    Arrays.asList("ham", "data4", "write")\n);\nboolean areRulesRemoved = e.removeNamedPolicies("p", rules);\n')))),(0,n.kt)("h3",{id:"removefilterednamedpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveFilteredNamedPolicy()")),(0,n.kt)("p",null,"RemoveFilteredNamedPolicy supprime une r\xe8gle d'autorisation de la charte nomm\xe9e, les filtres de champs peuvent \xeatre sp\xe9cifi\xe9s."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveFilteredNamedPolicy("p", 0, "alice", "data1", "read")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['alice', 'data1', 'read']\nconst removed = await e.removeFilteredNamedPolicy('p', 0, ...p)\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeFilteredNamedPolicy("p", 0, "alice", "data1", "read");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_filtered_named_policy("p", 0, "alice", "data1", "read")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveFilteredNamedPolicy("p", 0, "alice", "data1", "read");\nor\nvar removed = e.RemoveFilteredNamedPolicyAync("p", 0, "alice", "data1", "read");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_filtered_named_policy("p", 0, vec!["alice".to_owned(), "data1".to_owned(), "read".to_owned()]).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeFilteredNamedPolicy("p", 0, "alice", "data1", "read");\n')))),(0,n.kt)("h3",{id:"hasgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"HasGroupingPolicy()")),(0,n.kt)("p",null,"HasGroupingPolicy d\xe9termine si une r\xe8gle d'h\xe9ritage de r\xf4le existe."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'has := e.HasGroupingPolicy("alice", "data2_admin")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const has = await e.hasGroupingPolicy('alice', 'data2_admin')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$has = $e->hasGroupingPolicy("alice", "data2_admin");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'has = e.has_grouping_policy("alice", "data2_admin")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var has = e.HasGroupingPolicy("alice", "data2_admin");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let has = e.has_grouping_policy(vec!["alice".to_owned(), "data2_admin".to_owned()]);\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean has = e.hasGroupingPolicy("alice", "data2_admin");\n')))),(0,n.kt)("h3",{id:"hasnamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"HasNamedGroupingPolicy()")),(0,n.kt)("p",null,"HasNamedGroupingPolicy d\xe9termine si une r\xe8gle d'h\xe9ritage de r\xf4le nomm\xe9e existe."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'has := e.HasNamedGroupingPolicy("g", "alice", "data2_admin")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const has = await e.hasNamedGroupingPolicy('g', 'alice', 'data2_admin')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$has = $e->hasNamedGroupingPolicy("g", "alice", "data2_admin");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'has = e.has_named_grouping_policy("g", "alice", "data2_admin")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var has = e.HasNamedGroupingPolicy("g", "alice", "data2_admin");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let has = e.has_named_grouping_policy("g", vec!["alice".to_owned(), "data2_admin".to_owned()]);\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean has = e.hasNamedGroupingPolicy("g", "alice", "data2_admin");\n')))),(0,n.kt)("h3",{id:"addgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddGroupingPolicy()")),(0,n.kt)("p",null,"AddGroupingPolicy ajoute une r\xe8gle d'h\xe9ritage de r\xf4le \xe0 la politique actuelle. Si la r\xe8gle existe d\xe9j\xe0, la fonction retourne false et la r\xe8gle ne sera pas ajout\xe9e. Sinon, la fonction retourne true en ajoutant la nouvelle r\xe8gle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'added := e.AddGroupingPolicy("group1", "data2_admin")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const added = await e.addGroupingPolicy('group1', 'data2_admin')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$added = $e->addGroupingPolicy("group1", "data2_admin");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'added = e.add_grouping_policy("group1", "data2_admin")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddGroupingPolicy("group1", "data2_admin");\nor\nvar added = await e.AddGroupingPolicyAsync("group1", "data2_admin");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_grouping_policy(vec!["group1".to_owned(), "data2_admin".to_owned()]).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addGroupingPolicy("group1", "data2_admin");\n')))),(0,n.kt)("h3",{id:"addgroupingpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddGroupingPolicies()")),(0,n.kt)("p",null,"AddGroupingPolicies ajoute des r\xe8gles d'h\xe9ritage de r\xf4le \xe0 la politique actuelle. L'op\xe9ration est de nature atomique. Par cons\xe9quent, si les r\xe8gles d'autorisation se composent de r\xe8gles qui ne sont pas compatibles avec la politique actuelle, la fonction retourne false et aucune r\xe8gle de r\xe9gulation n'est ajout\xe9e \xe0 la police courante. Si toutes les autorisations sont conformes aux r\xe8gles de la police, la fonction renvoie vraie, et chaque r\xe8gle de politique est ajout\xe9e \xe0 la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"ham", "data4_admin"},\n    []string {"jack", "data5_admin"},\n}\n\nareRulesAdded := e.AddGroupingPolicies(rules)\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesAdded = await e.addGroupingPolicies(groupingRules);\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["ham", "data4_admin"],\n    ["jack", "data5_admin"]\n]\n\nare_rules_added = e.add_grouping_policies(rules)\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["ham".to_owned(), "data4_admin".to_owned()],\n    vec!["jack".to_owned(), "data5_admin".to_owned()],\n];\n\nlet areRulesAdded = e.add_grouping_policies(rules).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String[][] groupingRules = {\n    {"ham", "data4_admin"},\n    {"jack", "data5_admin"}\n};\nboolean areRulesAdded = e.addGroupingPolicies(groupingRules);\n')))),(0,n.kt)("h3",{id:"addgroupingpoliciesex"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddGroupingPoliciesEx()")),(0,n.kt)("p",null,"AddGroupingPoliciesEx adds role inheritance rules to the current policy. If the rule already exists, the rule will not be added. But unlike AddGroupingPolicies, other non-existent rules are added instead of returning false directly"),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'ok, err := e.AddGroupingPoliciesEx([][]string{{"user1", "member"}, {"user2", "member"}})\n')))),(0,n.kt)("h3",{id:"addnamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddNamedGroupingPolicy()")),(0,n.kt)("p",null,"AddNamedGroupingPolicy ajoute une r\xe8gle d'h\xe9ritage de r\xf4le nomm\xe9e \xe0 la politique actuelle. Si la r\xe8gle existe d\xe9j\xe0, la fonction retourne false et la r\xe8gle ne sera pas ajout\xe9e. Sinon, la fonction retourne true en ajoutant la nouvelle r\xe8gle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'added := e.AddNamedGroupingPolicy("g", "group1", "data2_admin")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const added = await e.addNamedGroupingPolicy('g', 'group1', 'data2_admin')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$added = $e->addNamedGroupingPolicy("g", "group1", "data2_admin");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'added = e.add_named_grouping_policy("g", "group1", "data2_admin")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddNamedGroupingPolicy("g", "group1", "data2_admin");\nor\nvar added = await e.AddNamedGroupingPolicyAsync("g", "group1", "data2_admin");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_named_grouping_policy("g", vec!["group1".to_owned(), "data2_admin".to_owned()]).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addNamedGroupingPolicy("g", "group1", "data2_admin");\n')))),(0,n.kt)("h3",{id:"addnamedgroupingpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddNamedGroupingPolicies()")),(0,n.kt)("p",null,"AddNamedGroupingPolicies ajoute des r\xe8gles d'h\xe9ritage de r\xf4le nomm\xe9es \xe0 la politique actuelle. L'op\xe9ration est de nature atomique. Par cons\xe9quent, si les r\xe8gles d'autorisation se composent de r\xe8gles qui ne sont pas compatibles avec la politique actuelle, la fonction retourne false et aucune r\xe8gle de r\xe9gulation n'est ajout\xe9e \xe0 la police courante. Si toutes les r\xe8gles d'autorisation sont conformes aux r\xe8gles de la police, la fonction renvoie la vraie et chaque r\xe8gle de politique est ajout\xe9e \xe0 la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"ham", "data4_admin"},\n    []string {"jack", "data5_admin"},\n}\n\nareRulesAdded := e.AddNamedGroupingPolicies("g", rules)\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesAdded = await e.addNamedGroupingPolicies('g', groupingRules);\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["ham", "data4_admin"],\n    ["jack", "data5_admin"]\n]\n\nare_rules_added = e.add_named_grouping_policies("g", rules)\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["ham".to_owned(), "data4_admin".to_owned()],\n    vec!["jack".to_owned(), "data5_admin".to_owned()],\n];\n\nlet are_rules_added = e.add_named_grouping_policies("g", rules).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String[][] groupingRules = {\n    {"ham", "data4_admin"},\n    {"jack", "data5_admin"}\n};\nboolean areRulesAdded = e.addNamedGroupingPolicies("g", groupingRules);\n')))),(0,n.kt)("h3",{id:"addnamedgroupingpoliciesex"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddNamedGroupingPoliciesEx()")),(0,n.kt)("p",null,"AddNamedGroupingPoliciesEx adds named role inheritance rules to the current policy. If the rule already exists, the rule will not be added. But unlike AddNamedGroupingPolicies, other non-existent rules are added instead of returning false directly"),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'ok, err := e.AddNamedGroupingPoliciesEx("g", [][]string{{"user1", "member"}, {"user2", "member"}})\n')))),(0,n.kt)("h3",{id:"removegroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveGroupingPolicy()")),(0,n.kt)("p",null,"RemoveGroupingPolicy supprime une r\xe8gle d'h\xe9ritage de r\xf4le de la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveGroupingPolicy("alice", "data2_admin")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const removed = await e.removeGroupingPolicy('alice', 'data2_admin')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeGroupingPolicy("alice", "data2_admin");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_grouping_policy("alice", "data2_admin")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveGroupingPolicy("alice", "data2_admin");\nor\nvar removed = await e.RemoveGroupingPolicyAsync("alice", "data2_admin");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_grouping_policy(vec!["alice".to_owned(), "data2_admin".to_owned()]).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeGroupingPolicy("alice", "data2_admin");\n')))),(0,n.kt)("h3",{id:"removegroupingpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveGroupingPolicies()")),(0,n.kt)("p",null,"RemoveGroupingPolicies supprime les r\xe8gles d'h\xe9ritage de r\xf4le de la politique actuelle. L'op\xe9ration est de nature atomique. Par cons\xe9quent, si les r\xe8gles d'autorisation se composent de r\xe8gles qui ne sont pas compatibles avec la politique actuelle, la fonction retourne false et aucune r\xe8gle de r\xe9gulation n'est retir\xe9e de la charte courante. Si toutes les r\xe8gles d'autorisation sont conformes aux r\xe8gles de la police, la fonction renvoie la vraie et chaque r\xe8gle de politique est retir\xe9e de la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n                []string {"ham", "data4_admin"},\n                []string {"jack", "data5_admin"},\n        }\n\nareRulesRemoved := e.RemoveGroupingPolicies(rules)\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesRemoved = await e.removeGroupingPolicies(groupingRules);\n"))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["ham".to_owned(), "data4_admin".to_owned()],\n    vec!["jack".to_owned(), "data5_admin".to_owned()],\n];\n\nlet are_rules_removed = e.remove_grouping_policies(rules).await?;\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["ham", "data4_admin"],\n    ["jack", "data5_admin"]\n]\n\nare_rules_removed = e.remove_grouping_policies(rules)\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String[][] groupingRules = {\n    {"ham", "data4_admin"},\n    {"jack", "data5_admin"}\n};\nboolean areRulesRemoved = e.removeGroupingPolicies(groupingRules);\n')))),(0,n.kt)("h3",{id:"removefilteredgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveFilteredGroupingPolicy()")),(0,n.kt)("p",null,"RemoveFilteredGroupingPolicy supprime une r\xe8gle d'h\xe9ritage de r\xf4le de la r\xe8gle actuelle, les filtres de champs peuvent \xeatre sp\xe9cifi\xe9s."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveFilteredGroupingPolicy(0, "alice")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const removed = await e.removeFilteredGroupingPolicy(0, 'alice')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeFilteredGroupingPolicy(0, "alice");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_filtered_grouping_policy(0, "alice")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveFilteredGroupingPolicy(0, "alice");\nor\nvar removed = await e.RemoveFilteredGroupingPolicyAsync(0, "alice");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_filtered_grouping_policy(0, vec!["alice".to_owned()]).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeFilteredGroupingPolicy(0, "alice");\n')))),(0,n.kt)("h3",{id:"removenamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveNamedGroupingPolicy()")),(0,n.kt)("p",null,"RemoveNamedGroupingPolicy supprime une r\xe8gle d'h\xe9ritage de r\xf4le de la politique nomm\xe9e actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveNamedGroupingPolicy("g", "alice")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const removed = await e.removeNamedGroupingPolicy('g', 'alice')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeNamedGroupingPolicy("g", "alice");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_named_grouping_policy("g", "alice", "data2_admin")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveNamedGroupingPolicy("g", "alice");\nor \nvar removed = await e.RemoveNamedGroupingPolicyAsync("g", "alice");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_named_grouping_policy("g", vec!["alice".to_owned()]).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeNamedGroupingPolicy("g", "alice");\n')))),(0,n.kt)("h3",{id:"removenamedgroupingpolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveNamedGroupingPolicies()")),(0,n.kt)("p",null,"RemoveNamedGroupingPolicies supprime les r\xe8gles d'h\xe9ritage de r\xf4le nomm\xe9es de la politique actuelle. L'op\xe9ration est de nature atomique. Par cons\xe9quent, si les r\xe8gles d'autorisation se composent de r\xe8gles qui ne sont pas compatibles avec la politique actuelle, la fonction retourne false et aucune r\xe8gle de r\xe9gulation n'est retir\xe9e de la charte courante. Si toutes les r\xe8gles d'autorisation sont conformes aux r\xe8gles de la police, la fonction renvoie la vraie et chaque r\xe8gle de politique est retir\xe9e de la politique actuelle."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"ham", "data4_admin"},\n    []string {"jack", "data5_admin"},\n}\n\nareRulesRemoved := e.RemoveNamedGroupingPolicies("g", rules)\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesRemoved = await e.removeNamedGroupingPolicies('g', groupingRules);\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["ham", "data4_admin"],\n    ["jack", "data5_admin"]\n]\nare_rules_removed = e.remove_named_grouping_policies("g", rules)\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["ham".to_owned(), "data4_admin".to_owned()],\n    vec!["jack".to_owned(), "data5_admin".to_owned()],\n];\n\nlet are_rules_removed = e.remove_named_grouping_policies("g", rules).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String[][] groupingRules = {\n    {"ham", "data4_admin"},\n    {"jack", "data5_admin"}\n};\nboolean areRulesRemoved = e.removeNamedGroupingPolicies("g", groupingRules);\n')))),(0,n.kt)("h3",{id:"removefilterednamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"RemoveFilteredNamedGroupingPolicy()")),(0,n.kt)("p",null,"RemoveFilteredNamedGroupingPolicy supprime une r\xe8gle d'h\xe9ritage de r\xf4le de la politique nomm\xe9e, les filtres de champs peuvent \xeatre sp\xe9cifi\xe9s."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveFilteredNamedGroupingPolicy("g", 0, "alice")\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const removed = await e.removeFilteredNamedGroupingPolicy('g', 0, 'alice')\n"))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeFilteredNamedGroupingPolicy("g", 0, "alice");\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_filtered_named_grouping_policy("g", 0, "alice")\n'))),(0,n.kt)(m,{value:".NET",label:".NET",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveFilteredNamedGroupingPolicy("g", 0, "alice");\nor\nvar removed = await e.RemoveFilteredNamedGroupingPolicyAsync("g", 0, "alice");\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_filtered_named_groupingPolicy("g", 0, vec!["alice".to_owned()]).await?;\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeFilteredNamedGroupingPolicy("g", 0, "alice");\n')))),(0,n.kt)("h3",{id:"updatepolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"UpdatePolicy()")),(0,n.kt)("p",null,"Mettre \xe0 jour une ancienne politique vers une nouvelle politique."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'updated, err := e.UpdatePolicy([]string{"eve", "data3", "read"}, []string{"eve", "data3", "write"})\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},'const update = await e.updatePolicy(["eve", "data3", "read"], ["eve", "data3", "write"]);\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'updated = e.update_policy(["eve", "data3", "read"], ["eve", "data3", "write"])\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'boolean updated = e.updatePolicy(Arrays.asList("eve", "data3", "read"), Arrays.asList("eve", "data3", "write"));\n')))),(0,n.kt)("h3",{id:"updatepolicies"},(0,n.kt)("inlineCode",{parentName:"h3"},"UpdatePolicies()")),(0,n.kt)("p",null,"Mise \xe0 jour des politiques met \xe0 jour toutes les anciennes politiques vers de nouvelles politiques."),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'updated, err := e.UpdatePolicies([][]string{{"eve", "data3", "read"}, {"jack", "data3", "read"}}, [][]string{{"eve", "data3", "write"}, {"jack", "data3", "write"}})\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'old_rules = [["eve", "data3", "read"], ["jack", "data3", "read"]]\nnew_rules = [["eve", "data3", "write"], ["jack", "data3", "write"]]\n\nupdated = e.update_policies(old_rules, new_rules)\n')))),(0,n.kt)("h3",{id:"addfunction"},(0,n.kt)("inlineCode",{parentName:"h3"},"AddFunction()")),(0,n.kt)("p",null,"AddFunction ajoute une fonction personnalis\xe9e."),(0,n.kt)("p",null,"For example:"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'func CustomFunction(key1 string, key2 string) bool {\n    if key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data/:resource" {\n        return true\n    } else if key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data2/:id/using/:resId" {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc CustomFunctionWrapper(args ...interface{}) (interface{}, error) {\n    key1 := args[0].(string)\n    key2 := args[1].(string)\n\n    return bool(CustomFunction(key1, key2)), nil\n}\n\ne.AddFunction("keyMatchCustom", CustomFunctionWrapper)\n'))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},'function customFunction(key1, key2){\n    if(key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data/:resource") {\n        return true\n    } else if(key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data2/:id/using/:resId") {\n        return true\n    } else {\n        return false\n    }\n}\n\ne.addFunction("keyMatchCustom", customFunction);\n'))),(0,n.kt)(m,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'func customFunction($key1, $key2) {\n    if ($key1 == "/alice_data2/myid/using/res_id" && $key2 == "/alice_data/:resource") {\n        return true;\n    } elseif ($key1 == "/alice_data2/myid/using/res_id" && $key2 == "/alice_data2/:id/using/:resId") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunc customFunctionWrapper(...$args){\n    $key1 := $args[0];\n    $key2 := $args[1];\n\n    return customFunction($key1, $key2);\n}\n\n$e->addFunction("keyMatchCustom", customFunctionWrapper);\n'))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'def custom_function(key1, key2):\n    return ((key1 == "/alice_data2/myid/using/res_id" and key2 == "/alice_data/:resource") or (key1 == "/alice_data2/myid/using/res_id" and key2 == "/alice_data2/:id/using/:resId"))\n\n\ne.add_function("keyMatchCustom", custom_function)\n'))),(0,n.kt)(m,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'fn custom_function(key1: STring, key2: String) {\n    key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data/:resource" || key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data2/:id/using/:resId"\n}\n\n\ne.add_function("keyMatchCustom", custom_function);\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'public static class CustomFunc extends CustomFunction {\n    @Override\n    public AviatorObject call(Map<String, Object> env, AviatorObject arg1, AviatorObject arg2) {\n        String key1 = FunctionUtils.getStringValue(arg1, env);\n        String key2 = FunctionUtils.getStringValue(arg2, env);\n        if (key1.equals("/alice_data2/myid/using/res_id") && key2.equals("/alice_data/:resource")) {\n            return AviatorBoolean.valueOf(true);\n        } else if (key1.equals("/alice_data2/myid/using/res_id") && key2.equals("/alice_data2/:id/using/:resId")) {\n            return AviatorBoolean.valueOf(true);\n        } else {\n            return AviatorBoolean.valueOf(false);\n        }\n    }\n\n    @Override\n    public String getName() {\n        return "keyMatchCustom";\n    }\n}\n\nFunctionTest.CustomFunc customFunc = new FunctionTest.CustomFunc();\ne.addFunction(customFunc.getName(), customFunc);\n')))),(0,n.kt)("h3",{id:"loadfilteredpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"LoadFilteredPolicy()")),(0,n.kt)("p",null,"LoadFilteredPolicy charge les r\xe8gles filtr\xe9es \xe0 partir de fichier/base de donn\xe9es."),(0,n.kt)("p",null,"For example:"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"err := e.LoadFilteredPolicy()\n"))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const ok = await e.loadFilteredPolicy();\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'class Filter:\n    P = []\n    G = []\n\nadapter = casbin.persist.adapters.FilteredAdapter("rbac_with_domains_policy.csv")\ne = casbin.Enforcer("rbac_with_domains_model.conf", adapter)\nfilter = Filter()\nfilter.P = ["", "domain1"]\nfilter.G = ["", "", "domain1"]\ne.load_filtered_policy(filter)\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'e.loadFilteredPolicy(new String[] { "", "domain1" });\n')))),(0,n.kt)("h3",{id:"loadincrementalfilteredpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"LoadIncrementalFilteredPolicy()")),(0,n.kt)("p",null,"LoadIncrementalFilteredPolicy ajoute une charte filtr\xe9e \xe0 partir de fichier/base de donn\xe9es."),(0,n.kt)("p",null,"For example:"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"err := e.LoadIncrementalFilteredPolicy()\n"))),(0,n.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const ok = await e.loadIncrementalFilteredPolicy();\n"))),(0,n.kt)(m,{value:"Python",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'adapter = casbin.persist.adapters.FilteredAdapter("rbac_with_domains_policy.csv")\ne = casbin.Enforcer("rbac_with_domains_model.conf", adapter)\nfilter = Filter()\nfilter.P = ["", "domain1"]\nfilter.G = ["", "", "domain1"]\ne.load_increment_filtered_policy(filter)\n')))),(0,n.kt)("h3",{id:"updategroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"UpdateGroupingPolicy()")),(0,n.kt)("p",null,"UpdateGroupingPolicy met \xe0 jour l'ancienne r\xe8gle vers la nouvelle section ",(0,n.kt)("inlineCode",{parentName:"p"},"g")),(0,n.kt)("p",null,"For example:"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'succeed, err : = e.UpdateGroupingPolicy([]string{"data3_admin", "data4_admin"}, []string{"admin", "data4_admin"})\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Java"},'boolean succeed = e.updateGroupingPolicy(Arrays.asList("data3_admin", "data4_admin"), Arrays.asList("admin", "data4_admin"));\n')))),(0,n.kt)("h3",{id:"updatenamedgroupingpolicy"},(0,n.kt)("inlineCode",{parentName:"h3"},"UpdateNamedGroupingPolicy()")),(0,n.kt)("p",null,"UpdateNamedGroupingPolicy met \xe0 jour l'ancienne r\xe8gle nomm\xe9e ",(0,n.kt)("inlineCode",{parentName:"p"},"ptype")," \xe0 la section newRulein ",(0,n.kt)("inlineCode",{parentName:"p"},"g")),(0,n.kt)("p",null,"For example:"),(0,n.kt)(s,{groupId:"langs",mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'succeed, err : = e.UpdateGroupingPolicy("g1",[]string{"data3_admin", "data4_admin"}, []string{"admin", "data4_admin"})\n'))),(0,n.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Java"},'boolean succeed = e.updateNamedGroupingPolicy("g1", Arrays.asList("data3_admin", "data4_admin"), Arrays.asList("admin", "data4_admin"));\n')))),(0,n.kt)("h3",{id:"setfieldindex"},(0,n.kt)("inlineCode",{parentName:"h3"},"SetFieldIndex()")),(0,n.kt)("p",null,"SetFieldIndex suport customization of conventional name and position of ",(0,n.kt)("inlineCode",{parentName:"p"},"sub"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"obj"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"domain")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"priority"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_definition]\np = customized_priority, obj, act, eft, subject\n")),(0,n.kt)("p",null,"For example:"),(0,n.kt)(s,{mdxType:"Tabs"},(0,n.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'e.SetFieldIndex("p", constant.PriorityIndex, 0)\ne.SetFieldIndex("p", constant.SubjectIndex, 4)\n')))))}g.isMDXComponent=!0}}]);