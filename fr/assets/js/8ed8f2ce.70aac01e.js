"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[386],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),s=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},d=function(e){var r=s(e.components);return n.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=a,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return t?n.createElement(f,i(i({ref:r},d),{},{components:t})):n.createElement(f,i({ref:r},d))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9852:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=t(7462),a=(t(7294),t(3905));const o={id:"model-storage",title:"Model Storage",description:"Stockage du mod\xe8le",keywords:["model storage"],authors:["hsluoyz"]},i=void 0,l={unversionedId:"model-storage",id:"model-storage",title:"Model Storage",description:"Stockage du mod\xe8le",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/ModelStorage.mdx",sourceDirName:".",slug:"/model-storage",permalink:"/fr/docs/model-storage",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/ModelStorage.mdx",tags:[],version:"current",frontMatter:{id:"model-storage",title:"Model Storage",description:"Stockage du mod\xe8le",keywords:["model storage"],authors:["hsluoyz"]},sidebar:"docs",previous:{title:"Storage",permalink:"/fr/docs/category/storage"},next:{title:"Policy Storage",permalink:"/fr/docs/policy-storage"}},c={},s=[{value:"Charger le mod\xe8le \xe0 partir du fichier .CONF",id:"charger-le-mod\xe8le-\xe0-partir-du-fichier-conf",level:2},{value:"Charger le mod\xe8le \xe0 partir du code",id:"charger-le-mod\xe8le-\xe0-partir-du-code",level:2},{value:"Charger le mod\xe8le \xe0 partir d&#39;une cha\xeene de caract\xe8res",id:"charger-le-mod\xe8le-\xe0-partir-dune-cha\xeene-de-caract\xe8res",level:2}],d={toc:s};function p(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Contrairement \xe0 la politique, le mod\xe8le ne peut \xeatre charg\xe9, il ne peut pas \xeatre sauvegard\xe9. Nous pensons que le mod\xe8le n'est pas un composant dynamique et ne devrait pas \xeatre modifi\xe9 en temps r\xe9el, nous n'avons donc pas mis en \u0153uvre une API pour sauvegarder le mod\xe8le dans le stockage."),(0,a.kt)("p",null,"Cependant, il y a de bonnes nouvelles. Nous proposons trois fa\xe7ons \xe9quivalentes de charger un mod\xe8le, soit de mani\xe8re statique, soit de mani\xe8re dynamique :"),(0,a.kt)("h2",{id:"charger-le-mod\xe8le-\xe0-partir-du-fichier-conf"},"Charger le mod\xe8le \xe0 partir du fichier .CONF"),(0,a.kt)("p",null,"C'est la fa\xe7on la plus courante d'utiliser Casbin. Il est facile \xe0 comprendre pour les d\xe9butants et pratique \xe0 partager lorsque vous avez besoin de l'aide de l'\xe9quipe Casbin."),(0,a.kt)("p",null,"Le contenu du fichier ",(0,a.kt)("inlineCode",{parentName:"p"},".CONF")," ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/master/examples/rbac_model.conf"},"examples/rbac","_","model.conf")," est le suivant :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n")),(0,a.kt)("p",null,"Ensuite, vous pouvez charger le fichier de mod\xe8le comme suit :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'e := casbin.NewEnforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")\n')),(0,a.kt)("h2",{id:"charger-le-mod\xe8le-\xe0-partir-du-code"},"Charger le mod\xe8le \xe0 partir du code"),(0,a.kt)("p",null,"Le mod\xe8le peut \xeatre initialis\xe9 dynamiquement \xe0 partir du code au lieu d'utiliser un fichier ",(0,a.kt)("inlineCode",{parentName:"p"},".CONF"),". Voici un exemple pour le mod\xe8le RBAC :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/casbin/casbin/v2"\n    "github.com/casbin/casbin/v2/model"\n    "github.com/casbin/casbin/v2/persist/file-adapter"\n)\n\n// Initialize the model from Go code.\nm := model.NewModel()\nm.AddDef("r", "r", "sub, obj, act")\nm.AddDef("p", "p", "sub, obj, act")\nm.AddDef("g", "g", "_, _")\nm.AddDef("e", "e", "some(where (p.eft == allow))")\nm.AddDef("m", "m", "g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act")\n\n// Load the policy rules from the .CSV file adapter.\n// Replace it with your adapter to avoid using files.\na := fileadapter.NewAdapter("examples/rbac_policy.csv")\n\n// Create the enforcer.\ne := casbin.NewEnforcer(m, a)\n')),(0,a.kt)("h2",{id:"charger-le-mod\xe8le-\xe0-partir-dune-cha\xeene-de-caract\xe8res"},"Charger le mod\xe8le \xe0 partir d'une cha\xeene de caract\xe8res"),(0,a.kt)("p",null,"Alternativement, vous pouvez charger l'int\xe9gralit\xe9 du texte du mod\xe8le \xe0 partir d'une cha\xeene de caract\xe8res multilignes. L'avantage de cette approche est que vous n'avez pas besoin de maintenir un fichier de mod\xe8le."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/casbin/casbin/v2"\n    "github.com/casbin/casbin/v2/model"\n)\n\n// Initialize the model from a string.\ntext :=\n`\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n`\nm, _ := model.NewModelFromString(text)\n\n// Load the policy rules from the .CSV file adapter.\n// Replace it with your adapter to avoid using files.\na := fileadapter.NewAdapter("examples/rbac_policy.csv")\n\n// Create the enforcer.\ne := casbin.NewEnforcer(m, a)\n')))}p.isMDXComponent=!0}}]);