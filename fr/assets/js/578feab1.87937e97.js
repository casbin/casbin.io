"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[9541],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(i,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},674:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={id:"how-it-works",title:"How It Works",description:"Comment fonctionne Casbin",keywords:["PERM","request","policy","matcher","effect"],authors:["nodece"]},s=void 0,l={unversionedId:"how-it-works",id:"how-it-works",title:"How It Works",description:"Comment fonctionne Casbin",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/HowItWorks.mdx",sourceDirName:".",slug:"/how-it-works",permalink:"/fr/docs/how-it-works",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/HowItWorks.mdx",tags:[],version:"current",frontMatter:{id:"how-it-works",title:"How It Works",description:"Comment fonctionne Casbin",keywords:["PERM","request","policy","matcher","effect"],authors:["nodece"]},sidebar:"docs",previous:{title:"Get Started",permalink:"/fr/docs/get-started"},next:{title:"Tutorials",permalink:"/fr/docs/tutorials"}},i={},u=[{value:"Request",id:"request",level:3},{value:"Policy",id:"policy",level:3},{value:"Matcher",id:"matcher",level:3},{value:"Effect",id:"effect",level:3}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Dans Casbin, un mod\xe8le de contr\xf4le d'acc\xe8s est abstrait dans un fichier CONF bas\xe9 sur le ",(0,a.kt)("strong",{parentName:"p"},"m\xe9tamod\xe8le PERM (Politique, Effet, Requ\xeate, Correspondances)"),". Changer ou mettre \xe0 niveau le m\xe9canisme d'autorisation pour un projet est aussi simple que de modifier une configuration. Vous pouvez personnaliser votre propre mod\xe8le de contr\xf4le d'acc\xe8s en combinant les mod\xe8les disponibles. Par exemple, vous pouvez combiner les r\xf4les RBAC et les attributs ABAC ensemble \xe0 l'int\xe9rieur d'un mod\xe8le et partager un ensemble de r\xe8gles de politique."),(0,a.kt)("p",null,"Le mod\xe8le PERM est compos\xe9 de quatre fondations : Politique, Effet, Requ\xeate et Correspondances. Ces fondations d\xe9crivent la relation entre les ressources et les utilisateurs."),(0,a.kt)("h3",{id:"request"},"Request"),(0,a.kt)("p",null,"D\xe9finit les param\xe8tres de la requ\xeate. Une requ\xeate de base est un objet tuple, n\xe9cessitant au moins un sujet (entit\xe9 acc\xe9d\xe9e), un objet (ressource acc\xe9d\xe9e) et une action (m\xe9thode d'acc\xe8s)."),(0,a.kt)("p",null,"Par exemple, une d\xe9finition de requ\xeate peut ressembler \xe0 ceci : ",(0,a.kt)("inlineCode",{parentName:"p"},"r={sub,obj,act}")),(0,a.kt)("p",null,"Cette d\xe9finition sp\xe9cifie les noms de param\xe8tres et l'ordre requis par la fonction de correspondance de contr\xf4le d'acc\xe8s."),(0,a.kt)("h3",{id:"policy"},"Policy"),(0,a.kt)("p",null,"D\xe9finit le mod\xe8le pour la strat\xe9gie d'acc\xe8s. Il sp\xe9cifie le nom et l'ordre des champs dans le document de r\xe8gle de Politique."),(0,a.kt)("p",null,"Par exemple : ",(0,a.kt)("inlineCode",{parentName:"p"},"p={sub, obj, act}")," ou ",(0,a.kt)("inlineCode",{parentName:"p"},"p={sub, obj, act, eft}")),(0,a.kt)("p",null,"Note : Si eft (r\xe9sultat de la politique) n'est pas d\xe9fini, le champ de r\xe9sultat dans le fichier de politique ne sera pas lu, et le r\xe9sultat de la politique correspondante sera autoris\xe9 par d\xe9faut."),(0,a.kt)("h3",{id:"matcher"},"Matcher"),(0,a.kt)("p",null,"D\xe9finit les r\xe8gles de correspondance pour la Requ\xeate et la Politique."),(0,a.kt)("p",null,"Par exemple : ",(0,a.kt)("inlineCode",{parentName:"p"},"m = r.sub == p.sub && r.act == p.act && r.obj == p.obj")," Cette r\xe8gle de correspondance simple et courante signifie que si les param\xe8tres demand\xe9s (entit\xe9s, ressources et m\xe9thodes) sont \xe9gaux \xe0 ceux trouv\xe9s dans la politique, alors le r\xe9sultat de la politique (",(0,a.kt)("inlineCode",{parentName:"p"},"p.eft"),") est renvoy\xe9. Le r\xe9sultat de la strat\xe9gie sera sauvegard\xe9 dans ",(0,a.kt)("inlineCode",{parentName:"p"},"p.eft"),"."),(0,a.kt)("h3",{id:"effect"},"Effect"),(0,a.kt)("p",null,"Effectue un jugement de combinaison logique sur les r\xe9sultats de correspondance des Correspondances."),(0,a.kt)("p",null,"Par exemple : ",(0,a.kt)("inlineCode",{parentName:"p"},"e = some(where(p.eft == allow))")),(0,a.kt)("p",null,"Cette d\xe9claration signifie que si le r\xe9sultat de la strat\xe9gie de correspondance ",(0,a.kt)("inlineCode",{parentName:"p"},"p.eft")," a le r\xe9sultat de (quelques) autorisations, alors le r\xe9sultat final est vrai."),(0,a.kt)("p",null,"Regardons un autre exemple :"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"e = some(where (p.eft == allow)) && !some(where (p.eft == deny))")),(0,a.kt)("p",null,"La signification logique de cette combinaison d'exemple est : s'il y a une strat\xe9gie qui correspond au r\xe9sultat d'autorisation et aucune strat\xe9gie qui correspond au r\xe9sultat de refus, le r\xe9sultat est vrai. En d'autres termes, c'est vrai lorsque les strat\xe9gies de correspondance sont toutes autoris\xe9es. S'il y a un refus, les deux sont faux (plus simplement, lorsque l'autorisation et le refus existent en m\xeame temps, le refus a la priorit\xe9)."),(0,a.kt)("p",null,"Le mod\xe8le le plus basique et le plus simple dans Casbin est ACL. Le mod\xe8le CONF pour ACL est le suivant :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"# Request definition\n[request_definition]\nr = sub, obj, act\n\n# Policy definition\n[policy_definition]\np = sub, obj, act\n\n# Policy effect\n[policy_effect]\ne = some(where (p.eft == allow))\n\n# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n\n")),(0,a.kt)("p",null,"Un exemple de politique pour le mod\xe8le ACL est :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, data1, read\np, bob, data2, write\n")),(0,a.kt)("p",null,"Cela signifie :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"alice peut lire data1"),(0,a.kt)("li",{parentName:"ul"},"bob peut \xe9crire data2")),(0,a.kt)("p",null,"Nous prenons \xe9galement en charge le mode multi-ligne en ajoutant '' \xe0 la fin :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj \\\n  && r.act == p.act\n")),(0,a.kt)("p",null,"De plus, si vous utilisez ABAC, vous pouvez essayer l'op\xe9rateur 'in' comme le montre l'exemple suivant pour l'\xe9dition ",(0,a.kt)("strong",{parentName:"p"},"golang")," de Casbin (jCasbin et Node-Casbin ne sont pas encore pris en charge) :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"# Matchers\n[matchers]\nm = r.obj == p.obj && r.act == p.act || r.obj in ('data2', 'data3')\n")),(0,a.kt)("p",null,"But you ",(0,a.kt)("strong",{parentName:"p"},"MUST")," make sure that the length of the array is ",(0,a.kt)("strong",{parentName:"p"},"MORE")," than ",(0,a.kt)("strong",{parentName:"p"},"1"),", otherwise it will cause a panic."),(0,a.kt)("p",null,"For more operators, you may take a look at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/casbin/govaluate"},"govaluate"),"."))}c.isMDXComponent=!0}}]);