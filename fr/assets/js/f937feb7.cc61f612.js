"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[9370],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,f=c["".concat(o,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(f,s(s({ref:t},u),{},{components:n})):a.createElement(f,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5437:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={id:"syntax-for-models",title:"Syntax for Models",description:"Syntaxe pour les mod\xe8les",keywords:["syntax"],authors:["nodece"]},s=void 0,l={unversionedId:"syntax-for-models",id:"syntax-for-models",title:"Syntax for Models",description:"Syntaxe pour les mod\xe8les",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/SyntaxForModels.mdx",sourceDirName:".",slug:"/syntax-for-models",permalink:"/fr/docs/syntax-for-models",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/SyntaxForModels.mdx",tags:[],version:"current",frontMatter:{id:"syntax-for-models",title:"Syntax for Models",description:"Syntaxe pour les mod\xe8les",keywords:["syntax"],authors:["nodece"]},sidebar:"docs",previous:{title:"Supported Models",permalink:"/fr/docs/supported-models"},next:{title:"Effector",permalink:"/fr/docs/effector"}},o={},p=[{value:"D\xe9finition de la demande",id:"d\xe9finition-de-la-demande",level:2},{value:"D\xe9finition de la politique",id:"d\xe9finition-de-la-politique",level:2},{value:"Effet de la politique",id:"effet-de-la-politique",level:2},{value:"Matchers",id:"matchers",level:2},{value:"Ordre des expressions dans les comparateurs",id:"ordre-des-expressions-dans-les-comparateurs",level:3},{value:"Types de sections multiples",id:"types-de-sections-multiples",level:2},{value:"Grammaire sp\xe9ciale",id:"grammaire-sp\xe9ciale",level:2},{value:"\xc9valuateur d&#39;expression",id:"\xe9valuateur-dexpression",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},d=u("Tabs"),c=u("TabItem"),m={toc:p};function f(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Une configuration de mod\xe8le (CONF) doit avoir au moins quatre sections : ",(0,r.kt)("inlineCode",{parentName:"p"},"[request_definition]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"[policy_definition]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"[policy_effect]"),", et ",(0,r.kt)("inlineCode",{parentName:"p"},"[matchers]"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Si un mod\xe8le utilise le contr\xf4le d'acc\xe8s bas\xe9 sur les r\xf4les (RBAC), il doit \xe9galement inclure la section ",(0,r.kt)("inlineCode",{parentName:"p"},"[role_definition]"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Une configuration de mod\xe8le (CONF) peut contenir des commentaires. Les commentaires commencent par le symbole ",(0,r.kt)("inlineCode",{parentName:"p"},"#"),", et tout ce qui suit le symbole ",(0,r.kt)("inlineCode",{parentName:"p"},"#")," sera comment\xe9."))),(0,r.kt)("h2",{id:"d\xe9finition-de-la-demande"},"D\xe9finition de la demande"),(0,r.kt)("p",null,"La section ",(0,r.kt)("inlineCode",{parentName:"p"},"[request_definition]")," d\xe9finit les arguments de la fonction ",(0,r.kt)("inlineCode",{parentName:"p"},"e.Enforce(...)"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n")),(0,r.kt)("p",null,"Dans cet exemple, ",(0,r.kt)("inlineCode",{parentName:"p"},"sub"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"obj"),", et ",(0,r.kt)("inlineCode",{parentName:"p"},"act")," repr\xe9sentent le triple d'acc\xe8s classique : le sujet (entit\xe9 acc\xe9dant), l'objet (ressource acc\xe9d\xe9e), et l'action (m\xe9thode d'acc\xe8s). Cependant, vous pouvez personnaliser votre propre format de demande. Par exemple, vous pouvez utiliser ",(0,r.kt)("inlineCode",{parentName:"p"},"sub, act")," si vous n'avez pas besoin de sp\xe9cifier une ressource particuli\xe8re, ou ",(0,r.kt)("inlineCode",{parentName:"p"},"sub, sub2, obj, act")," si vous avez deux entit\xe9s acc\xe9dant."),(0,r.kt)("h2",{id:"d\xe9finition-de-la-politique"},"D\xe9finition de la politique"),(0,r.kt)("p",null,"La ",(0,r.kt)("inlineCode",{parentName:"p"},"[policy_definition]")," est la d\xe9finition d'une politique. Elle d\xe9finit le sens de la politique. Par exemple, nous avons le mod\xe8le suivant :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_definition]\np = sub, obj, act\np2 = sub, act\n")),(0,r.kt)("p",null,"Et nous avons la politique suivante (si dans un fichier de politique) :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, data1, read\np2, bob, write-all-objects\n")),(0,r.kt)("p",null,"Chaque ligne d'une politique est appel\xe9e une r\xe8gle de politique. Chaque r\xe8gle de politique commence par un ",(0,r.kt)("inlineCode",{parentName:"p"},"type de politique"),", tel que ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," ou ",(0,r.kt)("inlineCode",{parentName:"p"},"p2"),". Il est utilis\xe9 pour faire correspondre la d\xe9finition de la politique s'il y a plusieurs d\xe9finitions. La politique ci-dessus montre la liaison suivante. La liaison peut \xeatre utilis\xe9e dans le comparateur."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"(alice, data1, read) -> (p.sub, p.obj, p.act)\n(bob, write-all-objects) -> (p2.sub, p2.act)\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Les \xe9l\xe9ments d'une r\xe8gle de politique sont toujours consid\xe9r\xe9s comme des ",(0,r.kt)("inlineCode",{parentName:"p"},"cha\xeenes de caract\xe8res"),". Si vous avez des questions \xe0 ce sujet, veuillez vous r\xe9f\xe9rer \xe0 la discussion \xe0 : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/issues/113"},"https://github.com/casbin/casbin/issues/113"))),(0,r.kt)("h2",{id:"effet-de-la-politique"},"Effet de la politique"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[policy_effect]")," est la d\xe9finition de l'effet de la politique. Il d\xe9termine si la demande d'acc\xe8s doit \xeatre approuv\xe9e si plusieurs r\xe8gles de politique correspondent \xe0 la demande. Par exemple, une r\xe8gle autorise et l'autre refuse."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = some(where (p.eft == allow))\n")),(0,r.kt)("p",null,"L'effet de la politique ci-dessus signifie que s'il y a une r\xe8gle de politique correspondante de ",(0,r.kt)("inlineCode",{parentName:"p"},"allow"),", l'effet final est ",(0,r.kt)("inlineCode",{parentName:"p"},"allow")," (\xe9galement connu sous le nom de allow-override). ",(0,r.kt)("inlineCode",{parentName:"p"},"p.eft")," est l'effet d'une politique, et il peut \xeatre soit ",(0,r.kt)("inlineCode",{parentName:"p"},"allow")," soit ",(0,r.kt)("inlineCode",{parentName:"p"},"deny"),". Il est facultatif, et la valeur par d\xe9faut est ",(0,r.kt)("inlineCode",{parentName:"p"},"allow"),". Comme nous ne l'avons pas sp\xe9cifi\xe9 ci-dessus, il utilise la valeur par d\xe9faut."),(0,r.kt)("p",null,"Un autre exemple de l'effet de la politique est :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = !some(where (p.eft == deny))\n")),(0,r.kt)("p",null,"Cela signifie que s'il n'y a pas de r\xe8gles de politique correspondantes de ",(0,r.kt)("inlineCode",{parentName:"p"},"deny"),", l'effet final est ",(0,r.kt)("inlineCode",{parentName:"p"},"allow")," (\xe9galement connu sous le nom de deny-override). ",(0,r.kt)("inlineCode",{parentName:"p"},"some")," signifie qu'il existe une r\xe8gle de politique correspondante. ",(0,r.kt)("inlineCode",{parentName:"p"},"any")," signifie que toutes les r\xe8gles de politique correspondantes (non utilis\xe9es ici). L'effet de la politique peut m\xeame \xeatre li\xe9 \xe0 des expressions logiques :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = some(where (p.eft == allow)) && !some(where (p.eft == deny))\n")),(0,r.kt)("p",null,"Cela signifie qu'il doit y avoir au moins une r\xe8gle de politique correspondante de ",(0,r.kt)("inlineCode",{parentName:"p"},"allow"),", et il ne peut y avoir aucune r\xe8gle de politique correspondante de ",(0,r.kt)("inlineCode",{parentName:"p"},"deny"),". Par cons\xe9quent, de cette mani\xe8re, les autorisations allow et deny sont prises en charge, et le deny pr\xe9vaut."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Bien que nous ayons con\xe7u la syntaxe de l'effet de la politique comme ci-dessus, les impl\xe9mentations actuelles n'utilisent que des effets de politique cod\xe9s en dur. C'est parce que nous avons constat\xe9 qu'il n'y a pas beaucoup de besoin pour ce niveau de flexibilit\xe9. Donc pour l'instant, vous devez utiliser l'un des effets de politique int\xe9gr\xe9s au lieu de personnaliser le v\xf4tre.")),(0,r.kt)("p",null,"Les effets de politique int\xe9gr\xe9s pris en charge sont :"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Effet de la politique"),(0,r.kt)("th",{parentName:"tr",align:null},"Signification"),(0,r.kt)("th",{parentName:"tr",align:null},"Exemple"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"some(where (p.eft == allow))"),(0,r.kt)("td",{parentName:"tr",align:null},"allow-override"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"ACL, RBAC, etc."))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"!some(where (p.eft == deny))"),(0,r.kt)("td",{parentName:"tr",align:null},"deny-override"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Deny-override"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"some(where (p.eft == allow)) && !some(where (p.eft == deny))"),(0,r.kt)("td",{parentName:"tr",align:null},"allow-and-deny"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Allow-and-deny"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"priority(p.eft) ","|","|"," deny"),(0,r.kt)("td",{parentName:"tr",align:null},"priority"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Priority"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"subjectPriority(p.eft)"),(0,r.kt)("td",{parentName:"tr",align:null},"priorit\xe9 bas\xe9e sur le r\xf4le"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Subject-Priority"))))),(0,r.kt)("h2",{id:"matchers"},"Matchers"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[matchers]")," est la d\xe9finition des comparateurs de politique. Les comparateurs sont des expressions qui d\xe9finissent comment les r\xe8gles de politique sont \xe9valu\xe9es par rapport \xe0 la demande."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n")),(0,r.kt)("p",null,"Le comparateur ci-dessus est le plus simple et signifie que le sujet, l'objet et l'action dans une demande doivent correspondre \xe0 ceux d'une r\xe8gle de politique."),(0,r.kt)("p",null,"Des op\xe9rateurs arithm\xe9tiques comme ",(0,r.kt)("inlineCode",{parentName:"p"},"+, -, *, /")," et des op\xe9rateurs logiques comme ",(0,r.kt)("inlineCode",{parentName:"p"},"&&, ||, !")," peuvent \xeatre utilis\xe9s dans les comparateurs."),(0,r.kt)("h3",{id:"ordre-des-expressions-dans-les-comparateurs"},"Ordre des expressions dans les comparateurs"),(0,r.kt)("p",null,"L'ordre des expressions peut grandement affecter les performances. Jetez un coup d'\u0153il \xe0 l'exemple suivant pour plus de d\xe9tails :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'const rbac_models = `\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n`\n\nfunc TestManyRoles(t *testing.T) {\n\n    m, _ := model.NewModelFromString(rbac_models)\n    e, _ := NewEnforcer(m, false)\n\n    roles := []string{"admin", "manager", "developer", "tester"}\n\n    // 2500 projects\n    for nbPrj := 1; nbPrj < 2500; nbPrj++ {\n        // 4 objects and 1 role per object (so 4 roles)\n        for _, role := range roles {\n            roleDB := fmt.Sprintf("%s_project:%d", role, nbPrj)\n            objectDB := fmt.Sprintf("/projects/%d", nbPrj)\n            e.AddPolicy(roleDB, objectDB, "GET")\n        }\n        jasmineRole := fmt.Sprintf("%s_project:%d", roles[1], nbPrj)\n        e.AddGroupingPolicy("jasmine", jasmineRole)\n    }\n\n    e.AddGroupingPolicy("abu", "manager_project:1")\n    e.AddGroupingPolicy("abu", "manager_project:2499")\n\n    // With same number of policies\n    // User \'abu\' has only two roles\n    // User \'jasmine\' has many roles (1 role per policy, here 2500 roles)\n\n    request := func(subject, object, action string) {\n        t0 := time.Now()\n        resp, _ := e.Enforce(subject, object, action)\n        tElapse := time.Since(t0)\n        t.Logf("RESPONSE %-10s %s\\t %s : %5v IN: %+v", subject, object, action, resp, tElapse)\n        if tElapse > time.Millisecond*100 {\n            t.Errorf("More than 100 milliseconds for %s %s %s : %+v", subject, object, action, tElapse)\n        }\n    }\n\n    request("abu", "/projects/1", "GET")        // really fast because only 2 roles in all policies and at the beginning of the casbin_rule table\n    request("abu", "/projects/2499", "GET")     // fast because only 2 roles in all policies\n    request("jasmine", "/projects/1", "GET")    // really fast at the beginning of the casbin_rule table\n\n    request("jasmine", "/projects/2499", "GET") // slow and fails the only 1st time   <<<< pb here\n    request("jasmine", "/projects/2499", "GET") // fast maybe due to internal cache mechanism\n\n    // same issue with non-existing roles\n    // request("jasmine", "/projects/999999", "GET") // slow fails the only 1st time   <<<< pb here\n    // request("jasmine", "/projects/999999", "GET") // fast maybe due to internal cache mechanism\n}\n')),(0,r.kt)("p",null,"Le temps d'application peut \xeatre tr\xe8s long, jusqu'\xe0 6 secondes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go test -run ^TestManyRoles$ github.com/casbin/casbin/v2 -v\n\n=== RUN   TestManyRoles\n    rbac_api_test.go:598: RESPONSE abu        /projects/1        GET :  true IN: 438.379\xb5s\n    rbac_api_test.go:598: RESPONSE abu        /projects/2499     GET :  true IN: 39.005173ms\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/1        GET :  true IN: 1.774319ms\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/2499     GET :  true IN: 6.164071648s\n    rbac_api_test.go:600: More than 100 milliseconds for jasmine /projects/2499 GET : 6.164071648s\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/2499     GET :  true IN: 12.164122ms\n--- FAIL: TestManyRoles (6.24s)\nFAIL\nFAIL    github.com/casbin/casbin/v2     6.244s\nFAIL\n")),(0,r.kt)("p",null,"Cependant, si nous ajustons l'ordre des expressions dans les comparateurs et mettons des expressions plus longues comme des fonctions derri\xe8re, le temps d'ex\xe9cution sera tr\xe8s court."),(0,r.kt)("p",null,"Changer l'ordre des expressions dans les comparateurs dans l'exemple ci-dessus pour :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[matchers]\nm = r.obj == p.obj && g(r.sub, p.sub) && r.act == p.act\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go test -run ^TestManyRoles$ github.com/casbin/casbin/v2 -v\n=== RUN   TestManyRoles\n    rbac_api_test.go:599: RESPONSE abu        /projects/1        GET :  true IN: 786.635\xb5s\n    rbac_api_test.go:599: RESPONSE abu        /projects/2499     GET :  true IN: 4.933064ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/1        GET :  true IN: 2.908534ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/2499     GET :  true IN: 7.292963ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/2499     GET :  true IN: 6.168307ms\n--- PASS: TestManyRoles (0.05s)\nPASS\nok      github.com/casbin/casbin/v2     0.053s\n")),(0,r.kt)("h2",{id:"types-de-sections-multiples"},"Types de sections multiples"),(0,r.kt)("p",null,"Si vous avez besoin de plusieurs d\xe9finitions de politiques ou de plusieurs comparateurs, vous pouvez utiliser ",(0,r.kt)("inlineCode",{parentName:"p"},"p2")," ou ",(0,r.kt)("inlineCode",{parentName:"p"},"m2")," comme exemples. En fait, les quatre sections mentionn\xe9es ci-dessus peuvent utiliser plusieurs types, et la syntaxe est ",(0,r.kt)("inlineCode",{parentName:"p"},"r")," suivi d'un nombre, comme ",(0,r.kt)("inlineCode",{parentName:"p"},"r2")," ou ",(0,r.kt)("inlineCode",{parentName:"p"},"e2"),". Par d\xe9faut, ces quatre sections doivent correspondre une \xe0 une. Par exemple, votre section ",(0,r.kt)("inlineCode",{parentName:"p"},"r2")," n'utilisera que le comparateur ",(0,r.kt)("inlineCode",{parentName:"p"},"m2")," pour correspondre aux politiques ",(0,r.kt)("inlineCode",{parentName:"p"},"p2"),"."),(0,r.kt)("p",null,"Vous pouvez passer un ",(0,r.kt)("inlineCode",{parentName:"p"},"EnforceContext")," comme premier param\xe8tre de la m\xe9thode ",(0,r.kt)("inlineCode",{parentName:"p"},"enforce")," pour sp\xe9cifier les types. Le ",(0,r.kt)("inlineCode",{parentName:"p"},"EnforceContext")," est d\xe9fini comme suit :"),(0,r.kt)(d,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(c,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'EnforceContext{"r2","p2","e2","m2"}\ntype EnforceContext struct {\n    RType string\n    PType string\n    EType string\n    MType string\n}\n'))),(0,r.kt)(c,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const enforceContext = new EnforceContext('r2', 'p2', 'e2', 'm2');\nclass EnforceContext {\n  constructor(rType, pType, eType, mType) {\n    this.pType = pType;\n    this.eType = eType;\n    this.mType = mType;\n    this.rType = rType;\n  }\n}\n"))),(0,r.kt)(c,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'EnforceContext enforceContext = new EnforceContext("2");\npublic class EnforceContext {\n    private String pType;\n    private String eType;\n    private String mType;\n    private String rType;\n    public EnforceContext(String suffix) {\n      this.pType = "p" + suffix;\n      this.eType = "e" + suffix;\n      this.mType = "m" + suffix;\n      this.rType = "r" + suffix;\n    }\n}\n')))),(0,r.kt)("p",null,"Voici un exemple d'utilisation. Veuillez vous r\xe9f\xe9rer au ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/master/examples/multiple_policy_definitions_model.conf"},"mod\xe8le")," et \xe0 la ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/master/examples/multiple_policy_definitions_policy.csv"},"politique"),". La demande est la suivante :"),(0,r.kt)(d,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(c,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nenforceContext := NewEnforceContext("2")\n// You can also specify a certain type individually\nenforceContext.EType = "e"\n// Don\'t pass in EnforceContext; the default is r, p, e, m\ne.Enforce("alice", "data2", "read")        // true\n// Pass in EnforceContext\ne.Enforce(enforceContext, struct{ Age int }{Age: 70}, "/data1", "read")        //false\ne.Enforce(enforceContext, struct{ Age int }{Age: 30}, "/data1", "read")        //true\n'))),(0,r.kt)(c,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nconst enforceContext = new NewEnforceContext(\'2\');\n\n// You can also specify a certain type individually\nenforceContext.eType = "e"\n\n// Don\'t pass in EnforceContext; the default is r, p, e, m\ne.Enforce("alice", "data2", "read")        // true\n\n// Pass in EnforceContext\ne.Enforce(enforceContext, {Age: 70}, "/data1", "read")        //false\ne.Enforce(enforceContext, {Age: 30}, "/data1", "read")        //true\n'))),(0,r.kt)(c,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nEnforceContext enforceContext = new EnforceContext("2");\n// You can also specify a certain type individually\nenforceContext.seteType("e");\n// Don\'t pass in EnforceContext; the default is r, p, e, m\ne.enforce("alice", "data2", "read");  // true\n// Pass in EnforceContext\n// TestEvalRule is located in https://github.com/casbin/jcasbin/blob/master/src/test/java/org/casbin/jcasbin/main/AbacAPIUnitTest.java#L56\ne.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule("alice", 70), "/data1", "read"); // false\ne.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule("alice", 30), "/data1", "read"); // true\n')))),(0,r.kt)("h2",{id:"grammaire-sp\xe9ciale"},"Grammaire sp\xe9ciale"),(0,r.kt)("p",null,"Vous pouvez \xe9galement utiliser l'op\xe9rateur \"in\", qui est le seul op\xe9rateur avec un nom de texte. Cet op\xe9rateur v\xe9rifie le tableau du c\xf4t\xe9 droit pour voir s'il contient une valeur \xe9gale \xe0 la valeur du c\xf4t\xe9 gauche. L'\xe9galit\xe9 est d\xe9termin\xe9e en utilisant l'op\xe9rateur ==, et cette biblioth\xe8que ne v\xe9rifie pas les types entre les valeurs. Tant que deux valeurs peuvent \xeatre converties en interface{} et peuvent encore \xeatre v\xe9rifi\xe9es pour l'\xe9galit\xe9 avec ==, elles agiront comme pr\xe9vu. Notez que vous pouvez utiliser un param\xe8tre pour le tableau, mais il doit \xeatre un []interface{}."),(0,r.kt)("p",null,"Voir aussi ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/rbac_model_matcher_using_in_op.conf"},"rbac","_","model","_","matcher","_","using","_","in","_","op"),", ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/keyget2_model.conf"},"keyget2","_","model"),", et ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/keyget_model.conf"},"keyget","_","model"),"."),(0,r.kt)("p",null,"Exemple :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj\n...\n[matchers]\nm = r.sub.Name in (r.obj.Admins)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.Enforce(Sub{Name: "alice"}, Obj{Name: "a book", Admins: []interface{}{"alice", "bob"}})\n')),(0,r.kt)("h2",{id:"\xe9valuateur-dexpression"},"\xc9valuateur d'expression"),(0,r.kt)("p",null,"L'\xe9valuation des comparateurs dans Casbin est mise en \u0153uvre par des \xe9valuateurs d'expression dans chaque langue. Casbin int\xe8gre leurs pouvoirs pour fournir le langage PERM unifi\xe9. En plus de la syntaxe du mod\xe8le fournie ici, ces \xe9valuateurs d'expressions peuvent offrir des fonctionnalit\xe9s suppl\xe9mentaires qui pourraient ne pas \xeatre prises en charge par une autre langue ou mise en \u0153uvre. Soyez prudent lorsque vous utilisez cette fonctionnalit\xe9."),(0,r.kt)("p",null,"Les \xe9valuateurs d'expression utilis\xe9s par chaque impl\xe9mentation de Casbin sont les suivants :"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Impl\xe9mentation"),(0,r.kt)("th",{parentName:"tr",align:null},"Langage"),(0,r.kt)("th",{parentName:"tr",align:null},"\xc9valuateur d'Expression"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Casbin"),(0,r.kt)("td",{parentName:"tr",align:null},"Golang"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/casbin/govaluate"},"https://github.com/casbin/govaluate"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"jCasbin"),(0,r.kt)("td",{parentName:"tr",align:null},"Java"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/killme2008/aviator"},"https://github.com/killme2008/aviator"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Node-Casbin"),(0,r.kt)("td",{parentName:"tr",align:null},"Node.js"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/donmccurdy/expression-eval"},"https://github.com/donmccurdy/expression-eval"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PHP-Casbin"),(0,r.kt)("td",{parentName:"tr",align:null},"PHP"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/symfony/expression-language"},"https://github.com/symfony/expression-language"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PyCasbin"),(0,r.kt)("td",{parentName:"tr",align:null},"Python"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/danthedeckie/simpleeval"},"https://github.com/danthedeckie/simpleeval"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Casbin.NET"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/davideicardi/DynamicExpresso"},"https://github.com/davideicardi/DynamicExpresso"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Casbin4D"),(0,r.kt)("td",{parentName:"tr",align:null},"Delphi"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/casbin4d/Casbin4D/tree/master/SourceCode/Common/Third%20Party/TExpressionParser"},"https://github.com/casbin4d/Casbin4D/tree/master/SourceCode/Common/Third%20Party/TExpressionParser"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"casbin-rs"),(0,r.kt)("td",{parentName:"tr",align:null},"Rust"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/jonathandturner/rhai"},"https://github.com/jonathandturner/rhai"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"casbin-cpp"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/ArashPartow/exprtk"},"https://github.com/ArashPartow/exprtk"))))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Si vous rencontrez un probl\xe8me de performance avec Casbin, il est probablement caus\xe9 par la faible efficacit\xe9 de l'\xe9valuateur d'expression. Vous pouvez adresser le probl\xe8me \xe0 Casbin ou \xe0 l'\xe9valuateur d'expression directement pour obtenir des conseils sur l'acc\xe9l\xe9ration des performances. Pour plus de d\xe9tails, veuillez vous r\xe9f\xe9rer \xe0 la section ",(0,r.kt)("a",{parentName:"p",href:"/docs/benchmark"},"Benchmarks"),".")))}f.isMDXComponent=!0}}]);