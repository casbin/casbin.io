"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[9503],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1100:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={id:"policy-subset-loading",title:"Chargement du sous-ensemble de la politique",description:"Loading filtered policies",keywords:["filtered policies","policy subset","performance optimization"],authors:["hsluoyz"]},a=void 0,l={unversionedId:"policy-subset-loading",id:"policy-subset-loading",title:"Chargement du sous-ensemble de la politique",description:"Loading filtered policies",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/PolicySubsetLoading.mdx",sourceDirName:".",slug:"/policy-subset-loading",permalink:"/fr/docs/policy-subset-loading",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/PolicySubsetLoading.mdx",tags:[],version:"current",frontMatter:{id:"policy-subset-loading",title:"Chargement du sous-ensemble de la politique",description:"Loading filtered policies",keywords:["filtered policies","policy subset","performance optimization"],authors:["hsluoyz"]},sidebar:"docs",previous:{title:"Stockage de la politique",permalink:"/fr/docs/policy-storage"},next:{title:"Extensions",permalink:"/fr/docs/category/extensions"}},s={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Certains adaptateurs prennent en charge la gestion des politiques filtr\xe9es. This means that the policy loaded by Casbin is a subset of the policy stored in the database based on a given filter. This allows for efficient policy enforcement in large, multi-tenant environments where parsing the entire policy becomes a performance bottleneck."),(0,i.kt)("p",null,"Pour utiliser des r\xe8gles filtr\xe9es avec un adaptateur pris en charge, appelez simplement la m\xe9thode ",(0,i.kt)("inlineCode",{parentName:"p"},"LoadFilteredPolicy"),". Le format valide pour le param\xe8tre de filtre d\xe9pend de l'adaptateur utilis\xe9. Pour \xe9viter la perte accidentelle de donn\xe9es, la m\xe9thode ",(0,i.kt)("inlineCode",{parentName:"p"},"SavePolicy")," est d\xe9sactiv\xe9e lorsqu'une politique filtr\xe9e est charg\xe9e."),(0,i.kt)("p",null,"Par exemple, le code snippet suivant utilise l'adaptateur de fichier filtr\xe9 int\xe9gr\xe9 et le mod\xe8le RBAC avec des domaines. Dans ce cas, le filtre limite la r\xe8gle \xe0 un seul domaine. Toutes les lignes de r\xe9gulation pour les domaines autres que ",(0,i.kt)("inlineCode",{parentName:"p"},'"domain1"')," sont omises de la politique charg\xe9e :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/casbin/casbin/v2"\n    fileadapter "github.com/casbin/casbin/v2/persist/file-adapter"\n)\n\nenforcer, _ := casbin.NewEnforcer()\n\nadapter := fileadapter.NewFilteredAdapter("examples/rbac_with_domains_policy.csv")\nenforcer.InitWithAdapter("examples/rbac_with_domains_model.conf", adapter)\n\nfilter := &fileadapter.Filter{\n    P: []string{"", "domain1"},\n    G: []string{"", "", "domain1"},\n}\nenforcer.LoadFilteredPolicy(filter)\n\n// The loaded policy now only contains the entries pertaining to "domain1".\n')),(0,i.kt)("p",null,"There is another method that supports the subset loading feature: ",(0,i.kt)("inlineCode",{parentName:"p"},"LoadIncrementalFilteredPolicy"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"LoadIncrementalFilteredPolicy")," is similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"LoadFilteredPolicy"),", but it does not clear the previously loaded policy. It only appends the filtered policy to the existing policy."))}d.isMDXComponent=!0}}]);