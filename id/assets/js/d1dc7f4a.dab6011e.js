"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[9167],{3905:(e,n,a)=>{a.d(n,{Zo:()=>s,kt:()=>m});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=t.createContext({}),c=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},s=function(e){var n=c(e.components);return t.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(a),m=i,b=u["".concat(d,".").concat(m)]||u[m]||p[m]||r;return a?t.createElement(b,o(o({ref:n},s),{},{components:a})):t.createElement(b,o({ref:n},s))}));function m(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=a[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8529:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=a(7462),i=(a(7294),a(3905));const r={id:"policy-subset-loading",title:"Policy Subset Loading",description:"Memuat kebijakan terfilter",keywords:["filtered policies","policy subset","performance optimization"],authors:["hsluoyz"]},o=void 0,l={unversionedId:"policy-subset-loading",id:"policy-subset-loading",title:"Policy Subset Loading",description:"Memuat kebijakan terfilter",source:"@site/i18n/id/docusaurus-plugin-content-docs/current/PolicySubsetLoading.mdx",sourceDirName:".",slug:"/policy-subset-loading",permalink:"/id/docs/policy-subset-loading",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/PolicySubsetLoading.mdx",tags:[],version:"current",frontMatter:{id:"policy-subset-loading",title:"Policy Subset Loading",description:"Memuat kebijakan terfilter",keywords:["filtered policies","policy subset","performance optimization"],authors:["hsluoyz"]},sidebar:"docs",previous:{title:"Policy Storage",permalink:"/id/docs/policy-storage"},next:{title:"Scenarios",permalink:"/id/docs/category/scenarios"}},d={},c=[],s={toc:c};function p(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Beberapa adapter mendukung manajemen kebijakan terfilter. Ini berarti bahwa kebijakan yang dimuat oleh Casbin adalah subset dari kebijakan yang disimpan di database berdasarkan filter tertentu. Hal ini memungkinkan penerapan kebijakan yang efisien di lingkungan besar dan multi-penyewa di mana penguraian seluruh kebijakan menjadi kendala kinerja."),(0,i.kt)("p",null,"Untuk menggunakan kebijakan terfilter dengan adapter yang didukung, cukup panggil metode ",(0,i.kt)("inlineCode",{parentName:"p"},"LoadFilteredPolicy"),". Format yang valid untuk parameter filter bergantung pada adapter yang digunakan. Untuk mencegah kehilangan data secara tidak sengaja, metode ",(0,i.kt)("inlineCode",{parentName:"p"},"SavePolicy")," dinonaktifkan ketika kebijakan terfilter dimuat."),(0,i.kt)("p",null,"Sebagai contoh, cuplikan kode berikut menggunakan adaptor file terfilter bawaan dan model RBAC dengan domain. Dalam hal ini, filter membatasi kebijakan ke satu domain. Setiap baris kebijakan untuk domain selain ",(0,i.kt)("inlineCode",{parentName:"p"},'"domain1"')," dihilangkan dari kebijakan yang dimuat:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/casbin/casbin/v2"\n    fileadapter "github.com/casbin/casbin/v2/persist/file-adapter"\n)\n\nenforcer, _ := casbin.NewEnforcer()\n\nadapter := fileadapter.NewFilteredAdapter("examples/rbac_with_domains_policy.csv")\nenforcer.InitWithAdapter("examples/rbac_with_domains_model.conf", adapter)\n\nfilter := &fileadapter.Filter{\n    P: []string{"", "domain1"},\n    G: []string{"", "", "domain1"},\n}\nenforcer.LoadFilteredPolicy(filter)\n\n// The loaded policy now only contains the entries pertaining to "domain1".\n')),(0,i.kt)("p",null,"Ada metode lain yang mendukung fitur pemuatan subset: ",(0,i.kt)("inlineCode",{parentName:"p"},"LoadIncrementalFilteredPolicy"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"LoadIncrementalFilteredPolicy")," mirip dengan ",(0,i.kt)("inlineCode",{parentName:"p"},"LoadFilteredPolicy"),", tetapi tidak menghapus kebijakan yang sebelumnya dimuat. Ia hanya menambahkan kebijakan terfilter ke kebijakan yang sudah ada."))}p.isMDXComponent=!0}}]);