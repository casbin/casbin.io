"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[8908],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3007:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={id:"performance",title:"\u6027\u80fd\u4f18\u5316",description:"\u6027\u80fd\u4f18\u5316",keywords:["\u4f18\u5316"],authors:["hsluoyz"]},s=void 0,i={unversionedId:"performance",id:"performance",title:"\u6027\u80fd\u4f18\u5316",description:"\u6027\u80fd\u4f18\u5316",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/Performance.mdx",sourceDirName:".",slug:"/performance",permalink:"/zh/docs/performance",draft:!1,editUrl:"https://crowdin.com/project/casbin-website/zh-CN",tags:[],version:"current",frontMatter:{id:"performance",title:"\u6027\u80fd\u4f18\u5316",description:"\u6027\u80fd\u4f18\u5316",keywords:["\u4f18\u5316"],authors:["hsluoyz"]},sidebar:"docs",previous:{title:"Benchmarks",permalink:"/zh/docs/benchmark"},next:{title:"Kubernetes\u7684\u6388\u6743",permalink:"/zh/docs/k8s"}},l={},c=[{value:"\u9ad8\u8bbf\u95ee\u91cf",id:"\u9ad8\u8bbf\u95ee\u91cf",level:4},{value:"\u5927\u91cf\u7684\u7b56\u7565\u89c4\u5219",id:"\u5927\u91cf\u7684\u7b56\u7565\u89c4\u5219",level:4}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"When applied in a production environment with millions of users or permissions, you may encounter a performance downgrade in Casbin enforcement. There are usually two causes:"),(0,o.kt)("h4",{id:"\u9ad8\u8bbf\u95ee\u91cf"},"\u9ad8\u8bbf\u95ee\u91cf"),(0,o.kt)("p",null,"The number of incoming requests per second is too large, for example, 10,000 requests/s for a single Casbin instance. In such cases, a single Casbin instance is usually not enough to handle all the requests. There are two possible solutions:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\u8fd0\u7528\u591a\u7ebf\u7a0b\u6765\u8fd0\u884c\u591a\u4e2aCasbin\u5b9e\u4f8b\uff0c\u8fd9\u6837\u4ee5\u6765\u60a8\u5c31\u53ef\u4ee5\u5145\u5206\u5229\u7528\u673a\u5668\u4e2d\u7684\u6240\u6709\u5185\u6838\u3002 For more details, see: ",(0,o.kt)("a",{parentName:"p",href:"/docs/multi-threading"},"Multi-threading"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Deploy Casbin instances to a cluster (multiple machines) and use Watcher to ensure all Casbin instances are consistent. For more details, see: ",(0,o.kt)("a",{parentName:"p",href:"/docs/watchers"},"Watchers"),"."))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can use both of the above methods at the same time, for example, deploy Casbin to a 10-machine cluster where each machine has 5 threads simultaneously serving Casbin enforcement requests.")),(0,o.kt)("h4",{id:"\u5927\u91cf\u7684\u7b56\u7565\u89c4\u5219"},"\u5927\u91cf\u7684\u7b56\u7565\u89c4\u5219"),(0,o.kt)("p",null,"In a cloud or multi-tenant environment, millions of policy rules may be required. Each enforcement call or even loading the policy rules at the initial time can be very slow. \u8fd9\u7c7b\u4e8b\u4ef6\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u7f13\u89e3\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Check if your Casbin model or policy is well-designed. A well-written model and policy abstracts out the duplicated logic for each user/tenant and reduces the number of rules to a very small level (< 100). For example, you can share some default rules across all tenants and allow users to customize their rules later. Customized rules can override the default rules. If you have any further questions, please open a GitHub issue on the Casbin repository.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Do sharding to let a Casbin enforcer only load a small set of policy rules. For example, enforcer_0 can serve tenant_0 to tenant_99, while enforcer_1 can serve tenant_100 to tenant_199. To load only a subset of all policy rules, see: ",(0,o.kt)("a",{parentName:"p",href:"/docs/policy-subset-loading"},"Policy Subset Loading"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\u4ee5\u6388\u4e88RBAC\u89d2\u8272\u6743\u9650\uff0c\u53d6\u4ee3\u76f4\u63a5\u6388\u4e88\u7528\u6237\u6743\u9650\u3002 Casbin\u7684RBAC\u662f\u901a\u8fc7\u89d2\u8272\u7ee7\u627f\u6811\u6765\u5b9e\u73b0\u7684(\u4f5c\u4e3a\u7f13\u5b58)\u3002 So, given a user like Alice, Casbin only takes O(1) time to query the RBAC tree for the role-user relationship and perform enforcement. If your g rules don't change often, then the RBAC tree won't need to be constantly updated. See the details of this discussion here: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/issues/681#issuecomment-763801583"},"https://github.com/casbin/casbin/issues/681#issuecomment-763801583")))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can try all of the above methods at the same time.")))}p.isMDXComponent=!0}}]);