"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[2473],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=i.createContext({}),m=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=m(e.components);return i.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=m(t),c=a,k=d["".concat(o,".").concat(c)]||d[c]||u[c]||r;return t?i.createElement(k,s(s({ref:n},p),{},{components:t})):i.createElement(k,s({ref:n},p))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var m=2;m<r;m++)s[m]=t[m];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3110:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var i=t(7462),a=(t(7294),t(3905));const r={id:"menu-permissions",title:"Menu Permissions",description:"Example for Menu Permissions",keywords:["Menu Permissions","example"],authors:["amikecoXu"]},s=void 0,l={unversionedId:"menu-permissions",id:"menu-permissions",title:"Menu Permissions",description:"Example for Menu Permissions",source:"@site/i18n/ru/docusaurus-plugin-content-docs/current/MenuPermissions.mdx",sourceDirName:".",slug:"/menu-permissions",permalink:"/ru/docs/menu-permissions",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/MenuPermissions.mdx",tags:[],version:"current",frontMatter:{id:"menu-permissions",title:"Menu Permissions",description:"Example for Menu Permissions",keywords:["Menu Permissions","example"],authors:["amikecoXu"]},sidebar:"docs",previous:{title:"Data Permissions",permalink:"/ru/docs/data-permissions"},next:{title:"Extensions",permalink:"/ru/docs/category/extensions"}},o={},m=[{value:"1.  Configuration Files",id:"1--configuration-files",level:3},{value:"1.1 Overview",id:"11-overview",level:4},{value:"1.2 Permission Definitions (Policies)",id:"12-permission-definitions-policies",level:4},{value:"1.3 Roles and User Associations",id:"13-roles-and-user-associations",level:4},{value:"1.4 Menu Item Hierarchy",id:"14-menu-item-hierarchy",level:4},{value:"1.5 Menu Permission Inheritance and Default Rules",id:"15-menu-permission-inheritance-and-default-rules",level:4},{value:"1.6 Special Permission Inheritance Rules",id:"16-special-permission-inheritance-rules",level:4},{value:"1.7 Example Description",id:"17-example-description",level:4},{value:"2.  Menu Permission Control",id:"2--menu-permission-control",level:3}],p={toc:m};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We begin by introducing a Spring Boot example featuring a menu system. This example leverages jCasbin to manage menu permissions. Ultimately, it aims to abstract a middleware, specifically for menu permissions, which could be extended to other languages supported by Casbin, such as Go and Python."),(0,a.kt)("h3",{id:"1--configuration-files"},"1.  Configuration Files"),(0,a.kt)("p",null,"You need to set up role and permission management in the ",(0,a.kt)("inlineCode",{parentName:"p"},"policy.csv")," file, along with the parent-child relationships between menu items. For more details, please refer to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jcasbin/jcasbin-menu-permission"},"this GitHub repo"),"."),(0,a.kt)("h4",{id:"11-overview"},"1.1 Overview"),(0,a.kt)("p",null,"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"policy.csv"),", you can flexibly configure role permissions and menu structures for fine-grained access control. This configuration file defines access permissions for different roles on various menu items, associations between users and roles, and the hierarchical relationships between menu items."),(0,a.kt)("h4",{id:"12-permission-definitions-policies"},"1.2 Permission Definitions (Policies)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Policy Rules"),": Policies are defined with a ",(0,a.kt)("inlineCode",{parentName:"li"},"p")," prefix, specifying roles (",(0,a.kt)("inlineCode",{parentName:"li"},"sub"),") and their permissions (",(0,a.kt)("inlineCode",{parentName:"li"},"act"),") on menu items (",(0,a.kt)("inlineCode",{parentName:"li"},"obj"),"), along with the rule's effect (",(0,a.kt)("inlineCode",{parentName:"li"},"eft"),"), where ",(0,a.kt)("inlineCode",{parentName:"li"},"allow")," indicates permission is granted, and ",(0,a.kt)("inlineCode",{parentName:"li"},"deny")," indicates it is denied.")),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"p, ROLE_ROOT, SystemMenu, read, allow")," means the ",(0,a.kt)("inlineCode",{parentName:"li"},"ROLE_ROOT")," role has read access to the ",(0,a.kt)("inlineCode",{parentName:"li"},"SystemMenu")," menu item."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"p, ROLE_ROOT, UserMenu, read, deny")," means the ",(0,a.kt)("inlineCode",{parentName:"li"},"ROLE_ROOT")," role is denied read access to the ",(0,a.kt)("inlineCode",{parentName:"li"},"UserMenu")," menu item.")),(0,a.kt)("h4",{id:"13-roles-and-user-associations"},"1.3 Roles and User Associations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Role Inheritance"),": User-role relationships and role hierarchies are defined with a ",(0,a.kt)("inlineCode",{parentName:"li"},"g")," prefix. This allows users to inherit permissions from one or multiple roles.")),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g, user, ROLE_USER")," means the user ",(0,a.kt)("inlineCode",{parentName:"li"},"user")," is assigned the ",(0,a.kt)("inlineCode",{parentName:"li"},"ROLE_USER")," role."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g, ROLE_ADMIN, ROLE_USER")," means ",(0,a.kt)("inlineCode",{parentName:"li"},"ROLE_ADMIN")," inherits permissions from ",(0,a.kt)("inlineCode",{parentName:"li"},"ROLE_USER"),".")),(0,a.kt)("h4",{id:"14-menu-item-hierarchy"},"1.4 Menu Item Hierarchy"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Menu Relationships"),": Parent-child relationships between menu items are defined with a ",(0,a.kt)("inlineCode",{parentName:"li"},"g2")," prefix, aiding in the construction of a menu's structure.")),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g2, UserSubMenu_allow, UserMenu")," indicates ",(0,a.kt)("inlineCode",{parentName:"li"},"UserSubMenu_allow")," is a submenu of ",(0,a.kt)("inlineCode",{parentName:"li"},"UserMenu"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g2, (NULL), SystemMenu")," indicates ",(0,a.kt)("inlineCode",{parentName:"li"},"SystemMenu")," has no submenu item, meaning it is a top-level menu item.")),(0,a.kt)("h4",{id:"15-menu-permission-inheritance-and-default-rules"},"1.5 Menu Permission Inheritance and Default Rules"),(0,a.kt)("p",null,"When managing menu permissions with jCasbin, the permission relationship between parent and child menus follows specific inheritance rules, with two important default rules:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Inheritance of Parent Menu Permissions"),":"),(0,a.kt)("p",null,"If a parent menu is explicitly granted ",(0,a.kt)("inlineCode",{parentName:"p"},"allow")," permission, all its submenus also default to ",(0,a.kt)("inlineCode",{parentName:"p"},"allow")," permission unless specifically marked as ",(0,a.kt)("inlineCode",{parentName:"p"},"deny"),". This means once a parent menu is accessible, its submenus are also accessible by default."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Handling Parent Menus Without Direct Permission Settings"),":"),(0,a.kt)("p",null,"If a parent menu has no direct permission settings (neither explicitly allowed nor denied) but has at least one submenu explicitly granted ",(0,a.kt)("inlineCode",{parentName:"p"},"allow")," permission, then the parent menu is implicitly considered to have ",(0,a.kt)("inlineCode",{parentName:"p"},"allow")," permission. This ensures users can navigate to these submenus."),(0,a.kt)("h4",{id:"16-special-permission-inheritance-rules"},"1.6 Special Permission Inheritance Rules"),(0,a.kt)("p",null,"Regarding the inheritance of permissions between roles, especially in scenarios involving ",(0,a.kt)("inlineCode",{parentName:"p"},"deny")," permissions, the following rules must be followed to ensure system security and precise control of permissions:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Distinction Between Explicit and Default Denials"),":"),(0,a.kt)("p",null,"If a role, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"ROLE_ADMIN"),", is explicitly denied access to a menu item, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"AdminSubMenu_deny")," (marked as ",(0,a.kt)("inlineCode",{parentName:"p"},"deny"),"), then even if this role is inherited by another role (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"ROLE_ROOT"),"), the inheriting role is not permitted access to the denied menu item. This ensures explicit security policies are not bypassed due to role inheritance."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Inheritance of Default Denial Permissions"),":"),(0,a.kt)("p",null,"Conversely, if a role's denial of access to a menu item (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"UserSubMenu_deny"),") is default (not explicitly marked as ",(0,a.kt)("inlineCode",{parentName:"p"},"deny"),", but because it was not explicitly granted ",(0,a.kt)("inlineCode",{parentName:"p"},"allow"),"), then when this role is inherited by another role (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"ROLE_ADMIN"),"), the inheriting role may override the default ",(0,a.kt)("inlineCode",{parentName:"p"},"deny")," status, allowing access to these menu items."),(0,a.kt)("h4",{id:"17-example-description"},"1.7 Example Description"),(0,a.kt)("p",null,"policy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csv"},"p, ROLE_ROOT, SystemMenu, read, allow\np, ROLE_ROOT, AdminMenu, read, allow\np, ROLE_ROOT, UserMenu, read, deny\np, ROLE_ADMIN, UserMenu, read, allow\np, ROLE_ADMIN, AdminMenu, read, allow\np, ROLE_ADMIN, AdminSubMenu_deny, read, deny\np, ROLE_USER, UserSubMenu_allow, read, allow\n\ng, user, ROLE_USER\ng, admin, ROLE_ADMIN\ng, root, ROLE_ROOT\ng, ROLE_ADMIN, ROLE_USER\n\ng2, UserSubMenu_allow, UserMenu\ng2, UserSubMenu_deny, UserMenu\ng2, UserSubSubMenu, UserSubMenu_allow\ng2, AdminSubMenu_allow, AdminMenu\ng2, AdminSubMenu_deny, AdminMenu\ng2, (NULL), SystemMenu\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"MenuName"),(0,a.kt)("th",{parentName:"tr",align:"center"},"ROLE","_","ROOT"),(0,a.kt)("th",{parentName:"tr",align:"center"},"ROLE","_","ADMIN"),(0,a.kt)("th",{parentName:"tr",align:"center"},"ROLE","_","USER"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"SystemMenu"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u274c"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u274c")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"UserMenu"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u274c"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"UserSubMenu","_","allow"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u274c"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"UserSubSubMenu"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u274c"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"UserSubMenu","_","deny"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u274c"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u274c")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"AdminMenu"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u274c")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"AdminSubMenu","_","allow"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u274c")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"AdminSubMenu","_","deny"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u274c"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u274c")))),(0,a.kt)("h3",{id:"2--menu-permission-control"},"2.  Menu Permission Control"),(0,a.kt)("p",null,"The list of all menu items accessible by a given username can be identified through the ",(0,a.kt)("inlineCode",{parentName:"p"},"findAccessibleMenus()")," function available in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jcasbin/jcasbin-menu-permission/blob/master/src/main/java/org/casbin/service/MenuService.java"},"MenuService"),". To check whether a specific user has the rights to access a designated menu item, the ",(0,a.kt)("inlineCode",{parentName:"p"},"checkMenuAccess()")," method can be utilized. This approach ensures that menu permissions are effectively controlled, leveraging jCasbin's capabilities to manage access rights efficiently."))}u.isMDXComponent=!0}}]);