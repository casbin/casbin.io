"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[4130],{8215:function(e,a,l){var t=l(7294);a.Z=function(e){var a=e.children,l=e.hidden,r=e.className;return t.createElement("div",{role:"tabpanel",hidden:l,className:r},a)}},5064:function(e,a,l){l.d(a,{Z:function(){return u}});var t=l(3117),r=l(7294),s=l(2389),n=l(9443);var o=function(){var e=(0,r.useContext)(n.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},d=l(9558),p=l(6010),i="tabItem_1uMI";function m(e){var a,l,t,s=e.lazy,n=e.block,m=e.defaultValue,u=e.values,c=e.groupId,k=e.className,b=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"string"==typeof e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=u?u:b.map((function(e){var a=e.props;return{value:a.value,label:a.label}})),g=(0,d.lx)(N,(function(e,a){return e.value===a.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var T=null===m?m:null!=(a=null!=m?m:null==(l=b.find((function(e){return e.props.default})))?void 0:l.props.value)?a:null==(t=b[0])?void 0:t.props.value;if(null!==T&&!N.some((function(e){return e.value===T})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+T+'" but none of its children has the corresponding value. Available values are: '+N.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=o(),y=v.tabGroupChoices,h=v.setTabGroupChoices,f=(0,r.useState)(T),x=f[0],P=f[1],I=[],_=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=c){var F=y[c];null!=F&&F!==x&&N.some((function(e){return e.value===F}))&&P(F)}var U=function(e){var a=e.currentTarget,l=I.indexOf(a),t=N[l].value;t!==x&&(_(a),P(t),null!=c&&h(c,t))},Z=function(e){var a,l=null;switch(e.key){case"ArrowRight":var t=I.indexOf(e.currentTarget)+1;l=I[t]||I[0];break;case"ArrowLeft":var r=I.indexOf(e.currentTarget)-1;l=I[r]||I[I.length-1]}null==(a=l)||a.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":n},k)},N.map((function(e){var a=e.value,l=e.label;return r.createElement("li",{role:"tab",tabIndex:x===a?0:-1,"aria-selected":x===a,className:(0,p.Z)("tabs__item",i,{"tabs__item--active":x===a}),key:a,ref:function(e){return I.push(e)},onKeyDown:Z,onFocus:U,onClick:U},null!=l?l:a)}))),s?(0,r.cloneElement)(b.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},b.map((function(e,a){return(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==x})}))))}function u(e){var a=(0,s.Z)();return r.createElement(m,(0,t.Z)({key:String(a)},e))}},4739:function(e,a,l){l.r(a),l.d(a,{frontMatter:function(){return p},contentTitle:function(){return i},metadata:function(){return m},toc:function(){return u},default:function(){return k}});var t=l(3117),r=l(102),s=(l(7294),l(3905)),n=l(5064),o=l(8215),d=["components"],p={id:"rbac-api",title:"RBAC API"},i=void 0,m={unversionedId:"rbac-api",id:"rbac-api",isDocsHomePage:!1,title:"RBAC API",description:"A more friendly API for RBAC. This API is a subset of Management API. The RBAC users could use this API to simplify the code.",source:"@site/docs/RBACAPI.mdx",sourceDirName:".",slug:"/rbac-api",permalink:"/docs/rbac-api",editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/RBACAPI.mdx",tags:[],version:"current",frontMatter:{id:"rbac-api",title:"RBAC API"},sidebar:"docs",previous:{title:"Management API",permalink:"/docs/management-api"},next:{title:"RBAC with Domains API",permalink:"/docs/rbac-with-domains-api"}},u=[{value:"Reference",id:"reference",children:[{value:"<code>GetRolesForUser()</code>",id:"getrolesforuser",children:[],level:3},{value:"<code>GetUsersForRole()</code>",id:"getusersforrole",children:[],level:3},{value:"<code>HasRoleForUser()</code>",id:"hasroleforuser",children:[],level:3},{value:"<code>AddRoleForUser()</code>",id:"addroleforuser",children:[],level:3},{value:"<code>AddRolesForUser()</code>",id:"addrolesforuser",children:[],level:3},{value:"<code>DeleteRoleForUser()</code>",id:"deleteroleforuser",children:[],level:3},{value:"<code>DeleteRolesForUser()</code>",id:"deleterolesforuser",children:[],level:3},{value:"<code>DeleteUser()</code>",id:"deleteuser",children:[],level:3},{value:"<code>DeleteRole()</code>",id:"deleterole",children:[],level:3},{value:"<code>DeletePermission()</code>",id:"deletepermission",children:[],level:3},{value:"<code>AddPermissionForUser()</code>",id:"addpermissionforuser",children:[],level:3},{value:"<code>AddPermissionsForUser()</code>",id:"addpermissionsforuser",children:[],level:3},{value:"<code>DeletePermissionForUser()</code>",id:"deletepermissionforuser",children:[],level:3},{value:"<code>DeletePermissionsForUser()</code>",id:"deletepermissionsforuser",children:[],level:3},{value:"<code>GetPermissionsForUser()</code>",id:"getpermissionsforuser",children:[],level:3},{value:"<code>HasPermissionForUser()</code>",id:"haspermissionforuser",children:[],level:3},{value:"<code>GetImplicitRolesForUser()</code>",id:"getimplicitrolesforuser",children:[],level:3},{value:"<code>GetImplicitUsersForRole()</code>",id:"getimplicitusersforrole",children:[],level:3},{value:"<code>GetImplicitPermissionsForUser()</code>",id:"getimplicitpermissionsforuser",children:[],level:3},{value:"<code>GetNamedImplicitPermissionsForUser()</code>",id:"getnamedimplicitpermissionsforuser",children:[],level:3},{value:"<code>GetDomainsForUser()</code>",id:"getdomainsforuser",children:[],level:3},{value:"<code>GetImplicitResourcesForUser()</code>",id:"getimplicitresourcesforuser",children:[],level:3}],level:2}],c={toc:u};function k(e){var a=e.components,l=(0,r.Z)(e,d);return(0,s.kt)("wrapper",(0,t.Z)({},c,l,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"A more friendly API for RBAC. This API is a subset of Management API. The RBAC users could use this API to simplify the code."),(0,s.kt)("h2",{id:"reference"},"Reference"),(0,s.kt)("p",null,"global variable ",(0,s.kt)("inlineCode",{parentName:"p"},"e")," is Enforcer instance."),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e, err := NewEnforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const e = await newEnforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv')\n"))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$e = new Enforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv');\n"))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e = casbin.Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var e = new Enforcer("path/to/model.conf", "path/to/policy.csv");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let mut e = Enforcer::new("examples/rbac_model.conf", "examples/rbac_policy.csv").await?;\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'Enforcer e = new Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv");\n')))),(0,s.kt)("h3",{id:"getrolesforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetRolesForUser()")),(0,s.kt)("p",null,"GetRolesForUser gets the roles that a user has."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'res := e.GetRolesForUser("alice")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const res = await e.getRolesForUser('alice')\n"))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$res = $e->getRolesForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'roles = e.get_roles_for_user("alice")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var res = e.GetRolesForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let roles = e.get_roles_for_user("alice", None); // No domain\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'List<String> res = e.getRolesForUser("alice");\n')))),(0,s.kt)("h3",{id:"getusersforrole"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetUsersForRole()")),(0,s.kt)("p",null,"GetUsersForRole gets the users that has a role."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'res := e.GetUsersForRole("data1_admin")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const res = await e.getUsersForRole('data1_admin')\n"))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$res = $e->getUsersForRole("data1_admin");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'users = e.get_users_for_role("data1_admin")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var res = e.GetUsersForRole("data1_admin");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let users = e.get_users_for_role("data1_admin", None); // No domain\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'List<String> res = e.getUsersForRole("data1_admin");\n')))),(0,s.kt)("h3",{id:"hasroleforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"HasRoleForUser()")),(0,s.kt)("p",null,"HasRoleForUser determines whether a user has a role."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'res := e.HasRoleForUser("alice", "data1_admin")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const res = await e.hasRoleForUser('alice', 'data1_admin')\n"))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$res = $e->hasRoleForUser("alice", "data1_admin");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'has = e.has_role_for_user("alice", "data1_admin")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var res = e.HasRoleForUser("alice", "data1_admin");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let has = e.has_role_for_user("alice", "data1_admin", None); // No domain\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'boolean res = e.hasRoleForUser("alice", "data1_admin");\n')))),(0,s.kt)("h3",{id:"addroleforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"AddRoleForUser()")),(0,s.kt)("p",null,"AddRoleForUser adds a role for a user.\nReturns false if the user already has the role (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.AddRoleForUser("alice", "data2_admin")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.addRoleForUser('alice', 'data2_admin')\n"))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-PHP"},'$e->addRoleForUser("alice", "data2_admin");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e.add_role_for_user("alice", "data2_admin")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddRoleForUser("alice", "data2_admin");\nor\nvar added = await e.AddRoleForUserAsync("alice", "data2_admin");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_role_for_user("alice", "data2_admin", None).await?; // No domain\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addRoleForUser("alice", "data2_admin");\n')))),(0,s.kt)("h3",{id:"addrolesforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"AddRolesForUser()")),(0,s.kt)("p",null,"AddRolesForUser adds multiple roles for a user.\nReturns false if the user already has one of these roles (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'var roles = []string{"data2_admin", "data1_admin"}\ne.AddRolesForUser("alice", roles)\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'const roles = ["data1_admin", "data2_admin"];\nroles.map((role) => e.addRoleForUser("alice", role));\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let roles = vec!["data1_admin".to_owned(), "data2_admin".to_owned()];\nlet all_added = e.add_roles_for_user("alice", roles, None).await?; // No domain\n')))),(0,s.kt)("h3",{id:"deleteroleforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeleteRoleForUser()")),(0,s.kt)("p",null,"DeleteRoleForUser deletes a role for a user.\nReturns false if the user does not have the role (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.DeleteRoleForUser("alice", "data1_admin")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deleteRoleForUser('alice', 'data1_admin')\n"))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deleteRoleForUser("alice", "data1_admin");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_role_for_user("alice", "data1_admin")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeleteRoleForUser("alice", "data1_admin");\nor\nvar deleted = await e.DeleteRoleForUser("alice", "data1_admin");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_role_for_user("alice", "data1_admin", None).await?; // No domain\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'boolean deleted = e.deleteRoleForUser("alice", "data1_admin");\n')))),(0,s.kt)("h3",{id:"deleterolesforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeleteRolesForUser()")),(0,s.kt)("p",null,"DeleteRolesForUser deletes all roles for a user.\nReturns false if the user does not have any roles (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.DeleteRolesForUser("alice")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deleteRolesForUser('alice')\n"))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deleteRolesForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_roles_for_user("alice")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deletedAtLeastOne = e.DeleteRolesForUser("alice");\nor\nvar deletedAtLeastOne = await e.DeleteRolesForUserAsync("alice");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted_at_least_one = e.delete_roles_for_user("alice", None).await?; // No domain\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'boolean deletedAtLeastOne = e.deleteRolesForUser("alice");\n')))),(0,s.kt)("h3",{id:"deleteuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeleteUser()")),(0,s.kt)("p",null,"DeleteUser deletes a user.\nReturns false if the user does not exist (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'e.DeleteUser("alice")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deleteUser('alice')\n"))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deleteUser("alice");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_user("alice")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeleteUser("alice");\nor\nvar deleted = await e.DeleteUserAsync("alice");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_user("alice").await?;\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'boolean deleted = e.deleteUser("alice");\n')))),(0,s.kt)("h3",{id:"deleterole"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeleteRole()")),(0,s.kt)("p",null,"DeleteRole deletes a role."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.DeleteRole("data2_admin")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'await e.deleteRole("data2_admin")\n'))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deleteRole("data2_admin");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_role("data2_admin")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeleteRole("data2_admin");\nor\nvar deleted = await e.DeleteRoleAsync("data2_admin");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_role("data2_admin").await?;\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'e.deleteRole("data2_admin");\n')))),(0,s.kt)("h3",{id:"deletepermission"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeletePermission()")),(0,s.kt)("p",null,"DeletePermission deletes a permission.\nReturns false if the permission does not exist (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.DeletePermission("read")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deletePermission('read')\n"))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deletePermission("read");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_permission("read")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeletePermission("read");\nor\nvar deleted = await e.DeletePermissionAsync("read");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_permission(vec!["read".to_owned()]).await?;\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'boolean deleted = e.deletePermission("read");\n')))),(0,s.kt)("h3",{id:"addpermissionforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"AddPermissionForUser()")),(0,s.kt)("p",null,"AddPermissionForUser adds a permission for a user or role.\nReturns false if the user or role already has the permission (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.AddPermissionForUser("bob", "read")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.addPermissionForUser('bob', 'read')\n"))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->addPermissionForUser("bob", "read");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e.add_permission_for_user("bob", "read")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddPermissionForUser("bob", "read");\nor\nvar added = await e.AddPermissionForUserAsync("bob", "read");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_permission_for_user("bob", vec!["read".to_owned()]).await?;\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addPermissionForUser("bob", "read");\n')))),(0,s.kt)("h3",{id:"addpermissionsforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"AddPermissionsForUser()")),(0,s.kt)("p",null,"AddPermissionsForUser adds multiple permissions for a user or role.\nReturns false if the user or role already has one of the permissions (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'var permissions = [][]string{{"data1", "read"},{"data2","write"}}\nfor i := 0; i < len(permissions); i++ {\n    e.AddPermissionsForUser("alice", permissions[i])\n}\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'const permissions = [\n    ["data1", "read"],\n    ["data2", "write"],\n];\n\npermissions.map((permission) => e.addPermissionForUser("bob", ...permission));\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let permissions = vec![\n    vec!["data1".to_owned(), "read".to_owned()],\n    vec!["data2".to_owned(), "write".to_owned()],\n];\n\nlet all_added = e.add_permissions_for_user("bob", permissions).await?;\n')))),(0,s.kt)("h3",{id:"deletepermissionforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeletePermissionForUser()")),(0,s.kt)("p",null,"DeletePermissionForUser deletes a permission for a user or role.\nReturns false if the user or role does not have the permission (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.DeletePermissionForUser("bob", "read")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'await e.deletePermissionForUser("bob", "read")\n'))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deletePermissionForUser("bob", "read");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_permission_for_user("bob", "read")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeletePermissionForUser("bob", "read");\nor\nvar deleted = await e.DeletePermissionForUserAsync("bob", "read");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_permission_for_user("bob", vec!["read".to_owned()]).await?;\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'boolean deleted = e.deletePermissionForUser("bob", "read");\n')))),(0,s.kt)("h3",{id:"deletepermissionsforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeletePermissionsForUser()")),(0,s.kt)("p",null,"DeletePermissionsForUser deletes permissions for a user or role.\nReturns false if the user or role does not have any permissions (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.DeletePermissionsForUser("bob")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deletePermissionsForUser('bob')\n"))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deletePermissionsForUser("bob");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_permissions_for_user("bob")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deletedAtLeastOne = e.DeletePermissionsForUser("bob");\nor\nvar deletedAtLeastOne = await e.DeletePermissionsForUserAsync("bob");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted_at_least_one = e.delete_permissions_for_user("bob").await?;\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'boolean deletedAtLeastOne = e.deletePermissionForUser("bob");\n')))),(0,s.kt)("h3",{id:"getpermissionsforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetPermissionsForUser()")),(0,s.kt)("p",null,"GetPermissionsForUser gets permissions for a user or role."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.GetPermissionsForUser("bob")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.getPermissionsForUser('bob')\n"))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->getPermissionsForUser("bob");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e.get_permissions_for_user("bob")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var permissions = e.GetPermissionsForUser("bob");\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> permissions = e.getPermissionsForUser("bob");\n')))),(0,s.kt)("h3",{id:"haspermissionforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"HasPermissionForUser()")),(0,s.kt)("p",null,"HasPermissionForUser determines whether a user has a permission."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.HasPermissionForUser("alice", []string{"read"})\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.hasPermissionForUser('alice', 'read')\n"))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->hasPermissionForUser("alice", []string{"read"});\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'has = e.has_permission_for_user("alice", "read")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var has = e.HasPermissionForUser("bob", "read");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let has = e.has_permission_for_user("alice", vec!["data1".to_owned(), "read".to_owned()]);\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'boolean has = e.hasPermissionForUser("alice", "read");\n')))),(0,s.kt)("h3",{id:"getimplicitrolesforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetImplicitRolesForUser()")),(0,s.kt)("p",null,"GetImplicitRolesForUser gets implicit roles that a user has.\nCompared to GetRolesForUser(), this function retrieves indirect roles besides direct roles."),(0,s.kt)("p",null,"For example:",(0,s.kt)("br",{parentName:"p"}),"\n","g, alice, role:admin",(0,s.kt)("br",{parentName:"p"}),"\n","g, role:admin, role:user  "),(0,s.kt)("p",null,'GetRolesForUser("alice") can only get: ','["role:admin"]',".",(0,s.kt)("br",{parentName:"p"}),"\n",'But GetImplicitRolesForUser("alice") will get: ','["role:admin", "role:user"]',"."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.GetImplicitRolesForUser("alice")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'await e.getImplicitRolesForUser("alice")\n'))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->getImplicitRolesForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e.get_implicit_roles_for_user("alice")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var implicitRoles = e.GetImplicitRolesForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'e.get_implicit_roles_for_user("alice", None); // No domain\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'List<String> implicitRoles = e.getImplicitRolesForUser("alice");\n')))),(0,s.kt)("h3",{id:"getimplicitusersforrole"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetImplicitUsersForRole()")),(0,s.kt)("p",null,"GetImplicitUsersForRole gets all users inheriting the role.\nCompared to GetUsersForRole(), this function retrieves indirect users."),(0,s.kt)("p",null,"For example:",(0,s.kt)("br",{parentName:"p"}),"\n","g, alice, role:admin",(0,s.kt)("br",{parentName:"p"}),"\n","g, role:admin, role:user  "),(0,s.kt)("p",null,'GetUsersForRole("role:user") can only get: ','["role:admin"]',".",(0,s.kt)("br",{parentName:"p"}),"\n",'But GetImplicitUesrsForRole("role:user") will get: ','["role:admin", "alice"]',"."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'users := e.GetImplicitUsersForRole("role:user")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'const users = e.getImplicitUsersForRole("role:user");\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'List<String> users = e.getImplicitUsersForRole("role:user");\n')))),(0,s.kt)("h3",{id:"getimplicitpermissionsforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetImplicitPermissionsForUser()")),(0,s.kt)("p",null,"GetImplicitPermissionsForUser gets implicit permissions for a user or role.",(0,s.kt)("br",{parentName:"p"}),"\n","Compared to GetPermissionsForUser(), this function retrieves permissions for inherited roles.  "),(0,s.kt)("p",null,"For example:",(0,s.kt)("br",{parentName:"p"}),"\n","p, admin, data1, read",(0,s.kt)("br",{parentName:"p"}),"\n","p, alice, data2, read",(0,s.kt)("br",{parentName:"p"}),"\n","g, alice, admin  "),(0,s.kt)("p",null,'GetPermissionsForUser("alice") can only get: [','["alice", "data2", "read"]',"].",(0,s.kt)("br",{parentName:"p"}),"\n",'But GetImplicitPermissionsForUser("alice") will get: [','["admin", "data1", "read"]',", ",'["alice", "data2", "read"]',"]."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.GetImplicitPermissionsForUser("alice")\n'))),(0,s.kt)(o.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'await e.getImplicitPermissionsForUser("alice")\n'))),(0,s.kt)(o.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->getImplicitPermissionsForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e.get_implicit_permissions_for_user("alice")\n'))),(0,s.kt)(o.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var implicitPermissions = e.GetImplicitPermissionsForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'e.get_implicit_permissions_for_user("alice", None); // No domain\n'))),(0,s.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> implicitPermissions = e.getImplicitPermissionsForUser("alice");\n')))),(0,s.kt)("h3",{id:"getnamedimplicitpermissionsforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetNamedImplicitPermissionsForUser()")),(0,s.kt)("p",null,"GetNamedImplicitPermissionsForUser gets implicit permissions for a user or role by named policy\nCompared to GetImplicitPermissionsForUser(), this function allow you to specify the policy name."),(0,s.kt)("p",null,"For example:\np, admin, data1, read\np2, admin, create\ng, alice, admin"),(0,s.kt)("p",null,'GetImplicitPermissionsForUser("alice") only get: [','["admin", "data1", "read"]','], whose policy is default "p"'),(0,s.kt)("p",null,'But you can specify the policy as "p2" to get: [','["admin", "create"]','] by GetNamedImplicitPermissionsForUser("p2","alice")'),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.GetNamedImplicitPermissionsForUser("p2","alice")\n'))),(0,s.kt)(o.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'e.get_named_implicit_permissions_for_user("p2", "alice")\n')))),(0,s.kt)("h3",{id:"getdomainsforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetDomainsForUser()")),(0,s.kt)("p",null,"GetDomainsForUser gets all domains which a user has."),(0,s.kt)("p",null,"For example:\np, admin, domain1, data1, read\np, admin, domain2, data2, read\np, admin, domain2, data2, write\ng, alice, admin, domain1\ng, alice, admin, domain2"),(0,s.kt)("p",null,'GetDomainsForUser("alice") could get ','["domain1", "domain2"]'),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'result, err := e.GetDomainsForUser("alice")\n')))),(0,s.kt)("h3",{id:"getimplicitresourcesforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetImplicitResourcesForUser()")),(0,s.kt)("p",null,"GetImplicitResourcesForUser returns all policies that should be true for user."),(0,s.kt)("p",null,"For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, data1, read\np, bob, data2, write\np, data2_admin, data2, read\np, data2_admin, data2, write\n\ng, alice, data2_admin\n")),(0,s.kt)("p",null,'GetImplicitResourcesForUser("alice") will return\n',(0,s.kt)("inlineCode",{parentName:"p"},"[[alice data1 read] [alice data2 read] [alice data2 write]]")),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'resources, err := e.GetImplicitResourcesForUser("alice")\n')))))}k.isMDXComponent=!0}}]);