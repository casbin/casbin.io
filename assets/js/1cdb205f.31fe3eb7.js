"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[4130],{3905:function(e,a,l){l.d(a,{Zo:function(){return p},kt:function(){return c}});var r=l(7294);function t(e,a,l){return a in e?Object.defineProperty(e,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[a]=l,e}function s(e,a){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),l.push.apply(l,r)}return l}function n(e){for(var a=1;a<arguments.length;a++){var l=null!=arguments[a]?arguments[a]:{};a%2?s(Object(l),!0).forEach((function(a){t(e,a,l[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):s(Object(l)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(l,a))}))}return e}function o(e,a){if(null==e)return{};var l,r,t=function(e,a){if(null==e)return{};var l,r,t={},s=Object.keys(e);for(r=0;r<s.length;r++)l=s[r],a.indexOf(l)>=0||(t[l]=e[l]);return t}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)l=s[r],a.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(t[l]=e[l])}return t}var u=r.createContext({}),d=function(e){var a=r.useContext(u),l=a;return e&&(l="function"==typeof e?e(a):n(n({},a),e)),l},p=function(e){var a=d(e.components);return r.createElement(u.Provider,{value:a},e.children)},i={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var l=e.components,t=e.mdxType,s=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(l),c=t,k=m["".concat(u,".").concat(c)]||m[c]||i[c]||s;return l?r.createElement(k,n(n({ref:a},p),{},{components:l})):r.createElement(k,n({ref:a},p))}));function c(e,a){var l=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var s=l.length,n=new Array(s);n[0]=m;var o={};for(var u in a)hasOwnProperty.call(a,u)&&(o[u]=a[u]);o.originalType=e,o.mdxType="string"==typeof e?e:t,n[1]=o;for(var d=2;d<s;d++)n[d]=l[d];return r.createElement.apply(null,n)}return r.createElement.apply(null,l)}m.displayName="MDXCreateElement"},8215:function(e,a,l){var r=l(7294);a.Z=function(e){var a=e.children,l=e.hidden,t=e.className;return r.createElement("div",{role:"tabpanel",hidden:l,className:t},a)}},5064:function(e,a,l){l.d(a,{Z:function(){return m}});var r=l(3117),t=l(7294),s=l(2389),n=l(9443);var o=function(){var e=(0,t.useContext)(n.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},u=l(9558),d=l(6010),p="tabItem_1uMI";function i(e){var a,l,r,s=e.lazy,n=e.block,i=e.defaultValue,m=e.values,c=e.groupId,k=e.className,v=t.Children.map(e.children,(function(e){if((0,t.isValidElement)(e)&&"string"==typeof e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=m?m:v.map((function(e){var a=e.props;return{value:a.value,label:a.label}})),b=(0,u.lx)(g,(function(e,a){return e.value===a.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var N=null===i?i:null!=(a=null!=i?i:null==(l=v.find((function(e){return e.props.default})))?void 0:l.props.value)?a:null==(r=v[0])?void 0:r.props.value;if(null!==N&&!g.some((function(e){return e.value===N})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var T=o(),f=T.tabGroupChoices,h=T.setTabGroupChoices,y=(0,t.useState)(N),x=y[0],F=y[1],I=[],U=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=c){var P=f[c];null!=P&&P!==x&&g.some((function(e){return e.value===P}))&&F(P)}var Z=function(e){var a=e.currentTarget,l=I.indexOf(a),r=g[l].value;r!==x&&(U(a),F(r),null!=c&&h(c,r))},R=function(e){var a,l=null;switch(e.key){case"ArrowRight":var r=I.indexOf(e.currentTarget)+1;l=I[r]||I[0];break;case"ArrowLeft":var t=I.indexOf(e.currentTarget)-1;l=I[t]||I[I.length-1]}null==(a=l)||a.focus()};return t.createElement("div",{className:"tabs-container"},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,d.Z)("tabs",{"tabs--block":n},k)},g.map((function(e){var a=e.value,l=e.label;return t.createElement("li",{role:"tab",tabIndex:x===a?0:-1,"aria-selected":x===a,className:(0,d.Z)("tabs__item",p,{"tabs__item--active":x===a}),key:a,ref:function(e){return I.push(e)},onKeyDown:R,onFocus:Z,onClick:Z},null!=l?l:a)}))),s?(0,t.cloneElement)(v.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):t.createElement("div",{className:"margin-vert--md"},v.map((function(e,a){return(0,t.cloneElement)(e,{key:a,hidden:e.props.value!==x})}))))}function m(e){var a=(0,s.Z)();return t.createElement(i,(0,r.Z)({key:String(a)},e))}},9443:function(e,a,l){var r=(0,l(7294).createContext)(void 0);a.Z=r},4739:function(e,a,l){l.r(a),l.d(a,{frontMatter:function(){return d},contentTitle:function(){return p},metadata:function(){return i},toc:function(){return m},default:function(){return k}});var r=l(3117),t=l(102),s=(l(7294),l(3905)),n=l(5064),o=l(8215),u=["components"],d={id:"rbac-api",title:"RBAC API"},p=void 0,i={unversionedId:"rbac-api",id:"rbac-api",isDocsHomePage:!1,title:"RBAC API",description:"A more friendly API for RBAC. This API is a subset of Management API. The RBAC users could use this API to simplify the code.",source:"@site/docs/RBACAPI.mdx",sourceDirName:".",slug:"/rbac-api",permalink:"/docs/rbac-api",editUrl:"https://github.com/casbin/casbin-website/edit/master/docs/docs/RBACAPI.mdx",tags:[],version:"current",frontMatter:{id:"rbac-api",title:"RBAC API"},sidebar:"docs",previous:{title:"Management API",permalink:"/docs/management-api"},next:{title:"RoleManager API",permalink:"/docs/rolemanager-api"}},m=[{value:"Reference",id:"reference",children:[{value:"<code>GetRolesForUser()</code>",id:"getrolesforuser",children:[],level:3},{value:"<code>GetUsersForRole()</code>",id:"getusersforrole",children:[],level:3},{value:"<code>HasRoleForUser()</code>",id:"hasroleforuser",children:[],level:3},{value:"<code>AddRoleForUser()</code>",id:"addroleforuser",children:[],level:3},{value:"<code>AddRolesForUser()</code>",id:"addrolesforuser",children:[],level:3},{value:"<code>DeleteRoleForUser()</code>",id:"deleteroleforuser",children:[],level:3},{value:"<code>DeleteRolesForUser()</code>",id:"deleterolesforuser",children:[],level:3},{value:"<code>DeleteUser()</code>",id:"deleteuser",children:[],level:3},{value:"<code>DeleteRole()</code>",id:"deleterole",children:[],level:3},{value:"<code>DeletePermission()</code>",id:"deletepermission",children:[],level:3},{value:"<code>AddPermissionForUser()</code>",id:"addpermissionforuser",children:[],level:3},{value:"<code>AddPermissionsForUser()</code>",id:"addpermissionsforuser",children:[],level:3},{value:"<code>DeletePermissionForUser()</code>",id:"deletepermissionforuser",children:[],level:3},{value:"<code>DeletePermissionsForUser()</code>",id:"deletepermissionsforuser",children:[],level:3},{value:"<code>GetPermissionsForUser()</code>",id:"getpermissionsforuser",children:[],level:3},{value:"<code>HasPermissionForUser()</code>",id:"haspermissionforuser",children:[],level:3},{value:"<code>GetImplicitRolesForUser()</code>",id:"getimplicitrolesforuser",children:[],level:3},{value:"<code>GetImplicitUsersForRole()</code>",id:"getimplicitusersforrole",children:[],level:3},{value:"<code>GetImplicitPermissionsForUser()</code>",id:"getimplicitpermissionsforuser",children:[],level:3},{value:"<code>GetDomainsForUser()</code>",id:"getdomainsforuser",children:[],level:3}],level:2}],c={toc:m};function k(e){var a=e.components,l=(0,t.Z)(e,u);return(0,s.kt)("wrapper",(0,r.Z)({},c,l,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"A more friendly API for RBAC. This API is a subset of Management API. The RBAC users could use this API to simplify the code. "),(0,s.kt)("h2",{id:"reference"},"Reference"),(0,s.kt)("p",null,"global variable ",(0,s.kt)("inlineCode",{parentName:"p"},"e")," is Enforcer instance."),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e, err := NewEnforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const e = await newEnforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv')\n"))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$e = new Enforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv');\n"))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var e = new Enforcer("path/to/model.conf", "path/to/policy.csv");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let mut e = Enforcer::new("examples/rbac_model.conf", "examples/rbac_policy.csv").await?;\n')))),(0,s.kt)("h3",{id:"getrolesforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetRolesForUser()")),(0,s.kt)("p",null,"GetRolesForUser gets the roles that a user has."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'res := e.GetRolesForUser("alice")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const res = await e.getRolesForUser('alice')\n"))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$res = $e->getRolesForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var res = e.GetRolesForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let roles = e.get_roles_for_user("alice", None); // No domain\n')))),(0,s.kt)("h3",{id:"getusersforrole"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetUsersForRole()")),(0,s.kt)("p",null,"GetUsersForRole gets the users that has a role."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'res := e.GetUsersForRole("data1_admin")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const res = await e.getUsersForRole('data1_admin')\n"))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$res = $e->getUsersForRole("data1_admin");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var res = e.GetUsersForRole("data1_admin");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let users = e.get_users_for_role("data1_admin", None); // No domain\n')))),(0,s.kt)("h3",{id:"hasroleforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"HasRoleForUser()")),(0,s.kt)("p",null,"HasRoleForUser determines whether a user has a role."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'res := e.HasRoleForUser("alice", "data1_admin")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const res = await e.hasRoleForUser('alice', 'data1_admin')\n"))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$res = $e->hasRoleForUser("alice", "data1_admin");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var res = e.HasRoleForUser("alice", "data1_admin");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let has = e.has_role_for_user("alice", "data1_admin", None); // No domain\n')))),(0,s.kt)("h3",{id:"addroleforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"AddRoleForUser()")),(0,s.kt)("p",null,"AddRoleForUser adds a role for a user.\nReturns false if the user already has the role (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.AddRoleForUser("alice", "data2_admin")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.addRoleForUser('alice', 'data2_admin')\n"))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-PHP"},'$e->addRoleForUser("alice", "data2_admin");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddRoleForUser("alice", "data2_admin");\nor\nvar added = await e.AddRoleForUserAsync("alice", "data2_admin");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_role_for_user("alice", "data2_admin", None).await?; // No domain\n')))),(0,s.kt)("h3",{id:"addrolesforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"AddRolesForUser()")),(0,s.kt)("p",null,"AddRolesForUser adds multiple roles for a user.\nReturns false if the user already has one of these roles (aka not affected)."),(0,s.kt)("p",null,"For example: "),(0,s.kt)(n.Z,{defaultValue:"rust",values:[{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let roles = vec!["data1_admin".to_owned(), "data2_admin".to_owned()];\nlet all_added = e.add_roles_for_user("alice", roles, None).await?; // No domain\n')))),(0,s.kt)("h3",{id:"deleteroleforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeleteRoleForUser()")),(0,s.kt)("p",null,"DeleteRoleForUser deletes a role for a user.\nReturns false if the user does not have the role (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.DeleteRoleForUser("alice", "data1_admin")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deleteRoleForUser('alice', 'data1_admin')\n"))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deleteRoleForUser("alice", "data1_admin");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeleteRoleForUser("alice", "data1_admin");\nor\nvar deleted = await e.DeleteRoleForUser("alice", "data1_admin");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_role_for_user("alice", "data1_admin", None).await?; // No domain\n')))),(0,s.kt)("h3",{id:"deleterolesforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeleteRolesForUser()")),(0,s.kt)("p",null,"DeleteRolesForUser deletes all roles for a user.\nReturns false if the user does not have any roles (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.DeleteRolesForUser("alice")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deleteRolesForUser('alice')\n"))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deleteRolesForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deletedAtLeastOne = e.DeleteRolesForUser("alice");\nor\nvar deletedAtLeastOne = await e.DeleteRolesForUserAsync("alice");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted_at_least_one = e.delete_roles_for_user("alice", None).await?; // No domain\n')))),(0,s.kt)("h3",{id:"deleteuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeleteUser()")),(0,s.kt)("p",null,"DeleteUser deletes a user.\nReturns false if the user does not exist (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'e.DeleteUser("alice")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deleteUser('alice')\n"))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deleteUser("alice");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeleteUser("alice");\nor\nvar deleted = await e.DeleteUserAsync("alice");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_user("alice").await?;\n')))),(0,s.kt)("h3",{id:"deleterole"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeleteRole()")),(0,s.kt)("p",null,"DeleteRole deletes a role."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.DeleteRole("data2_admin")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'await e.deleteRole("data2_admin")\n'))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deleteRole("data2_admin");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeleteRole("data2_admin");\nor\nvar deleted = await e.DeleteRoleAsync("data2_admin");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_role("data2_admin").await?;\n')))),(0,s.kt)("h3",{id:"deletepermission"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeletePermission()")),(0,s.kt)("p",null,"DeletePermission deletes a permission.\nReturns false if the permission does not exist (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.DeletePermission("read")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deletePermission('read')\n"))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deletePermission("read");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeletePermission("read");\nor\nvar deleted = await e.DeletePermissionAsync("read");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_permission(vec!["read".to_owned()]).await?;\n')))),(0,s.kt)("h3",{id:"addpermissionforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"AddPermissionForUser()")),(0,s.kt)("p",null,"AddPermissionForUser adds a permission for a user or role.\nReturns false if the user or role already has the permission (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.AddPermissionForUser("bob", "read")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.addPermissionForUser('bob', 'read')\n"))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->addPermissionForUser("bob", "read");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddPermissionForUser("bob", "read");\nor\nvar added = await e.AddPermissionForUserAsync("bob", "read");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_permission_for_user("bob", vec!["read".to_owned()]).await?;\n')))),(0,s.kt)("h3",{id:"addpermissionsforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"AddPermissionsForUser()")),(0,s.kt)("p",null,"AddPermissionsForUser adds multiple permissions for a user or role.\nReturns false if the user or role already has one of the permissions (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"rust",values:[{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let permissions = vec![\n    vec!["data1".to_owned(), "read".to_owned()],\n    vec!["data2".to_owned(), "write".to_owned()],\n];\n\nlet all_added = e.add_permissions_for_user("bob", permissions).await?;\n')))),(0,s.kt)("h3",{id:"deletepermissionforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeletePermissionForUser()")),(0,s.kt)("p",null,"DeletePermissionForUser deletes a permission for a user or role.\nReturns false if the user or role does not have the permission (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.DeletePermissionForUser("bob", "read")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'await e.deletePermissionForUser("bob", "read")\n'))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deletePermissionForUser("bob", "read");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeletePermissionForUser("bob", "read");\nor\nvar deleted = await e.DeletePermissionForUserAsync("bob", "read");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_permission_for_user("bob", vec!["read".to_owned()]).await?;\n')))),(0,s.kt)("h3",{id:"deletepermissionsforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"DeletePermissionsForUser()")),(0,s.kt)("p",null,"DeletePermissionsForUser deletes permissions for a user or role.\nReturns false if the user or role does not have any permissions (aka not affected)."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.DeletePermissionsForUser("bob")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deletePermissionsForUser('bob')\n"))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->deletePermissionsForUser("bob");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var deletedAtLeastOne = e.DeletePermissionsForUser("bob");\nor\nvar deletedAtLeastOne = await e.DeletePermissionsForUserAsync("bob");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted_at_least_one = e.delete_permissions_for_user("bob").await?;\n')))),(0,s.kt)("h3",{id:"getpermissionsforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetPermissionsForUser()")),(0,s.kt)("p",null,"GetPermissionsForUser gets permissions for a user or role."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.GetPermissionsForUser("bob")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.getPermissionsForUser('bob')\n"))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->getPermissionsForUser("bob");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var permissions = e.GetPermissionsForUser("bob");\n')))),(0,s.kt)("h3",{id:"haspermissionforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"HasPermissionForUser()")),(0,s.kt)("p",null,"HasPermissionForUser determines whether a user has a permission."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.HasPermissionForUser("alice", []string{"read"})\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.hasPermissionForUser('alice', 'read')\n"))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->hasPermissionForUser("alice", []string{"read"});\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var has = e.HasPermissionForUser("bob", "read");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let has = e.has_permission_for_user("alice", vec!["data1".to_owned(), "read".to_owned()]);\n')))),(0,s.kt)("h3",{id:"getimplicitrolesforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetImplicitRolesForUser()")),(0,s.kt)("p",null,"GetImplicitRolesForUser gets implicit roles that a user has.\nCompared to GetRolesForUser(), this function retrieves indirect roles besides direct roles."),(0,s.kt)("p",null,"For example:",(0,s.kt)("br",{parentName:"p"}),"\n","g, alice, role:admin",(0,s.kt)("br",{parentName:"p"}),"\n","g, role:admin, role:user  "),(0,s.kt)("p",null,'GetRolesForUser("alice") can only get: ','["role:admin"]',".",(0,s.kt)("br",{parentName:"p"}),"\n",'But GetImplicitRolesForUser("alice") will get: ','["role:admin", "role:user"]',"."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.GetImplicitRolesForUser("alice")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'await e.getImplicitRolesForUser("alice")\n'))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->getImplicitRolesForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var implicitRoles = e.GetImplicitRolesForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'e.get_implicit_roles_for_user("alice", None); // No domain\n')))),(0,s.kt)("h3",{id:"getimplicitusersforrole"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetImplicitUsersForRole()")),(0,s.kt)("p",null,"GetImplicitUsersForRole gets all users inheriting the role.\nCompared to GetUsersForRole(), this function retrieves indirect users."),(0,s.kt)("p",null,"For example:",(0,s.kt)("br",{parentName:"p"}),"\n","g, alice, role:admin",(0,s.kt)("br",{parentName:"p"}),"\n","g, role:admin, role:user  "),(0,s.kt)("p",null,'GetUsersForRole("role:user") can only get: ','["role:admin"]',".",(0,s.kt)("br",{parentName:"p"}),"\n",'But GetImplicitUesrsForRole("role:user") will get: ','["role:admin", "alice"]',"."),(0,s.kt)("p",null,"For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'users := e.GetImplicitUsersForRole("role:user")\n')),(0,s.kt)("h3",{id:"getimplicitpermissionsforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetImplicitPermissionsForUser()")),(0,s.kt)("p",null,"GetImplicitPermissionsForUser gets implicit permissions for a user or role.",(0,s.kt)("br",{parentName:"p"}),"\n","Compared to GetPermissionsForUser(), this function retrieves permissions for inherited roles.  "),(0,s.kt)("p",null,"For example:",(0,s.kt)("br",{parentName:"p"}),"\n","p, admin, data1, read",(0,s.kt)("br",{parentName:"p"}),"\n","p, alice, data2, read",(0,s.kt)("br",{parentName:"p"}),"\n","g, alice, admin  "),(0,s.kt)("p",null,'GetPermissionsForUser("alice") can only get: [','["alice", "data2", "read"]',"].",(0,s.kt)("br",{parentName:"p"}),"\n",'But GetImplicitPermissionsForUser("alice") will get: [','["admin", "data1", "read"]',", ",'["alice", "data2", "read"]',"]."),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Node.js",value:"nodejs"},{label:".NET",value:"c#"},{label:"PHP",value:"php"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'e.GetImplicitPermissionsForUser("alice")\n'))),(0,s.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'await e.getImplicitPermissionsForUser("alice")\n'))),(0,s.kt)(o.Z,{value:"php",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'$e->getImplicitPermissionsForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var implicitPermissions = e.GetImplicitPermissionsForUser("alice");\n'))),(0,s.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'e.get_implicit_permissions_for_user("alice", None); // No domain\n')))),(0,s.kt)("h3",{id:"getdomainsforuser"},(0,s.kt)("inlineCode",{parentName:"h3"},"GetDomainsForUser()")),(0,s.kt)("p",null,"GetDomainsForUser gets all domains which a user has."),(0,s.kt)("p",null,"For example:\np, admin, domain1, data1, read\np, admin, domain2, data2, read\np, admin, domain2, data2, write\ng, alice, admin, domain1\ng, alice, admin, domain2"),(0,s.kt)("p",null,'GetDomainsForUser("alice") could get ','["domain1", "domain2"]'),(0,s.kt)("p",null,"For example:"),(0,s.kt)(n.Z,{defaultValue:"go",values:[{label:"Go",value:"go"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'result, err := e.GetDomainsForUser("alice")\n')))))}k.isMDXComponent=!0}}]);