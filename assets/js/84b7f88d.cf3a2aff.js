"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[5257],{1580:function(e,t,i){i.r(t),i.d(t,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return m}});var n=i(3117),o=i(102),a=(i(7294),i(3905)),l=["components"],r={id:"policy-subset-loading",title:"Policy Subset Loading"},s=void 0,d={unversionedId:"policy-subset-loading",id:"policy-subset-loading",isDocsHomePage:!1,title:"Policy Subset Loading",description:"Some adapters support filtered policy management. This means that the policy loaded by Casbin is a subset of the policy in storage based on a given filter. This allows for efficient policy enforcement in large, multi-tenant environments when parsing the entire policy becomes a performance bottleneck.",source:"@site/docs/PolicySubsetLoading.mdx",sourceDirName:".",slug:"/policy-subset-loading",permalink:"/docs/policy-subset-loading",editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/PolicySubsetLoading.mdx",tags:[],version:"current",frontMatter:{id:"policy-subset-loading",title:"Policy Subset Loading"},sidebar:"docs",previous:{title:"Policy Storage",permalink:"/docs/policy-storage"},next:{title:"Enforcers",permalink:"/docs/enforcers"}},c=[],p={toc:c};function m(e){var t=e.components,i=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Some adapters support filtered policy management. This means that the policy loaded by Casbin is a subset of the policy in storage based on a given filter. This allows for efficient policy enforcement in large, multi-tenant environments when parsing the entire policy becomes a performance bottleneck."),(0,a.kt)("p",null,"To use filtered policies with a supported adapter, simply call the ",(0,a.kt)("inlineCode",{parentName:"p"},"LoadFilteredPolicy")," method. The valid format for the filter parameter depends on the adapter used. To prevent accidental data loss, the ",(0,a.kt)("inlineCode",{parentName:"p"},"SavePolicy")," method is disabled when a filtered policy is loaded."),(0,a.kt)("p",null,"For example, the following code snippet uses the built-in filtered file adapter and the RBAC model with domains. In this case, the filter limits the policy to a single domain. Any policy lines for domains other than ",(0,a.kt)("inlineCode",{parentName:"p"},'"domain1"')," are omitted from the loaded policy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/casbin/casbin"\n\nenforcer := casbin.NewEnforcer()\n\nadapter := fileadapter.NewFilteredAdapter("examples/rbac_with_domains_policy.csv")\nenforcer.InitWithAdapter("examples/rbac_with_domains_model.conf", adapter)\n\nfilter := &fileadapter.Filter{\n    P: []string{"", "domain1"},\n    G: []string{"", "", "domain1"},\n}\nenforcer.LoadFilteredPolicy(filter)\n\n// The loaded policy now only contains the entries pertaining to "domain1".\n')),(0,a.kt)("p",null,"There's another method support subset loading feature: ",(0,a.kt)("inlineCode",{parentName:"p"},"LoadIncrementalFilteredPolicy"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"LoadIncrementalFilteredPolicy")," is similar to LoadFilteredPolicy, but it does not clear previous loaded policy, only append."))}m.isMDXComponent=!0}}]);