"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[4130],{3905:(e,a,t)=>{t.d(a,{Zo:()=>i,kt:()=>c});var l=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);a&&(l=l.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,l)}return t}function n(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,l,r=function(e,a){if(null==e)return{};var t,l,r={},s=Object.keys(e);for(l=0;l<s.length;l++)t=s[l],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(l=0;l<s.length;l++)t=s[l],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=l.createContext({}),d=function(e){var a=l.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):n(n({},a),e)),t},i=function(e){var a=d(e.components);return l.createElement(p.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return l.createElement(l.Fragment,{},a)}},u=l.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),u=d(t),c=r,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||s;return t?l.createElement(k,n(n({ref:a},i),{},{components:t})):l.createElement(k,n({ref:a},i))}));function c(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,n=new Array(s);n[0]=u;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,n[1]=o;for(var d=2;d<s;d++)n[d]=t[d];return l.createElement.apply(null,n)}return l.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5372:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>n,default:()=>k,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var l=t(7462),r=(t(7294),t(3905));const s={id:"rbac-api",title:"RBAC API",description:"A more friendly API for RBAC. This API is a subset of Management API. The RBAC users could use this API to simplify the code",keywords:["RBAC","API"],authors:["nodece"]},n=void 0,o={unversionedId:"rbac-api",id:"rbac-api",title:"RBAC API",description:"A more friendly API for RBAC. This API is a subset of Management API. The RBAC users could use this API to simplify the code",source:"@site/docs/RBACAPI.mdx",sourceDirName:".",slug:"/rbac-api",permalink:"/docs/rbac-api",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/RBACAPI.mdx",tags:[],version:"current",frontMatter:{id:"rbac-api",title:"RBAC API",description:"A more friendly API for RBAC. This API is a subset of Management API. The RBAC users could use this API to simplify the code",keywords:["RBAC","API"],authors:["nodece"]},sidebar:"docs",previous:{title:"Management API",permalink:"/docs/management-api"},next:{title:"RBAC with Domains API",permalink:"/docs/rbac-with-domains-api"}},p={},d=[{value:"Reference",id:"reference",level:2},{value:"<code>GetRolesForUser()</code>",id:"getrolesforuser",level:3},{value:"<code>GetUsersForRole()</code>",id:"getusersforrole",level:3},{value:"<code>HasRoleForUser()</code>",id:"hasroleforuser",level:3},{value:"<code>AddRoleForUser()</code>",id:"addroleforuser",level:3},{value:"<code>AddRolesForUser()</code>",id:"addrolesforuser",level:3},{value:"<code>DeleteRoleForUser()</code>",id:"deleteroleforuser",level:3},{value:"<code>DeleteRolesForUser()</code>",id:"deleterolesforuser",level:3},{value:"<code>DeleteUser()</code>",id:"deleteuser",level:3},{value:"<code>DeleteRole()</code>",id:"deleterole",level:3},{value:"<code>DeletePermission()</code>",id:"deletepermission",level:3},{value:"<code>AddPermissionForUser()</code>",id:"addpermissionforuser",level:3},{value:"<code>AddPermissionsForUser()</code>",id:"addpermissionsforuser",level:3},{value:"<code>DeletePermissionForUser()</code>",id:"deletepermissionforuser",level:3},{value:"<code>DeletePermissionsForUser()</code>",id:"deletepermissionsforuser",level:3},{value:"<code>GetPermissionsForUser()</code>",id:"getpermissionsforuser",level:3},{value:"<code>HasPermissionForUser()</code>",id:"haspermissionforuser",level:3},{value:"<code>GetImplicitRolesForUser()</code>",id:"getimplicitrolesforuser",level:3},{value:"<code>GetImplicitUsersForRole()</code>",id:"getimplicitusersforrole",level:3},{value:"<code>GetImplicitPermissionsForUser()</code>",id:"getimplicitpermissionsforuser",level:3},{value:"<code>GetNamedImplicitPermissionsForUser()</code>",id:"getnamedimplicitpermissionsforuser",level:3},{value:"<code>GetDomainsForUser()</code>",id:"getdomainsforuser",level:3},{value:"<code>GetImplicitResourcesForUser()</code>",id:"getimplicitresourcesforuser",level:3},{value:"<code>GetImplicitUsersForPermission()</code>",id:"getimplicitusersforpermission",level:3},{value:"<code>GetAllowedObjectConditions()</code>",id:"getallowedobjectconditions",level:3},{value:"<code>GetImplicitUsersForResource()</code>",id:"getimplicitusersforresource",level:3}],i=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",a)},m=i("Tabs"),u=i("TabItem"),c={toc:d};function k(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,l.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A more friendly API for RBAC. This API is a subset of Management API. The RBAC users could use this API to simplify the code."),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("p",null,"global variable ",(0,r.kt)("inlineCode",{parentName:"p"},"e")," is Enforcer instance."),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e, err := NewEnforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const e = await newEnforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv')\n"))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$e = new Enforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv');\n"))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e = casbin.Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var e = new Enforcer("path/to/model.conf", "path/to/policy.csv");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut e = Enforcer::new("examples/rbac_model.conf", "examples/rbac_policy.csv").await?;\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Enforcer e = new Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv");\n')))),(0,r.kt)("h3",{id:"getrolesforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetRolesForUser()")),(0,r.kt)("p",null,"GetRolesForUser gets the roles that a user has."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'res := e.GetRolesForUser("alice")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const res = await e.getRolesForUser('alice')\n"))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$res = $e->getRolesForUser("alice");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'roles = e.get_roles_for_user("alice")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var res = e.GetRolesForUser("alice");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let roles = e.get_roles_for_user("alice", None); // No domain\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> res = e.getRolesForUser("alice");\n')))),(0,r.kt)("h3",{id:"getusersforrole"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetUsersForRole()")),(0,r.kt)("p",null,"GetUsersForRole gets the users that has a role."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'res := e.GetUsersForRole("data1_admin")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const res = await e.getUsersForRole('data1_admin')\n"))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$res = $e->getUsersForRole("data1_admin");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'users = e.get_users_for_role("data1_admin")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var res = e.GetUsersForRole("data1_admin");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let users = e.get_users_for_role("data1_admin", None); // No domain\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> res = e.getUsersForRole("data1_admin");\n')))),(0,r.kt)("h3",{id:"hasroleforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"HasRoleForUser()")),(0,r.kt)("p",null,"HasRoleForUser determines whether a user has a role."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'res := e.HasRoleForUser("alice", "data1_admin")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const res = await e.hasRoleForUser('alice', 'data1_admin')\n"))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$res = $e->hasRoleForUser("alice", "data1_admin");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'has = e.has_role_for_user("alice", "data1_admin")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var res = e.HasRoleForUser("alice", "data1_admin");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let has = e.has_role_for_user("alice", "data1_admin", None); // No domain\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean res = e.hasRoleForUser("alice", "data1_admin");\n')))),(0,r.kt)("h3",{id:"addroleforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddRoleForUser()")),(0,r.kt)("p",null,"AddRoleForUser adds a role for a user.\nReturns false if the user already has the role (aka not affected)."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.AddRoleForUser("alice", "data2_admin")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.addRoleForUser('alice', 'data2_admin')\n"))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-PHP"},'$e->addRoleForUser("alice", "data2_admin");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e.add_role_for_user("alice", "data2_admin")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddRoleForUser("alice", "data2_admin");\nor\nvar added = await e.AddRoleForUserAsync("alice", "data2_admin");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_role_for_user("alice", "data2_admin", None).await?; // No domain\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addRoleForUser("alice", "data2_admin");\n')))),(0,r.kt)("h3",{id:"addrolesforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddRolesForUser()")),(0,r.kt)("p",null,"AddRolesForUser adds multiple roles for a user.\nReturns false if the user already has one of these roles (aka not affected)."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'var roles = []string{"data2_admin", "data1_admin"}\ne.AddRolesForUser("alice", roles)\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const roles = ["data1_admin", "data2_admin"];\nroles.map((role) => e.addRoleForUser("alice", role));\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let roles = vec!["data1_admin".to_owned(), "data2_admin".to_owned()];\nlet all_added = e.add_roles_for_user("alice", roles, None).await?; // No domain\n')))),(0,r.kt)("h3",{id:"deleteroleforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"DeleteRoleForUser()")),(0,r.kt)("p",null,"DeleteRoleForUser deletes a role for a user.\nReturns false if the user does not have the role (aka not affected)."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.DeleteRoleForUser("alice", "data1_admin")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deleteRoleForUser('alice', 'data1_admin')\n"))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$e->deleteRoleForUser("alice", "data1_admin");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_role_for_user("alice", "data1_admin")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeleteRoleForUser("alice", "data1_admin");\nor\nvar deleted = await e.DeleteRoleForUser("alice", "data1_admin");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_role_for_user("alice", "data1_admin", None).await?; // No domain\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean deleted = e.deleteRoleForUser("alice", "data1_admin");\n')))),(0,r.kt)("h3",{id:"deleterolesforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"DeleteRolesForUser()")),(0,r.kt)("p",null,"DeleteRolesForUser deletes all roles for a user.\nReturns false if the user does not have any roles (aka not affected)."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.DeleteRolesForUser("alice")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deleteRolesForUser('alice')\n"))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$e->deleteRolesForUser("alice");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_roles_for_user("alice")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var deletedAtLeastOne = e.DeleteRolesForUser("alice");\nor\nvar deletedAtLeastOne = await e.DeleteRolesForUserAsync("alice");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted_at_least_one = e.delete_roles_for_user("alice", None).await?; // No domain\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean deletedAtLeastOne = e.deleteRolesForUser("alice");\n')))),(0,r.kt)("h3",{id:"deleteuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"DeleteUser()")),(0,r.kt)("p",null,"DeleteUser deletes a user.\nReturns false if the user does not exist (aka not affected)."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.DeleteUser("alice")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deleteUser('alice')\n"))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$e->deleteUser("alice");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_user("alice")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeleteUser("alice");\nor\nvar deleted = await e.DeleteUserAsync("alice");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_user("alice").await?;\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean deleted = e.deleteUser("alice");\n')))),(0,r.kt)("h3",{id:"deleterole"},(0,r.kt)("inlineCode",{parentName:"h3"},"DeleteRole()")),(0,r.kt)("p",null,"DeleteRole deletes a role."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.DeleteRole("data2_admin")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'await e.deleteRole("data2_admin")\n'))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$e->deleteRole("data2_admin");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_role("data2_admin")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeleteRole("data2_admin");\nor\nvar deleted = await e.DeleteRoleAsync("data2_admin");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_role("data2_admin").await?;\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'e.deleteRole("data2_admin");\n')))),(0,r.kt)("h3",{id:"deletepermission"},(0,r.kt)("inlineCode",{parentName:"h3"},"DeletePermission()")),(0,r.kt)("p",null,"DeletePermission deletes a permission.\nReturns false if the permission does not exist (aka not affected)."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.DeletePermission("read")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deletePermission('read')\n"))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$e->deletePermission("read");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_permission("read")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeletePermission("read");\nor\nvar deleted = await e.DeletePermissionAsync("read");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_permission(vec!["read".to_owned()]).await?;\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean deleted = e.deletePermission("read");\n')))),(0,r.kt)("h3",{id:"addpermissionforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddPermissionForUser()")),(0,r.kt)("p",null,"AddPermissionForUser adds a permission for a user or role.\nReturns false if the user or role already has the permission (aka not affected)."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.AddPermissionForUser("bob", "read")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.addPermissionForUser('bob', 'read')\n"))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$e->addPermissionForUser("bob", "read");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e.add_permission_for_user("bob", "read")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddPermissionForUser("bob", "read");\nor\nvar added = await e.AddPermissionForUserAsync("bob", "read");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_permission_for_user("bob", vec!["read".to_owned()]).await?;\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addPermissionForUser("bob", "read");\n')))),(0,r.kt)("h3",{id:"addpermissionsforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddPermissionsForUser()")),(0,r.kt)("p",null,"AddPermissionsForUser adds multiple permissions for a user or role.\nReturns false if the user or role already has one of the permissions (aka not affected)."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'var permissions = [][]string{{"data1", "read"},{"data2","write"}}\nfor i := 0; i < len(permissions); i++ {\n    e.AddPermissionsForUser("alice", permissions[i])\n}\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const permissions = [\n    ["data1", "read"],\n    ["data2", "write"],\n];\n\npermissions.map((permission) => e.addPermissionForUser("bob", ...permission));\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let permissions = vec![\n    vec!["data1".to_owned(), "read".to_owned()],\n    vec!["data2".to_owned(), "write".to_owned()],\n];\n\nlet all_added = e.add_permissions_for_user("bob", permissions).await?;\n')))),(0,r.kt)("h3",{id:"deletepermissionforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"DeletePermissionForUser()")),(0,r.kt)("p",null,"DeletePermissionForUser deletes a permission for a user or role.\nReturns false if the user or role does not have the permission (aka not affected)."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.DeletePermissionForUser("bob", "read")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'await e.deletePermissionForUser("bob", "read")\n'))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$e->deletePermissionForUser("bob", "read");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_permission_for_user("bob", "read")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var deleted = e.DeletePermissionForUser("bob", "read");\nor\nvar deleted = await e.DeletePermissionForUserAsync("bob", "read");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted = e.delete_permission_for_user("bob", vec!["read".to_owned()]).await?;\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean deleted = e.deletePermissionForUser("bob", "read");\n')))),(0,r.kt)("h3",{id:"deletepermissionsforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"DeletePermissionsForUser()")),(0,r.kt)("p",null,"DeletePermissionsForUser deletes permissions for a user or role.\nReturns false if the user or role does not have any permissions (aka not affected)."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.DeletePermissionsForUser("bob")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.deletePermissionsForUser('bob')\n"))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$e->deletePermissionsForUser("bob");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e.delete_permissions_for_user("bob")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var deletedAtLeastOne = e.DeletePermissionsForUser("bob");\nor\nvar deletedAtLeastOne = await e.DeletePermissionsForUserAsync("bob");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let deleted_at_least_one = e.delete_permissions_for_user("bob").await?;\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean deletedAtLeastOne = e.deletePermissionForUser("bob");\n')))),(0,r.kt)("h3",{id:"getpermissionsforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetPermissionsForUser()")),(0,r.kt)("p",null,"GetPermissionsForUser gets permissions for a user or role."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.GetPermissionsForUser("bob")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.getPermissionsForUser('bob')\n"))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$e->getPermissionsForUser("bob");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e.get_permissions_for_user("bob")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var permissions = e.GetPermissionsForUser("bob");\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> permissions = e.getPermissionsForUser("bob");\n')))),(0,r.kt)("h3",{id:"haspermissionforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"HasPermissionForUser()")),(0,r.kt)("p",null,"HasPermissionForUser determines whether a user has a permission."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.HasPermissionForUser("alice", []string{"read"})\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await e.hasPermissionForUser('alice', 'read')\n"))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$e->hasPermissionForUser("alice", []string{"read"});\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'has = e.has_permission_for_user("alice", "read")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var has = e.HasPermissionForUser("bob", "read");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let has = e.has_permission_for_user("alice", vec!["data1".to_owned(), "read".to_owned()]);\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean has = e.hasPermissionForUser("alice", "read");\n')))),(0,r.kt)("h3",{id:"getimplicitrolesforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetImplicitRolesForUser()")),(0,r.kt)("p",null,"GetImplicitRolesForUser gets implicit roles that a user has.\nCompared to GetRolesForUser(), this function retrieves indirect roles besides direct roles."),(0,r.kt)("p",null,"For example:",(0,r.kt)("br",{parentName:"p"}),"\n","g, alice, role:admin",(0,r.kt)("br",{parentName:"p"}),"\n","g, role:admin, role:user  "),(0,r.kt)("p",null,'GetRolesForUser("alice") can only get: ','["role:admin"]',".",(0,r.kt)("br",{parentName:"p"}),"\n",'But GetImplicitRolesForUser("alice") will get: ','["role:admin", "role:user"]',"."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.GetImplicitRolesForUser("alice")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'await e.getImplicitRolesForUser("alice")\n'))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$e->getImplicitRolesForUser("alice");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e.get_implicit_roles_for_user("alice")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var implicitRoles = e.GetImplicitRolesForUser("alice");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'e.get_implicit_roles_for_user("alice", None); // No domain\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> implicitRoles = e.getImplicitRolesForUser("alice");\n')))),(0,r.kt)("h3",{id:"getimplicitusersforrole"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetImplicitUsersForRole()")),(0,r.kt)("p",null,"GetImplicitUsersForRole gets all users inheriting the role.\nCompared to GetUsersForRole(), this function retrieves indirect users."),(0,r.kt)("p",null,"For example:",(0,r.kt)("br",{parentName:"p"}),"\n","g, alice, role:admin",(0,r.kt)("br",{parentName:"p"}),"\n","g, role:admin, role:user  "),(0,r.kt)("p",null,'GetUsersForRole("role:user") can only get: ','["role:admin"]',".",(0,r.kt)("br",{parentName:"p"}),"\n",'But GetImplicitUesrsForRole("role:user") will get: ','["role:admin", "alice"]',"."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'users := e.GetImplicitUsersForRole("role:user")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const users = e.getImplicitUsersForRole("role:user");\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> users = e.getImplicitUsersForRole("role:user");\n')))),(0,r.kt)("h3",{id:"getimplicitpermissionsforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetImplicitPermissionsForUser()")),(0,r.kt)("p",null,"GetImplicitPermissionsForUser gets implicit permissions for a user or role.",(0,r.kt)("br",{parentName:"p"}),"\n","Compared to GetPermissionsForUser(), this function retrieves permissions for inherited roles.  "),(0,r.kt)("p",null,"For example:",(0,r.kt)("br",{parentName:"p"}),"\n","p, admin, data1, read",(0,r.kt)("br",{parentName:"p"}),"\n","p, alice, data2, read",(0,r.kt)("br",{parentName:"p"}),"\n","g, alice, admin  "),(0,r.kt)("p",null,'GetPermissionsForUser("alice") can only get: [','["alice", "data2", "read"]',"].",(0,r.kt)("br",{parentName:"p"}),"\n",'But GetImplicitPermissionsForUser("alice") will get: [','["admin", "data1", "read"]',", ",'["alice", "data2", "read"]',"]."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.GetImplicitPermissionsForUser("alice")\n'))),(0,r.kt)(u,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'await e.getImplicitPermissionsForUser("alice")\n'))),(0,r.kt)(u,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$e->getImplicitPermissionsForUser("alice");\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e.get_implicit_permissions_for_user("alice")\n'))),(0,r.kt)(u,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var implicitPermissions = e.GetImplicitPermissionsForUser("alice");\n'))),(0,r.kt)(u,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'e.get_implicit_permissions_for_user("alice", None); // No domain\n'))),(0,r.kt)(u,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> implicitPermissions = e.getImplicitPermissionsForUser("alice");\n')))),(0,r.kt)("h3",{id:"getnamedimplicitpermissionsforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetNamedImplicitPermissionsForUser()")),(0,r.kt)("p",null,"GetNamedImplicitPermissionsForUser gets implicit permissions for a user or role by named policy\nCompared to GetImplicitPermissionsForUser(), this function allow you to specify the policy name."),(0,r.kt)("p",null,"For example:\np, admin, data1, read\np2, admin, create\ng, alice, admin"),(0,r.kt)("p",null,'GetImplicitPermissionsForUser("alice") only get: [','["admin", "data1", "read"]','], whose policy is default "p"'),(0,r.kt)("p",null,'But you can specify the policy as "p2" to get: [','["admin", "create"]','] by GetNamedImplicitPermissionsForUser("p2","alice")'),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.GetNamedImplicitPermissionsForUser("p2","alice")\n'))),(0,r.kt)(u,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e.get_named_implicit_permissions_for_user("p2", "alice")\n')))),(0,r.kt)("h3",{id:"getdomainsforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetDomainsForUser()")),(0,r.kt)("p",null,"GetDomainsForUser gets all domains which a user has."),(0,r.kt)("p",null,"For example:\np, admin, domain1, data1, read\np, admin, domain2, data2, read\np, admin, domain2, data2, write\ng, alice, admin, domain1\ng, alice, admin, domain2"),(0,r.kt)("p",null,'GetDomainsForUser("alice") could get ','["domain1", "domain2"]'),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'result, err := e.GetDomainsForUser("alice")\n')))),(0,r.kt)("h3",{id:"getimplicitresourcesforuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetImplicitResourcesForUser()")),(0,r.kt)("p",null,"GetImplicitResourcesForUser returns all policies that should be true for user."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, data1, read\np, bob, data2, write\np, data2_admin, data2, read\np, data2_admin, data2, write\n\ng, alice, data2_admin\n")),(0,r.kt)("p",null,'GetImplicitResourcesForUser("alice") will return\n',(0,r.kt)("inlineCode",{parentName:"p"},"[[alice data1 read] [alice data2 read] [alice data2 write]]")),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'resources, err := e.GetImplicitResourcesForUser("alice")\n')))),(0,r.kt)("h3",{id:"getimplicitusersforpermission"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetImplicitUsersForPermission()")),(0,r.kt)("p",null,"GetImplicitUsersForPermission gets implicit users for a permission."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"p, admin, data1, read\np, bob, data1, read\ng, alice, admin\n")),(0,r.kt)("p",null,'GetImplicitUsersForPermission("data1", "read") will return: ',(0,r.kt)("inlineCode",{parentName:"p"},'["alice", "bob"]'),"."),(0,r.kt)("p",null,'Note: only users will be returned, roles (2nd arg in "g") will be excluded.'),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'users, err := e.GetImplicitUsersForPermission("data1", "read")\n')))),(0,r.kt)("h3",{id:"getallowedobjectconditions"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetAllowedObjectConditions()")),(0,r.kt)("p",null,"GetAllowedObjectConditions returns a string array of object conditions that the user can access."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, r.obj.price < 25, read\np, admin, r.obj.category_id = 2, read\np, bob, r.obj.author = bob, write\n\ng, alice, admin\n")),(0,r.kt)("p",null,'e.GetAllowedObjectConditions("alice", "read", "r.obj.") will return ',(0,r.kt)("inlineCode",{parentName:"p"},'["price < 25", "category_id = 2"], nil')),(0,r.kt)("p",null,"Note:"),(0,r.kt)("ol",{start:0},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},'prefix: You can customize the prefix of the object conditions, and "r.obj." is commonly used as a prefix.\nAfter removing the prefix, the remaining part is the condition of the object.\nIf there is an obj policy that does not meet the prefix requirement, an ',(0,r.kt)("inlineCode",{parentName:"p"},"errors.ERR_OBJ_CONDITION")," will be returned.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If the 'objectConditions' array is empty, return ",(0,r.kt)("inlineCode",{parentName:"p"},"errors.ERR_EMPTY_CONDITION"),"\nThis error is returned because some data adapters' ORM return full table data by default\nwhen they receive an empty condition, which tends to behave contrary to expectations.(e.g. GORM)\nIf you are using an adapter that does not behave like this, you can choose to ignore this error."))),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'conditions, err := e.GetAllowedObjectConditions("alice", "read", "r.obj.")\n')))),(0,r.kt)("h3",{id:"getimplicitusersforresource"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetImplicitUsersForResource()")),(0,r.kt)("p",null,"GetImplicitUsersForResource return implicit user based on resource."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, data1, read\np, bob, data2, write\np, data2_admin, data2, read\np, data2_admin, data2, write\ng, alice, data2_admin\n")),(0,r.kt)("p",null,'GetImplicitUsersForResource("data2") will return ',(0,r.kt)("inlineCode",{parentName:"p"},'[["bob", "data2", "write"], ["alice", "data2", "read"] ["alice", "data2", "write"]], nil'),"."),(0,r.kt)("p",null,'GetImplicitUsersForResource("data1") will return ',(0,r.kt)("inlineCode",{parentName:"p"},'[["alice", "data1", "read"]], nil'),"."),(0,r.kt)(m,{groupId:"langs",mdxType:"Tabs"},(0,r.kt)(u,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'ImplicitUsers, err := e.GetImplicitUsersForResource("data2")\n')))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},'Only users will be returned, roles (2nd arg in "g") will be excluded.')))}k.isMDXComponent=!0}}]);