"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[9793],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=l(n),d=o,f=h["".concat(u,".").concat(d)]||h[d]||p[d]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8721:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return c},default:function(){return h}});var r=n(3117),o=n(102),i=(n(7294),n(3905)),a=["components"],s={id:"envoy",title:"Authorization of Service Mesh through Envoy"},u=void 0,l={unversionedId:"envoy",id:"envoy",isDocsHomePage:!1,title:"Authorization of Service Mesh through Envoy",description:"Envoy-authz is a middleware of Envoy which performs external RBAC & ABAC authorization through casbin. This middleware uses Envoy's external authorization API through a gRPC server. This proxy would be deployed on any type of envoy-based service meshes like Istio.",source:"@site/docs/EnvoyAuthz.md",sourceDirName:".",slug:"/envoy",permalink:"/docs/envoy",editUrl:"https://github.com/casbin/casbin-website/edit/master/docs/docs/EnvoyAuthz.md",tags:[],version:"current",frontMatter:{id:"envoy",title:"Authorization of Service Mesh through Envoy"}},c=[{value:"Requirements",id:"requirements",children:[],level:2},{value:"Working of Middleware",id:"working-of-middleware",children:[],level:2},{value:"Usage",id:"usage",children:[],level:2},{value:"Integrating to Istio",id:"integrating-to-istio",children:[],level:2}],p={toc:c};function h(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/casbin/envoy-authz"},"Envoy-authz")," is a middleware of Envoy which performs external RBAC & ABAC authorization through casbin. This middleware uses ",(0,i.kt)("a",{parentName:"p",href:"https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/ext_authz_filter.html"},"Envoy's external authorization API")," through a gRPC server. This proxy would be deployed on any type of envoy-based service meshes like Istio."),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Envoy 1.17+ "),(0,i.kt)("li",{parentName:"ul"},"Istio or any type of service mesh"),(0,i.kt)("li",{parentName:"ul"},"grpc dependencies")),(0,i.kt)("p",null,"Dependencies are managed through ",(0,i.kt)("inlineCode",{parentName:"p"},"go.mod"),"."),(0,i.kt)("h2",{id:"working-of-middleware"},"Working of Middleware"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A client would make a http request."),(0,i.kt)("li",{parentName:"ul"},"Envoy proxy would send that request to grpc server."),(0,i.kt)("li",{parentName:"ul"},"The grpc server would then authorize the request based on casbin policies."),(0,i.kt)("li",{parentName:"ul"},"If authorized, the request would be sent through or else, it gets denied.")),(0,i.kt)("p",null,"The grpc server is based on protocol buffer from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/envoyproxy/envoy/blob/master/api/envoy/service/auth/v2alpha/external_auth.proto"},"external_auth.proto")," from Envoy."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// A generic interface for performing authorization check on incoming\n// requests to a networked service.\nservice Authorization {\n  // Performs authorization check based on the attributes associated with the\n  // incoming request, and returns status `OK` or not `OK`.\n  rpc Check(v2.CheckRequest) returns (v2.CheckResponse);\n}\n")),(0,i.kt)("p",null,"From the above proto file, we have to use ",(0,i.kt)("inlineCode",{parentName:"p"},"Check()")," service in the authorization server."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Define the Casbin policies under config files by following this ",(0,i.kt)("a",{parentName:"li",href:"https://casbin.org/docs/en/how-it-works"},"guide"),".")),(0,i.kt)("p",null,"You can verify/test your policies on online ",(0,i.kt)("a",{parentName:"p",href:"https://casbin.org/editor/"},"casbin-editor"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Start the authorizing server by running:-")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ go build .\n$ ./authz \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Load the envoy configuration:-")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$  envoy -c authz.yaml -l info\n")),(0,i.kt)("p",null,"Once the envoy starts, it will start intercepting requests for the authorization process."),(0,i.kt)("h2",{id:"integrating-to-istio"},"Integrating to Istio"),(0,i.kt)("p",null,"You need to send custom headers, which would contain usernames in the JWT token OF headers for this middleware to work. You can check the official ",(0,i.kt)("a",{parentName:"p",href:"https://istio.io/v1.4/docs/tasks/policy-enforcement/control-headers/"},"Istio docs")," to get more info on modifying ",(0,i.kt)("inlineCode",{parentName:"p"},"Request Headers"),"."))}h.isMDXComponent=!0}}]);