"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[4355],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>y});var i=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=i.createContext({}),c=function(e){var t=i.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=c(e.components);return i.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(r),y=n,m=u["".concat(p,".").concat(y)]||u[y]||d[y]||a;return r?i.createElement(m,o(o({ref:t},s),{},{components:r})):i.createElement(m,o({ref:t},s))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,o=new Array(a);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<a;c++)o[c]=r[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4358:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=r(7462),n=(r(7294),r(3905));const a={id:"priority-model",title:"Priority Model",description:"Casbin's Priority Model for managing policies with different priorities",keywords:["priority model"],authors:["hsluoyz"]},o=void 0,l={unversionedId:"priority-model",id:"priority-model",title:"Priority Model",description:"Casbin's Priority Model for managing policies with different priorities",source:"@site/docs/PriorityModel.mdx",sourceDirName:".",slug:"/priority-model",permalink:"/docs/priority-model",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/PriorityModel.mdx",tags:[],version:"current",frontMatter:{id:"priority-model",title:"Priority Model",description:"Casbin's Priority Model for managing policies with different priorities",keywords:["priority model"],authors:["hsluoyz"]},sidebar:"docs",previous:{title:"OrBAC",permalink:"/docs/orbac"},next:{title:"Usage Control (UCON)",permalink:"/docs/ucon"}},p={},c=[{value:"Load Policy with Implicit Priority",id:"load-policy-with-implicit-priority",level:2},{value:"Load Policy with Explicit Priority",id:"load-policy-with-explicit-priority",level:2},{value:"Load Policy with Priority Based on Role and User Hierarchy",id:"load-policy-with-priority-based-on-role-and-user-hierarchy",level:2}],s={toc:c};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,i.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Casbin supports loading policies with priority."),(0,n.kt)("h2",{id:"load-policy-with-implicit-priority"},"Load Policy with Implicit Priority"),(0,n.kt)("p",null,"It's quite simple: the order determines the priority; policies that appear earlier have higher priority."),(0,n.kt)("p",null,"model.conf:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = priority(p.eft) || deny\n")),(0,n.kt)("h2",{id:"load-policy-with-explicit-priority"},"Load Policy with Explicit Priority"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Also see: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/issues/550"},"casbin#550"))),(0,n.kt)("p",null,"A smaller priority value indicates a higher priority. If there's a non-numerical character in the priority, it will be placed last instead of throwing an error."),(0,n.kt)("admonition",{title:"Token name convention",type:"info"},(0,n.kt)("p",{parentName:"admonition"},'The conventionally used priority token name in the policy definition is "priority". To use a custom one, you need to invoke ',(0,n.kt)("inlineCode",{parentName:"p"},"e.SetFieldIndex()")," and reload the policies (see the full example on ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/pull/1044"},"TestCustomizedFieldIndex"),")."),(0,n.kt)("p",{parentName:"admonition"},"model.conf:"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_definition]\np = customized_priority, sub, obj, act, eft\n")),(0,n.kt)("p",{parentName:"admonition"},"Golang code example:"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-go"},'e, _ := NewEnforcer("./example/priority_model_explicit_customized.conf",\n                    "./example/priority_policy_explicit_customized.csv")\n// Due to the customized priority token, the enforcer fails to handle the priority.\nok, err := e.Enforce("bob", "data2", "read") // the result will be `true, nil`\n// Set PriorityIndex and reload\ne.SetFieldIndex("p", constant.PriorityIndex, 0)\nerr := e.LoadPolicy()\nif err != nil {\n    log.Fatalf("LoadPolicy: %v", err)\n}\nok, err := e.Enforce("bob", "data2", "read") // the result will be `false, nil`\n'))),(0,n.kt)("p",null,"Currently, explicit priority only supports ",(0,n.kt)("inlineCode",{parentName:"p"},"AddPolicy")," & ",(0,n.kt)("inlineCode",{parentName:"p"},"AddPolicies"),". If ",(0,n.kt)("inlineCode",{parentName:"p"},"UpdatePolicy")," has been called, you shouldn't change the priority attribute."),(0,n.kt)("p",null,"model.conf:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = priority, sub, obj, act, eft\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = priority(p.eft) || deny\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n")),(0,n.kt)("p",null,"policy.csv"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csv"},"p, 10, data1_deny_group, data1, read, deny\np, 10, data1_deny_group, data1, write, deny\np, 10, data2_allow_group, data2, read, allow\np, 10, data2_allow_group, data2, write, allow\n\n\np, 1, alice, data1, write, allow\np, 1, alice, data1, read, allow\np, 1, bob, data2, read, deny\n\ng, bob, data2_allow_group\ng, alice, data1_deny_group\n")),(0,n.kt)("p",null,"request:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csv"},"alice, data1, write --\x3e true // because `p, 1, alice, data1, write, allow` has the highest priority\nbob, data2, read --\x3e false\nbob, data2, write --\x3e true // because bob has the role of `data2_allow_group` which has the right to write data2, and there's no deny policy with higher priority \n")),(0,n.kt)("h2",{id:"load-policy-with-priority-based-on-role-and-user-hierarchy"},"Load Policy with Priority Based on Role and User Hierarchy"),(0,n.kt)("p",null,"The inherited structure of roles and users can only be multiple trees, not graphs. If a user has multiple roles, you have to make sure the user has the same level in different trees. If two roles have the same level, the policy (associated with the role) that appeared earlier has higher priority. For more details, also see ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/pull/833"},"casbin#833")," and ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/issues/831"},"casbin#831"),"."),(0,n.kt)("p",null,"model.conf:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act, eft\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = subjectPriority(p.eft) || deny\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act \n")),(0,n.kt)("p",null,"policy.csv"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csv"},"p, root, data1, read, deny\np, admin, data1, read, deny\n\np, editor, data1, read, deny\np, subscriber, data1, read, deny\n\np, jane, data1, read, allow\np, alice, data1, read, allow\n\ng, admin, root\n\ng, editor, admin\ng, subscriber, admin\n\ng, jane, editor\ng, alice, subscriber \n")),(0,n.kt)("p",null,"Request:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csv"},"jane, data1, read --\x3e true // because jane is at the bottom, her priority is higher than that of editor, admin, and root\nalice, data1, read --\x3e true\n")),(0,n.kt)("p",null," The role hierarchy looks like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"role: root\n \u2514\u2500 role: admin\n    \u251c\u2500 role editor\n    \u2502  \u2514\u2500 user: jane\n    \u2502\n    \u2514\u2500 role: subscriber\n       \u2514\u2500 user: alice\n")),(0,n.kt)("p",null,"The priority automatically looks like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"role: root                 # auto priority: 30\n \u2514\u2500 role: admin            # auto priority: 20\n     \u251c\u2500 role: editor       # auto priority: 10\n     \u2514\u2500 role: subscriber   # auto priority: 10\n")))}d.isMDXComponent=!0}}]);