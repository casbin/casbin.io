"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[1593],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(t),u=i,h=c["".concat(l,".").concat(u)]||c[u]||m[u]||r;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2535:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=t(7462),i=(t(7294),t(3905));const r={id:"rbac-with-domains",title:"RBAC with Domains",description:"RBAC with domains usage",keywords:["RBAC with domains"],authors:["hsluoyz"]},o=void 0,s={unversionedId:"rbac-with-domains",id:"rbac-with-domains",title:"RBAC with Domains",description:"RBAC with domains usage",source:"@site/docs/RBACWithDomains.mdx",sourceDirName:".",slug:"/rbac-with-domains",permalink:"/docs/rbac-with-domains",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/RBACWithDomains.mdx",tags:[],version:"current",frontMatter:{id:"rbac-with-domains",title:"RBAC with Domains",description:"RBAC with domains usage",keywords:["RBAC with domains"],authors:["hsluoyz"]},sidebar:"docs",previous:{title:"RBAC with Pattern",permalink:"/docs/rbac-with-pattern"},next:{title:"Casbin RBAC vs. RBAC96",permalink:"/docs/rbac-96"}},l={},d=[{value:"Role definition with domains tenants",id:"role-definition-with-domains-tenants",level:2}],p={toc:d};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"role-definition-with-domains-tenants"},"Role definition with domains tenants"),(0,i.kt)("p",null,"The RBAC roles in Casbin can be global or domain-specific. Domain-specify roles mean that the roles for a user can be different when the user is at different domains/tenants. This is very useful for large systems like a cloud, as the users are usually in different tenants."),(0,i.kt)("p",null,"The role definition with domains/tenants should be something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"[role_definition]\ng = _, _, _\n")),(0,i.kt)("p",null,"The 3rd ",(0,i.kt)("inlineCode",{parentName:"p"},"_")," means the name of domain/tenant, this part should not be changed. Then the policy can be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"p, admin, tenant1, data1, read\np, admin, tenant2, data2, read\n\ng, alice, admin, tenant1\ng, alice, user, tenant2\n")),(0,i.kt)("p",null,"It means ",(0,i.kt)("inlineCode",{parentName:"p"},"admin")," role in ",(0,i.kt)("inlineCode",{parentName:"p"},"tenant1")," can read ",(0,i.kt)("inlineCode",{parentName:"p"},"data1"),". And ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," has ",(0,i.kt)("inlineCode",{parentName:"p"},"admin")," role in ",(0,i.kt)("inlineCode",{parentName:"p"},"tenant1"),", and has ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," role in ",(0,i.kt)("inlineCode",{parentName:"p"},"tenant2"),". So she can read ",(0,i.kt)("inlineCode",{parentName:"p"},"data1"),". However, since ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," is not an ",(0,i.kt)("inlineCode",{parentName:"p"},"admin")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"tenant2"),", she cannot read ",(0,i.kt)("inlineCode",{parentName:"p"},"data2"),"."),(0,i.kt)("p",null,"Then in a matcher, you should check the role as below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"[matchers]\nm = g(r.sub, p.sub, r.dom) && r.dom == p.dom && r.obj == p.obj && r.act == p.act\n")),(0,i.kt)("p",null,"Please see the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/master/examples/rbac_with_domains_model.conf"},"rbac_with_domains_model.conf")," for examples."),(0,i.kt)("admonition",{title:"Token name convention",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Note: Conventionally domain token name in policy definition is ",(0,i.kt)("inlineCode",{parentName:"p"},"dom")," and placed as the second token(",(0,i.kt)("inlineCode",{parentName:"p"},"sub, dom, obj, act"),").\nNow Golang Casbin supports customized token name & place. If the domain token name is ",(0,i.kt)("inlineCode",{parentName:"p"},"dom"),", the domain token can be placed at an arbitrary place and no extra action needs.  If the domain token name is not ",(0,i.kt)("inlineCode",{parentName:"p"},"dom")," , ",(0,i.kt)("inlineCode",{parentName:"p"},"e.SetFieldIndex()")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"constant.DomainIndex")," should be called after the enforcer is initialized regardless of its position."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"# `domain` here for `dom`\n[policy_definition]\np = sub, obj, act, domain\n")),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'e.SetFieldIndex("p", constant.DomainIndex, 3) // index start from 0\nusers := e.GetAllUsersByDomain("domain1") // without SetFieldIndex, it will raise an error\n'))))}m.isMDXComponent=!0}}]);