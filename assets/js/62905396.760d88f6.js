"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[7789],{3905:function(t,e,a){a.d(e,{Zo:function(){return s},kt:function(){return m}});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var p=r.createContext({}),c=function(t){var e=r.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},s=function(t){var e=c(t.components);return r.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,p=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),d=c(a),m=n,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||l;return a?r.createElement(h,i(i({ref:e},s),{},{components:a})):r.createElement(h,i({ref:e},s))}));function m(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:n,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8215:function(t,e,a){var r=a(7294);e.Z=function(t){var e=t.children,a=t.hidden,n=t.className;return r.createElement("div",{role:"tabpanel",hidden:a,className:n},e)}},5064:function(t,e,a){a.d(e,{Z:function(){return d}});var r=a(3117),n=a(7294),l=a(2389),i=a(9443);var o=function(){var t=(0,n.useContext)(i.Z);if(null==t)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return t},p=a(9558),c=a(6010),s="tabItem_1uMI";function u(t){var e,a,r,l=t.lazy,i=t.block,u=t.defaultValue,d=t.values,m=t.groupId,h=t.className,k=n.Children.map(t.children,(function(t){if((0,n.isValidElement)(t)&&"string"==typeof t.props.value)return t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof t.type?t.type:t.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=d?d:k.map((function(t){var e=t.props;return{value:e.value,label:e.label}})),g=(0,p.lx)(b,(function(t,e){return t.value===e.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(t){return t.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var N=null===u?u:null!=(e=null!=u?u:null==(a=k.find((function(t){return t.props.default})))?void 0:a.props.value)?e:null==(r=k[0])?void 0:r.props.value;if(null!==N&&!b.some((function(t){return t.value===N})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+b.map((function(t){return t.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var f=o(),y=f.tabGroupChoices,v=f.setTabGroupChoices,w=(0,n.useState)(N),W=w[0],C=w[1],T=[],E=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var P=y[m];null!=P&&P!==W&&b.some((function(t){return t.value===P}))&&C(P)}var x=function(t){var e=t.currentTarget,a=T.indexOf(e),r=b[a].value;r!==W&&(E(e),C(r),null!=m&&v(m,r))},R=function(t){var e,a=null;switch(t.key){case"ArrowRight":var r=T.indexOf(t.currentTarget)+1;a=T[r]||T[0];break;case"ArrowLeft":var n=T.indexOf(t.currentTarget)-1;a=T[n]||T[T.length-1]}null==(e=a)||e.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":i},h)},b.map((function(t){var e=t.value,a=t.label;return n.createElement("li",{role:"tab",tabIndex:W===e?0:-1,"aria-selected":W===e,className:(0,c.Z)("tabs__item",s,{"tabs__item--active":W===e}),key:e,ref:function(t){return T.push(t)},onKeyDown:R,onFocus:x,onClick:x},null!=a?a:e)}))),l?(0,n.cloneElement)(k.filter((function(t){return t.props.value===W}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},k.map((function(t,e){return(0,n.cloneElement)(t,{key:e,hidden:t.props.value!==W})}))))}function d(t){var e=(0,l.Z)();return n.createElement(u,(0,r.Z)({key:String(e)},t))}},9443:function(t,e,a){var r=(0,a(7294).createContext)(void 0);e.Z=r},4718:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return d},default:function(){return h}});var r=a(3117),n=a(102),l=(a(7294),a(3905)),i=a(5064),o=a(8215),p=["components"],c={id:"watchers",title:"Watchers"},s=void 0,u={unversionedId:"watchers",id:"watchers",isDocsHomePage:!1,title:"Watchers",description:"We support to use distributed messaging systems like etcd to keep consistence between multiple Casbin enforcer instances. So our users can concurrently use multiple Casbin enforcers to handle large number of permission checking requests.",source:"@site/docs/Watchers.mdx",sourceDirName:".",slug:"/watchers",permalink:"/docs/watchers",editUrl:"https://github.com/casbin/casbin-website/edit/master/docs/docs/Watchers.mdx",tags:[],version:"current",frontMatter:{id:"watchers",title:"Watchers"},sidebar:"docs",previous:{title:"Adapters",permalink:"/docs/adapters"},next:{title:"Dispatchers",permalink:"/docs/dispatchers"}},d=[{value:"WatcherEx",id:"watcherex",children:[],level:2}],m={toc:d};function h(t){var e=t.components,a=(0,n.Z)(t,p);return(0,l.kt)("wrapper",(0,r.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"We support to use distributed messaging systems like ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/coreos/etcd"},"etcd")," to keep consistence between multiple Casbin enforcer instances. So our users can concurrently use multiple Casbin enforcers to handle large number of permission checking requests."),(0,l.kt)("p",null,"Similar to policy storage adapters, we don't put watcher code in the main library. Any support for a new messaging system should be implemented as a watcher. A complete list of Casbin watchers is provided as below. Any 3rd-party contribution on a new watcher is welcomed, please inform us and I will put it in this list:)"),(0,l.kt)(i.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"Node.js",value:"nodejs"},{label:"Python",value:"python"},{label:".NET",value:"c#"},{label:"Ruby",value:"ruby"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Watcher"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Author"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/casbin/etcd-watcher"},"Etcd Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"KV store"),(0,l.kt)("td",{parentName:"tr",align:null},"Casbin"),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/coreos/etcd"},"etcd"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/casbin/redis-watcher"},"Redis Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"KV store"),(0,l.kt)("td",{parentName:"tr",align:null},"Casbin"),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"http://redis.io/"},"Redis"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/billcobbler/casbin-redis-watcher"},"Redis Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"KV store"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/billcobbler"},"@billcobbler")),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"http://redis.io/"},"Redis"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/casbin/tikv-watcher"},"TiKV Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"KV store"),(0,l.kt)("td",{parentName:"tr",align:null},"Casbin"),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/tikv/tikv"},"TiKV"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/wgarunap/casbin-kafka-watcher"},"Kafka Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"Messaging system"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/wgarunap"},"@wgarunap")),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"https://kafka.apache.org/"},"Apache Kafka"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/Soluto/casbin-nats-watcher"},"NATS Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"Messaging system"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/Soluto"},"Soluto")),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"https://nats.io/"},"NATS"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/grepsr/casbin-zk-watcher"},"ZooKeeper Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"Messaging system"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/grepsr"},"Grepsr")),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"https://zookeeper.apache.org/"},"Apache ZooKeeper"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/rusenask/casbin-go-cloud-watcher"},"NATS, RabbitMQ, GCP Pub/Sub, AWS SNS & SQS, Kafka, InMemory")),(0,l.kt)("td",{parentName:"tr",align:null},"Messaging System"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/rusenask/"},"@rusenask")),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher based on ",(0,l.kt)("a",{parentName:"td",href:"https://gocloud.dev/"},"Go Cloud Dev Kit")," that works with leading cloud providers and self-hosted infrastructure")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/fmyxyz/casbin-rocketmq-watcher"},"RocketMQ Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"Messaging system"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/fmyxyz"},"@fmyxyz")),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"https://rocketmq.apache.org/"},"Apache RocketMQ")))))),(0,l.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Watcher"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Author"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/mapleafgo/jcasbin-extra"},"Etcd Adapter")),(0,l.kt)("td",{parentName:"tr",align:null},"KV store"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/mapleafgo"},"@mapleafgo")),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/coreos/etcd"},"etcd"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/jcasbin/redis-watcher"},"Redis Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"KV store"),(0,l.kt)("td",{parentName:"tr",align:null},"Casbin"),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"http://redis.io/"},"Redis")))))),(0,l.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Watcher"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Author"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/node-casbin/etcd-watcher"},"Etcd Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"KV store"),(0,l.kt)("td",{parentName:"tr",align:null},"Casbin"),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/coreos/etcd"},"etcd"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/node-casbin/redis-watcher"},"Redis Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"KV store"),(0,l.kt)("td",{parentName:"tr",align:null},"Casbin"),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"http://redis.io/"},"Redis"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/node-casbin/pubsub-watcher"},"Pub/Sub Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"Messaging system"),(0,l.kt)("td",{parentName:"tr",align:null},"Casbin"),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"https://cloud.google.com/pubsub/docs"},"Google Cloud Pub/Sub"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/mcollina/casbin-pg-watcher"},"Postgres Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"Database"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/mcollina/"},"Matteo Collina")),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"https://www.postgresql.org/"},"PostgreSQL")))))),(0,l.kt)(o.Z,{value:"python",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Watcher"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Author"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/ScienceLogic/flask-casbin-redis-watcher"},"Redis Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"KV store"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/ScienceLogic"},"ScienceLogic")),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"http://redis.io/"},"Redis"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/pycasbin/postgresql-watcher"},"PostgreSQL Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"Database"),(0,l.kt)("td",{parentName:"tr",align:null},"Casbin"),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"https://www.postgresql.org/"},"PostgreSQL")))))),(0,l.kt)(o.Z,{value:"c#",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Watcher"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Author"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/Sbou/Casbin.NET-Redis-Watcher"},"Redis Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"KV store"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/Sbou"},"@Sbou")),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"http://redis.io/"},"Redis")))))),(0,l.kt)(o.Z,{value:"ruby",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Watcher"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Author"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/CasbinRuby/casbin-ruby-redis-watcher"},"Redis Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"KV store"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/CasbinRuby"},"CasbinRuby")),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"http://redis.io/"},"Redis"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/CasbinRuby/casbin-ruby-rabbitmq-watcher"},"RabbitMQ Watcher")),(0,l.kt)("td",{parentName:"tr",align:null},"Messaging system"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/CasbinRuby"},"CasbinRuby")),(0,l.kt)("td",{parentName:"tr",align:null},"Watcher for ",(0,l.kt)("a",{parentName:"td",href:"https://www.rabbitmq.com/"},"RabbitMQ"))))))),(0,l.kt)("h2",{id:"watcherex"},"WatcherEx"),(0,l.kt)("p",null,"In order to support incremental synchronization between multiple instances, we provide the ",(0,l.kt)("inlineCode",{parentName:"p"},"WatcherEx")," interface. We hope it can notify other instances when the policy changes, but there is currently no implementation of ",(0,l.kt)("inlineCode",{parentName:"p"},"WatcherEx"),". We recommend that you use dispatcher to achieve this. "),(0,l.kt)("p",null,"Compared with ",(0,l.kt)("inlineCode",{parentName:"p"},"Watcher")," interface, with implementing ",(0,l.kt)("inlineCode",{parentName:"p"},"WatcherEx")," what kind of update action can be distinguished, etc ",(0,l.kt)("inlineCode",{parentName:"p"},"AddPolicy"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"RemovePolicy"),", etc. "),(0,l.kt)("p",null,"WatcherEx Apis:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"api"),(0,l.kt)("th",{parentName:"tr",align:"center"},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"SetUpdateCallback(func(string)) error"),(0,l.kt)("td",{parentName:"tr",align:"center"},"SetUpdateCallback sets the callback function that the watcher will call, when the policy in DB has been changed by other instances. A classic callback is Enforcer.LoadPolicy().")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Update() error"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Update calls the update callback of other instances to synchronize their policy. It is usually called after changing the policy in DB, like Enforcer.SavePolicy(), Enforcer.AddPolicy(), Enforcer.RemovePolicy(), etc.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Close()"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Close stops and releases the watcher, the callback function will not be called any more.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"UpdateForAddPolicy(params ...string) error"),(0,l.kt)("td",{parentName:"tr",align:"center"},"UpdateForAddPolicy calls the update callback of other instances to synchronize their policy. It is called after Enforcer.AddPolicy()")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"UpdateForRemovePolicy(params ...string) error"),(0,l.kt)("td",{parentName:"tr",align:"center"},"UPdateForRemovePolicy calls the update callback of other instances to synchronize their policy. It is called after Enforcer.RemovePolicy()")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"UpdateForRemoveFilteredPolicy(fieldIndex int, fieldValues ...string) error"),(0,l.kt)("td",{parentName:"tr",align:"center"},"UpdateForRemoveFilteredPolicy calls the update callback of other instances to synchronize their policy. It is called after Enforcer.RemoveFilteredNamedGroupingPolicy()")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"UpdateForSavePolicy(model model.Model) error"),(0,l.kt)("td",{parentName:"tr",align:"center"},"UpdateForSavePolicy calls the update callback of other instances to synchronize their policy. It is called after Enforcer.RemoveFilteredNamedGroupingPolicy()")))))}h.isMDXComponent=!0}}]);