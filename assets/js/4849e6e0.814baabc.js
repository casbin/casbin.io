"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[7426],{3905:function(e,a,t){t.d(a,{Zo:function(){return c},kt:function(){return s}});var l=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);a&&(l=l.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function d(e,a){if(null==e)return{};var t,l,n=function(e,a){if(null==e)return{};var t,l,n={},r=Object.keys(e);for(l=0;l<r.length;l++)t=r[l],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)t=r[l],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var p=l.createContext({}),i=function(e){var a=l.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},c=function(e){var a=i(e.components);return l.createElement(p.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return l.createElement(l.Fragment,{},a)}},u=l.forwardRef((function(e,a){var t=e.components,n=e.mdxType,r=e.originalType,p=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),u=i(t),s=n,g=u["".concat(p,".").concat(s)]||u[s]||m[s]||r;return t?l.createElement(g,o(o({ref:a},c),{},{components:t})):l.createElement(g,o({ref:a},c))}));function s(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=t.length,o=new Array(r);o[0]=u;var d={};for(var p in a)hasOwnProperty.call(a,p)&&(d[p]=a[p]);d.originalType=e,d.mdxType="string"==typeof e?e:n,o[1]=d;for(var i=2;i<r;i++)o[i]=t[i];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5162:function(e,a,t){t.d(a,{Z:function(){return o}});var l=t(7294),n=t(6010),r="tabItem_Ymn6";function o(e){var a=e.children,t=e.hidden,o=e.className;return l.createElement("div",{role:"tabpanel",className:(0,n.Z)(r,o),hidden:t},a)}},5488:function(e,a,t){t.d(a,{Z:function(){return s}});var l=t(3117),n=t(7294),r=t(6010),o=t(2389),d=t(7392),p=t(7094),i=t(2466),c="tabList__CuJ",m="tabItem_LNqP";function u(e){var a,t,o=e.lazy,u=e.block,s=e.defaultValue,g=e.values,k=e.groupId,y=e.className,N=n.Children.map(e.children,(function(e){if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=g?g:N.map((function(e){var a=e.props;return{value:a.value,label:a.label,attributes:a.attributes}})),b=(0,d.l)(v,(function(e,a){return e.value===a.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var T=null===s?s:null!=(a=null!=s?s:null==(t=N.find((function(e){return e.props.default})))?void 0:t.props.value)?a:N[0].props.value;if(null!==T&&!v.some((function(e){return e.value===T})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+T+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var h=(0,p.U)(),P=h.tabGroupChoices,_=h.setTabGroupChoices,x=(0,n.useState)(T),f=x[0],Z=x[1],I=[],w=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var G=P[k];null!=G&&G!==f&&v.some((function(e){return e.value===G}))&&Z(G)}var j=function(e){var a=e.currentTarget,t=I.indexOf(a),l=v[t].value;l!==f&&(w(a),Z(l),null!=k&&_(k,String(l)))},R=function(e){var a,t=null;switch(e.key){case"ArrowRight":var l,n=I.indexOf(e.currentTarget)+1;t=null!=(l=I[n])?l:I[0];break;case"ArrowLeft":var r,o=I.indexOf(e.currentTarget)-1;t=null!=(r=I[o])?r:I[I.length-1]}null==(a=t)||a.focus()};return n.createElement("div",{className:(0,r.Z)("tabs-container",c)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":u},y)},v.map((function(e){var a=e.value,t=e.label,o=e.attributes;return n.createElement("li",(0,l.Z)({role:"tab",tabIndex:f===a?0:-1,"aria-selected":f===a,key:a,ref:function(e){return I.push(e)},onKeyDown:R,onFocus:j,onClick:j},o,{className:(0,r.Z)("tabs__item",m,null==o?void 0:o.className,{"tabs__item--active":f===a})}),null!=t?t:a)}))),o?(0,n.cloneElement)(N.filter((function(e){return e.props.value===f}))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},N.map((function(e,a){return(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==f})}))))}function s(e){var a=(0,o.Z)();return n.createElement(u,(0,l.Z)({key:String(a)},e))}},5921:function(e,a,t){t.r(a),t.d(a,{assets:function(){return u},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return s}});var l=t(3117),n=t(102),r=(t(7294),t(3905)),o=t(5488),d=t(5162),p=["components"],i={id:"management-api",title:"Management API"},c=void 0,m={unversionedId:"management-api",id:"management-api",title:"Management API",description:"The primitive API that provides full support for Casbin policy management.",source:"@site/docs/ManagementAPI.mdx",sourceDirName:".",slug:"/management-api",permalink:"/docs/management-api",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/ManagementAPI.mdx",tags:[],version:"current",frontMatter:{id:"management-api",title:"Management API"},sidebar:"docs",previous:{title:"API Overview",permalink:"/docs/api-overview"},next:{title:"RBAC API",permalink:"/docs/rbac-api"}},u={},s=[{value:"Filtered API",id:"filtered-api",level:2},{value:"Reference",id:"reference",level:2},{value:"<code>Enforce()</code>",id:"enforce",level:3},{value:"<code>EnforceWithMatcher()</code>",id:"enforcewithmatcher",level:3},{value:"<code>EnforceEx()</code>",id:"enforceex",level:3},{value:"<code>EnforceExWithMatcher()</code>",id:"enforceexwithmatcher",level:3},{value:"<code>BatchEnforce()</code>",id:"batchenforce",level:3},{value:"<code>GetAllSubjects()</code>",id:"getallsubjects",level:3},{value:"<code>GetAllNamedSubjects()</code>",id:"getallnamedsubjects",level:3},{value:"<code>GetAllObjects()</code>",id:"getallobjects",level:3},{value:"<code>GetAllNamedObjects()</code>",id:"getallnamedobjects",level:3},{value:"<code>GetAllActions()</code>",id:"getallactions",level:3},{value:"<code>GetAllNamedActions()</code>",id:"getallnamedactions",level:3},{value:"<code>GetAllRoles()</code>",id:"getallroles",level:3},{value:"<code>GetAllNamedRoles()</code>",id:"getallnamedroles",level:3},{value:"<code>GetPolicy()</code>",id:"getpolicy",level:3},{value:"<code>GetFilteredPolicy()</code>",id:"getfilteredpolicy",level:3},{value:"<code>GetNamedPolicy()</code>",id:"getnamedpolicy",level:3},{value:"<code>GetFilteredNamedPolicy()</code>",id:"getfilterednamedpolicy",level:3},{value:"<code>GetGroupingPolicy()</code>",id:"getgroupingpolicy",level:3},{value:"<code>GetFilteredGroupingPolicy()</code>",id:"getfilteredgroupingpolicy",level:3},{value:"<code>GetNamedGroupingPolicy()</code>",id:"getnamedgroupingpolicy",level:3},{value:"<code>GetFilteredNamedGroupingPolicy()</code>",id:"getfilterednamedgroupingpolicy",level:3},{value:"<code>HasPolicy()</code>",id:"haspolicy",level:3},{value:"<code>HasNamedPolicy()</code>",id:"hasnamedpolicy",level:3},{value:"<code>AddPolicy()</code>",id:"addpolicy",level:3},{value:"<code>AddPolicies()</code>",id:"addpolicies",level:3},{value:"<code>AddNamedPolicy()</code>",id:"addnamedpolicy",level:3},{value:"<code>AddNamedPolicies()</code>",id:"addnamedpolicies",level:3},{value:"<code>RemovePolicy()</code>",id:"removepolicy",level:3},{value:"<code>RemovePolicies()</code>",id:"removepolicies",level:3},{value:"<code>RemoveFilteredPolicy()</code>",id:"removefilteredpolicy",level:3},{value:"<code>RemoveNamedPolicy()</code>",id:"removenamedpolicy",level:3},{value:"<code>RemoveNamedPolicies()</code>",id:"removenamedpolicies",level:3},{value:"<code>RemoveFilteredNamedPolicy()</code>",id:"removefilterednamedpolicy",level:3},{value:"<code>HasGroupingPolicy()</code>",id:"hasgroupingpolicy",level:3},{value:"<code>HasNamedGroupingPolicy()</code>",id:"hasnamedgroupingpolicy",level:3},{value:"<code>AddGroupingPolicy()</code>",id:"addgroupingpolicy",level:3},{value:"<code>AddGroupingPolicies()</code>",id:"addgroupingpolicies",level:3},{value:"<code>AddNamedGroupingPolicy()</code>",id:"addnamedgroupingpolicy",level:3},{value:"<code>AddNamedGroupingPolicies()</code>",id:"addnamedgroupingpolicies",level:3},{value:"<code>RemoveGroupingPolicy()</code>",id:"removegroupingpolicy",level:3},{value:"<code>RemoveGroupingPolicies()</code>",id:"removegroupingpolicies",level:3},{value:"<code>RemoveFilteredGroupingPolicy()</code>",id:"removefilteredgroupingpolicy",level:3},{value:"<code>RemoveNamedGroupingPolicy()</code>",id:"removenamedgroupingpolicy",level:3},{value:"<code>RemoveNamedGroupingPolicies()</code>",id:"removenamedgroupingpolicies",level:3},{value:"<code>RemoveFilteredNamedGroupingPolicy()</code>",id:"removefilterednamedgroupingpolicy",level:3},{value:"<code>UpdatePolicy()</code>",id:"updatepolicy",level:3},{value:"<code>UpdatePolicies()</code>",id:"updatepolicies",level:3},{value:"<code>AddFunction()</code>",id:"addfunction",level:3},{value:"<code>LoadFilteredPolicy()</code>",id:"loadfilteredpolicy",level:3},{value:"<code>LoadIncrementalFilteredPolicy()</code>",id:"loadincrementalfilteredpolicy",level:3},{value:"<code>UpdateGroupingPolicy()</code>",id:"updategroupingpolicy",level:3},{value:"<code>UpdateNamedGroupingPolicy()</code>",id:"updatenamedgroupingpolicy",level:3}],g={toc:s};function k(e){var a=e.components,t=(0,n.Z)(e,p);return(0,r.kt)("wrapper",(0,l.Z)({},g,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The primitive API that provides full support for Casbin policy management."),(0,r.kt)("h2",{id:"filtered-api"},"Filtered API"),(0,r.kt)("p",null,"Almost all filtered api has the same parameters ",(0,r.kt)("inlineCode",{parentName:"p"},"(fieldIndex int, fieldValues ...string)"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"fieldIndex")," is the index where matching start, ",(0,r.kt)("inlineCode",{parentName:"p"},"fieldValues")," denotes the values result should have. Note that empty string in fieldValues could be any word."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, book, read\np, bob, book, read\np, bob, book, write\np, alice, pen, get\np, bob, pen ,get\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e.GetFilteredPolicy(1, "book") // will return: [[alice book read] [bob book read] [bob book write]]\n\ne.GetFilteredPolicy(1, "book", "read") // will return: [[alice book read] [bob book read]]\n\ne.GetFilteredPolicy(0, "alice", "", "read") // will return: [[alice book read]]\n\ne.GetFilteredPolicy(0, "alice") // will return: [[alice book read] [alice pen get]]\n')),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("p",null,"global variable ",(0,r.kt)("inlineCode",{parentName:"p"},"e")," is Enforcer instance."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e, err := NewEnforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const e = await newEnforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$e = new Enforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv');\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'e = casbin.Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var e = new Enforcer("path/to/model.conf", "path/to/policy.csv");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut e = Enforce::new("examples/rbac_model.conf", "examples/rbac_policy.csv").await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Enforcer e = new Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv");\n')))),(0,r.kt)("h3",{id:"enforce"},(0,r.kt)("inlineCode",{parentName:"h3"},"Enforce()")),(0,r.kt)("p",null,'Enforce decides whether a "subject" can access a "object" with the operation "action", input parameters are usually: (sub, obj, act).'),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"ok, err := e.Enforce(request)\n"))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const ok = await e.enforce(request);\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$ok = $e->enforcer($request);\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"ok = e.enforcer(request)\n"))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"boolean ok = e.enforce(request);\n")))),(0,r.kt)("h3",{id:"enforcewithmatcher"},(0,r.kt)("inlineCode",{parentName:"h3"},"EnforceWithMatcher()")),(0,r.kt)("p",null,'EnforceWithMatcher use a custom matcher to decides whether a "subject" can access a "object" with the operation "action", input parameters are usually: (matcher, sub, obj, act), use model matcher by default when matcher is "".'),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"ok, err := e.EnforceWithMatcher(matcher, request)\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$ok = $e->enforceWithMatcher($matcher, $request);\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"ok = e.enforce_with_matcher(matcher, request)\n"))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"boolean ok = e.enforceWithMatcher(matcher, request);\n")))),(0,r.kt)("h3",{id:"enforceex"},(0,r.kt)("inlineCode",{parentName:"h3"},"EnforceEx()")),(0,r.kt)("p",null,"EnforceEx explain enforcement by informing matched rules."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"ok, reason, err := e.EnforceEx(request)\n"))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const ok = await e.enforceEx(request);\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"list($ok, $reason) = $e->enforceEx($request);\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"ok, reason = e.enforce_ex(request)\n")))),(0,r.kt)("h3",{id:"enforceexwithmatcher"},(0,r.kt)("inlineCode",{parentName:"h3"},"EnforceExWithMatcher()")),(0,r.kt)("p",null,"EnforceExWithMatcher use a custom matcher and explain enforcement by informing matched rules."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"ok, reason, err := e.EnforceExWithMatcher(matcher, request)\n")))),(0,r.kt)("h3",{id:"batchenforce"},(0,r.kt)("inlineCode",{parentName:"h3"},"BatchEnforce()")),(0,r.kt)("p",null,"BatchEnforce enforces each request and returns result in a bool array"),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"boolArray, err := e.BatchEnforce(requests)\n"))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const boolArray = await e.batchEnforce(requests);\n"))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"List<Boolean> boolArray = e.batchEnforce(requests);\n")))),(0,r.kt)("h3",{id:"getallsubjects"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetAllSubjects()")),(0,r.kt)("p",null,"GetAllSubjects gets the list of subjects that show up in the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"allSubjects := e.GetAllSubjects()\n"))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const allSubjects = await e.getAllSubjects()\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$allSubjects = $e->getAllSubjects();\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"all_subjects = e.get_all_subjects()\n"))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var allSubjects = e.GetAllSubjects();\n"))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let all_subjects = e.get_all_subjects();\n"))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"List<String> allSubjects = e.getAllSubjects();\n")))),(0,r.kt)("h3",{id:"getallnamedsubjects"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetAllNamedSubjects()")),(0,r.kt)("p",null,"GetAllNamedSubjects gets the list of subjects that show up in the current named policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'allNamedSubjects := e.GetAllNamedSubjects("p")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const allNamedSubjects = await e.getAllNamedSubjects('p')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$allNamedSubjects = $e->getAllNamedSubjects("p");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'all_named_subjects = e.get_all_named_subjects("p")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var allNamedSubjects = e.GetAllNamedSubjects("p");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let all_named_subjects = e.get_all_named_subjects("p");\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> allNamedSubjects = e.getAllNamedSubjects("p");\n')))),(0,r.kt)("h3",{id:"getallobjects"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetAllObjects()")),(0,r.kt)("p",null,"GetAllObjects gets the list of objects that show up in the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"allObjects := e.GetAllObjects()\n"))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const allObjects = await e.getAllObjects()\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$allObjects = $e->getAllObjects();\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"all_objects = e.get_all_objects()\n"))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var allObjects = e.GetAllObjects();\n"))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let all_objects = e.get_all_objects();\n"))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"List<String> allObjects = e.getAllObjects();\n")))),(0,r.kt)("h3",{id:"getallnamedobjects"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetAllNamedObjects()")),(0,r.kt)("p",null,"GetAllNamedObjects gets the list of objects that show up in the current named policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'allNamedObjects := e.GetAllNamedObjects("p")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const allNamedObjects = await e.getAllNamedObjects('p')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$allNamedObjects = $e->getAllNamedObjects("p");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'all_named_objects = e.get_all_named_objects("p")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var allNamedObjects = e.GetAllNamedObjects("p");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let all_named_objects = e.get_all_named_objects("p");\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> allNamedObjects = e.getAllNamedObjects("p");\n')))),(0,r.kt)("h3",{id:"getallactions"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetAllActions()")),(0,r.kt)("p",null,"GetAllActions gets the list of actions that show up in the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"allActions := e.GetAllActions()\n"))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const allActions = await e.getAllActions()\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$allActions = $e->getAllActions();\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"all_actions = e.get_all_actions()\n"))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var allActions = e.GetAllActions();\n"))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let all_actions = e.get_all_actions();\n"))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"List<String> allActions = e.getAllActions();\n")))),(0,r.kt)("h3",{id:"getallnamedactions"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetAllNamedActions()")),(0,r.kt)("p",null,"GetAllNamedActions gets the list of actions that show up in the current named policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'allNamedActions := e.GetAllNamedActions("p")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const allNamedActions = await e.getAllNamedActions('p')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$allNamedActions = $e->getAllNamedActions("p");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'all_named_actions = e.get_all_named_actions("p")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var allNamedActions = e.GetAllNamedActions("p");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let all_named_actions = e.get_all_named_actions("p");\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> allNamedActions = e.getAllNamedActions("p");\n')))),(0,r.kt)("h3",{id:"getallroles"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetAllRoles()")),(0,r.kt)("p",null,"GetAllRoles gets the list of roles that show up in the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"allRoles = e.GetAllRoles()\n"))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const allRoles = await e.getAllRoles()\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$allRoles = $e->getAllRoles();\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"all_roles = e.get_all_roles()\n"))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var allRoles = e.GetAllRoles();\n"))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let all_roles = e.get_all_roles();\n"))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"List<String> allRoles = e.getAllRoles();\n")))),(0,r.kt)("h3",{id:"getallnamedroles"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetAllNamedRoles()")),(0,r.kt)("p",null,"GetAllNamedRoles gets the list of roles that show up in the current named policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'allNamedRoles := e.GetAllNamedRoles("g")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const allNamedRoles = await e.getAllNamedRoles('g')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$allNamedRoles = $e->getAllNamedRoles('g');\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'all_named_roles = e.get_all_named_roles("g")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var allNamedRoles = e.GetAllNamedRoles("g");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let all_named_roles = e.get_all_named_roles("g");\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> allNamedRoles = e.getAllNamedRoles("g");\n')))),(0,r.kt)("h3",{id:"getpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetPolicy()")),(0,r.kt)("p",null,"GetPolicy gets all the authorization rules in the policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"policy = e.GetPolicy()\n"))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const policy = await e.getPolicy()\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$policy = $e->getPolicy();\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"policy = e.get_policy()\n"))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var policy = e.GetPolicy();\n"))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let policy = e.get_policy();\n"))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"List<List<String>> policy = e.getPolicy();\n")))),(0,r.kt)("h3",{id:"getfilteredpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetFilteredPolicy()")),(0,r.kt)("p",null,"GetFilteredPolicy gets all the authorization rules in the policy, field filters can be specified."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'filteredPolicy := e.GetFilteredPolicy(0, "alice")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const filteredPolicy = await e.getFilteredPolicy(0, 'alice')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$filteredPolicy = $e->getFilteredPolicy(0, "alice");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'filtered_policy = e.get_filtered_policy(0, "alice")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var filteredPolicy = e.GetFilteredPolicy(0, "alice");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let filtered_policy = e.get_filtered_policy(0, vec!["alice".to_owned()]);\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> filteredPolicy = e.getFilteredPolicy(0, "alice");\n')))),(0,r.kt)("h3",{id:"getnamedpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetNamedPolicy()")),(0,r.kt)("p",null,"GetNamedPolicy gets all the authorization rules in the named policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'namedPolicy := e.GetNamedPolicy("p")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const namedPolicy = await e.getNamedPolicy('p')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$namedPolicy = $e->getNamedPolicy("p");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'named_policy = e.get_named_policy("p")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var namedPolicy = e.GetNamedPolicy("p");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let named_policy = e.get_named_policy("p");\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> namedPolicy = e.getNamedPolicy("p");\n')))),(0,r.kt)("h3",{id:"getfilterednamedpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetFilteredNamedPolicy()")),(0,r.kt)("p",null,"GetFilteredNamedPolicy gets all the authorization rules in the named policy, field filters can be specified."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'filteredNamedPolicy = e.GetFilteredNamedPolicy("p", 0, "bob")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const filteredNamedPolicy = await e.getFilteredNamedPolicy('p', 0, 'bob')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$filteredNamedPolicy = $e->getFilteredNamedPolicy("p", 0, "bob");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'filtered_named_policy = e.get_filtered_named_policy("p", 0, "alice")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var filteredNamedPolicy = e.GetFilteredNamedPolicy("p", 0, "alice");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let filtered_named_policy = e.get_filtered_named_policy("p", 0, vec!["bob".to_owned()]);\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> filteredNamedPolicy = e.getFilteredNamedPolicy("p", 0, "bob");\n')))),(0,r.kt)("h3",{id:"getgroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetGroupingPolicy()")),(0,r.kt)("p",null,"GetGroupingPolicy gets all the role inheritance rules in the policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"groupingPolicy := e.GetGroupingPolicy()\n"))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingPolicy = await e.getGroupingPolicy()\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$groupingPolicy = $e->getGroupingPolicy();\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"grouping_policy = e.get_grouping_policy()\n"))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var groupingPolicy = e.GetGroupingPolicy();\n"))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let grouping_policy = e.get_grouping_policy();\n"))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"List<List<String>> groupingPolicy = e.getGroupingPolicy();\n")))),(0,r.kt)("h3",{id:"getfilteredgroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetFilteredGroupingPolicy()")),(0,r.kt)("p",null,"GetFilteredGroupingPolicy gets all the role inheritance rules in the policy, field filters can be specified."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'filteredGroupingPolicy := e.GetFilteredGroupingPolicy(0, "alice")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const filteredGroupingPolicy = await e.getFilteredGroupingPolicy(0, 'alice')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$filteredGroupingPolicy = $e->getFilteredGroupingPolicy(0, "alice");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'filtered_grouping_policy = e.get_filtered_grouping_policy(0, "alice")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var filteredGroupingPolicy = e.GetFilteredGroupingPolicy(0, "alice");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let filtered_grouping_policy = e.get_filtered_grouping_policy(0, vec!["alice".to_owned()]);\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> filteredGroupingPolicy = e.getFilteredGroupingPolicy(0, "alice");\n')))),(0,r.kt)("h3",{id:"getnamedgroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetNamedGroupingPolicy()")),(0,r.kt)("p",null,"GetNamedGroupingPolicy gets all the role inheritance rules in the policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'namedGroupingPolicy := e.GetNamedGroupingPolicy("g")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const namedGroupingPolicy = await e.getNamedGroupingPolicy('g')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$namedGroupingPolicy = $e->getNamedGroupingPolicy("g");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'named_grouping_policy = e.get_named_grouping_policy("g")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var namedGroupingPolicy = e.GetNamedGroupingPolicy("g");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let named_grouping_policy = e.get_named_grouping_policy("g");\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> namedGroupingPolicy = e.getNamedGroupingPolicy("g");\n')))),(0,r.kt)("h3",{id:"getfilterednamedgroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetFilteredNamedGroupingPolicy()")),(0,r.kt)("p",null,"GetFilteredNamedGroupingPolicy gets all the role inheritance rules in the policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'namedGroupingPolicy := e.GetFilteredNamedGroupingPolicy("g", 0, "alice")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const namedGroupingPolicy = await e.getFilteredNamedGroupingPolicy('g', 0, 'alice')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$namedGroupingPolicy = $e->getFilteredNamedGroupingPolicy("g", 0, "alice");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'named_grouping_policy = e.get_filtered_named_grouping_policy("g", 0, "alice")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var namedGroupingPolicy = e.GetFilteredNamedGroupingPolicy("g", 0, "alice");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let named_grouping_policy = e.get_filtered_named_groupingPolicy("g", 0, vec!["alice".to_owned()]);\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> filteredNamedGroupingPolicy = e.getFilteredNamedGroupingPolicy("g", 0, "alice");\n')))),(0,r.kt)("h3",{id:"haspolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"HasPolicy()")),(0,r.kt)("p",null,"HasPolicy determines whether an authorization rule exists."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'hasPolicy := e.HasPolicy("data2_admin", "data2", "read")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const hasPolicy = await e.hasPolicy('data2_admin', 'data2', 'read')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$hasPolicy = $e->hasPolicy('data2_admin', 'data2', 'read');\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'has_policy = e.has_policy("data2_admin", "data2", "read")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var hasPolicy = e.HasPolicy("data2_admin", "data2", "read");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let has_policy = e.has_policy(vec!["data2_admin".to_owned(), "data2".to_owned(), "read".to_owned()]);\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean hasPolicy = e.hasPolicy("data2_admin", "data2", "read");\n')))),(0,r.kt)("h3",{id:"hasnamedpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"HasNamedPolicy()")),(0,r.kt)("p",null,"HasNamedPolicy determines whether a named authorization rule exists."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'hasNamedPolicy := e.HasNamedPolicy("p", "data2_admin", "data2", "read")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const hasNamedPolicy = await e.hasNamedPolicy('p', 'data2_admin', 'data2', 'read')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$hasNamedPolicy = $e->hasNamedPolicy("p", "data2_admin", "data2", "read");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'has_named_policy = e.has_named_policy("p", "data2_admin", "data2", "read")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var hasNamedPolicy = e.HasNamedPolicy("p", "data2_admin", "data2", "read");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let has_named_policy = e.has_named_policy("p", vec!["data2_admin".to_owned(), "data2".to_owned(), "read".to_owned()]);\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean hasNamedPolicy = e.hasNamedPolicy("p", "data2_admin", "data2", "read");\n')))),(0,r.kt)("h3",{id:"addpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddPolicy()")),(0,r.kt)("p",null,"AddPolicy adds an authorization rule to the current policy.\nIf the rule already exists, the function returns false and the rule will not be added.\nOtherwise the function returns true by adding the new rule."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"added := e.AddPolicy('eve', 'data3', 'read')\n"))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['eve', 'data3', 'read']\nconst added = await e.addPolicy(...p)\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$added = $e->addPolicy('eve', 'data3', 'read');\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'added = e.add_policy("eve", "data3", "read")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddPolicy("eve", "data3", "read");\nor\nvar added = await e.AddPolicyAsync("eve", "data3", "read");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_policy(vec!["eve".to_owned(), "data3".to_owned(), "read".to_owned()]);\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addPolicy("eve", "data3", "read");\n')))),(0,r.kt)("h3",{id:"addpolicies"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddPolicies()")),(0,r.kt)("p",null,"AddPolicies adds authorization rules to the current policy.\nThe operation is atomic in nature.\nHence, if authorization rules consists of rules which are not consistent with the current policy, the function returns false and no policy rule is added to the current policy.\nIf all the authorization rules are consistent with the policy rules, the function returns true and each policy rule is added to the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"jack", "data4", "read"},\n    []string {"katy", "data4", "write"},\n    []string {"leyo", "data4", "read"},\n    []string {"ham", "data4", "write"},\n}\n\nareRulesAdded := e.AddPolicies(rules)\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesAdded = await e.addPolicies(rules);\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["jack", "data4", "read"],\n    ["katy", "data4", "write"],\n    ["leyo", "data4", "read"],\n    ["ham", "data4", "write"]\n]\nare_rules_added = e.add_policies(rules)\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["jack".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["katy".to_owned(), "data4".to_owned(), "write".to_owned()],\n    vec!["leyo".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["ham".to_owned(), "data4".to_owned(), "write".to_owned()],\n];\n\nlet are_rules_added = e.add_policies(rules).await?\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String[][] rules = {\n    {"jack", "data4", "read"},\n    {"katy", "data4", "write"},\n    {"leyo", "data4", "read"},\n    {"ham", "data4", "write"},\n};\n\nboolean areRulesAdded = e.addPolicies(rules);\n')))),(0,r.kt)("h3",{id:"addnamedpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddNamedPolicy()")),(0,r.kt)("p",null,"AddNamedPolicy adds an authorization rule to the current named policy.\nIf the rule already exists, the function returns false and the rule will not be added.\nOtherwise the function returns true by adding the new rule."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'added := e.AddNamedPolicy("p", "eve", "data3", "read")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['eve', 'data3', 'read']\nconst added = await e.addNamedPolicy('p', ...p)\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$added = $e->addNamedPolicy("p", "eve", "data3", "read");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'added = e.add_named_policy("p", "eve", "data3", "read")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddNamedPolicy("p", "eve", "data3", "read");\nor\nvar added = await e.AddNamedPolicyAsync("p", "eve", "data3", "read");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_named_policy("p", vec!["eve".to_owned(), "data3".to_owned(), "read".to_owned()]).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addNamedPolicy("p", "eve", "data3", "read");\n')))),(0,r.kt)("h3",{id:"addnamedpolicies"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddNamedPolicies()")),(0,r.kt)("p",null,"AddNamedPolicies adds authorization rules to the current named policy.\nThe operation is atomic in nature.\nHence, if authorization rules consists of rules which are not consistent with the current policy, the function returns false and no policy rule is added to the current policy.\nIf all the authorization rules are consistent with the policy rules, the function returns true and each policy rule is added to the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"jack", "data4", "read"},\n    []string {"katy", "data4", "write"},\n    []string {"leyo", "data4", "read"},\n    []string {"ham", "data4", "write"},\n}\n\nareRulesAdded := e.AddNamedPolicies("p", rules)\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesAdded = await e.addNamedPolicies('p', rules);\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["jack", "data4", "read"],\n    ["katy", "data4", "write"],\n    ["leyo", "data4", "read"],\n    ["ham", "data4", "write"]\n]\nare_rules_added = e.add_named_policies("p", rules)\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["jack".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["katy".to_owned(), "data4".to_owned(), "write".to_owned()],\n    vec!["leyo".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["ham".to_owned(), "data4".to_owned(), "write".to_owned()],\n];\n\nlet are_rules_added := e.add_named_policies("p", rules).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> rules = Arrays.asList(\n    Arrays.asList("jack", "data4", "read"),\n    Arrays.asList("katy", "data4", "write"),\n    Arrays.asList("leyo", "data4", "read"),\n    Arrays.asList("ham", "data4", "write")\n);\nboolean areRulesAdded = e.addNamedPolicies("p", rules);\n')))),(0,r.kt)("h3",{id:"removepolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"RemovePolicy()")),(0,r.kt)("p",null,"RemovePolicy removes an authorization rule from the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemovePolicy("alice", "data1", "read")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['alice', 'data1', 'read']\nconst removed = await e.removePolicy(...p)\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removePolicy("alice", "data1", "read");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_policy("alice", "data1", "read")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemovePolicy("alice", "data1", "read");\nor\nvar removed = await e.RemovePolicyAsync("alice", "data1", "read");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_policy(vec!["alice".to_owned(), "data1".to_owned(), "read".to_owned()]).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removePolicy("alice", "data1", "read");\n')))),(0,r.kt)("h3",{id:"removepolicies"},(0,r.kt)("inlineCode",{parentName:"h3"},"RemovePolicies()")),(0,r.kt)("p",null,"RemovePolicies removes authorization rules from the current policy.\nThe operation is atomic in nature.\nHence, if authorization rules consists of rules which are not consistent with the current policy, the function returns false and no policy rule is removed from the current policy.\nIf all the authorization rules are consistent with the policy rules, the function returns true and each policy rule is removed from the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"jack", "data4", "read"},\n    []string {"katy", "data4", "write"},\n    []string {"leyo", "data4", "read"},\n    []string {"ham", "data4", "write"},\n}\n\nareRulesRemoved := e.RemovePolicies(rules)\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesRemoved = await e.removePolicies(rules);\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["jack", "data4", "read"],\n    ["katy", "data4", "write"],\n    ["leyo", "data4", "read"],\n    ["ham", "data4", "write"]\n]\nare_rules_removed = e.remove_policies(rules)\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["jack".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["katy".to_owned(), "data4".to_owned(), "write".to_owned()],\n    vec!["leyo".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["ham".to_owned(), "data4".to_owned(), "write".to_owned()],\n];\n\nlet are_rules_removed = e.remove_policies(rules).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String[][] rules = {\n    {"jack", "data4", "read"},\n    {"katy", "data4", "write"},\n    {"leyo", "data4", "read"},\n    {"ham", "data4", "write"},\n};\nboolean areRulesRemoved = e.removePolicies(rules);\n')))),(0,r.kt)("h3",{id:"removefilteredpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"RemoveFilteredPolicy()")),(0,r.kt)("p",null,"RemoveFilteredPolicy removes an authorization rule from the current policy, field filters can be specified.\nRemovePolicy removes an authorization rule from the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveFilteredPolicy(0, "alice", "data1", "read")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['alice', 'data1', 'read']\nconst removed = await e.removeFilteredPolicy(0, ...p)\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeFilteredPolicy(0, "alice", "data1", "read");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_filtered_policy(0, "alice", "data1", "read")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveFilteredPolicy("alice", "data1", "read");\nor\nvar removed = await e.RemoveFilteredPolicyAsync("alice", "data1", "read");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_filtered_policy(0, vec!["alice".to_owned(), "data1".to_owned(), "read".to_owned()]).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeFilteredPolicy(0, "alice", "data1", "read");\n')))),(0,r.kt)("h3",{id:"removenamedpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"RemoveNamedPolicy()")),(0,r.kt)("p",null,"RemoveNamedPolicy removes an authorization rule from the current named policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveNamedPolicy("p", "alice", "data1", "read")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['alice', 'data1', 'read']\nconst removed = await e.removeNamedPolicy('p', ...p)\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeNamedPolicy("p", "alice", "data1", "read");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_named_policy("p", "alice", "data1", "read")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveNamedPolicy("p", "alice", "data1", "read");\nor\nvar removed = await e.RemoveNamedPolicyAsync("p", "alice", "data1", "read");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_named_policy("p", vec!["alice".to_owned(), "data1".to_owned(), "read".to_owned()]).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeNamedPolicy("p", "alice", "data1", "read");\n')))),(0,r.kt)("h3",{id:"removenamedpolicies"},(0,r.kt)("inlineCode",{parentName:"h3"},"RemoveNamedPolicies()")),(0,r.kt)("p",null,"RemoveNamedPolicies removes authorization rules from the current named policy.\nThe operation is atomic in nature.\nHence, if authorization rules consists of rules which are not consistent with the current policy, the function returns false and no policy rule is removed from the current policy.\nIf all the authorization rules are consistent with the policy rules, the function returns true and each policy rule is removed from the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"jack", "data4", "read"},\n    []string {"katy", "data4", "write"},\n    []string {"leyo", "data4", "read"},\n    []string {"ham", "data4", "write"},\n}\n\nareRulesRemoved := e.RemoveNamedPolicies("p", rules)\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesRemoved = await e.removeNamedPolicies('p', rules);\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["jack", "data4", "read"],\n    ["katy", "data4", "write"],\n    ["leyo", "data4", "read"],\n    ["ham", "data4", "write"]\n]\nare_rules_removed = e.remove_named_policies("p", rules)\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["jack".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["katy".to_owned(), "data4".to_owned(), "write".to_owned()],\n    vec!["leyo".to_owned(), "data4".to_owned(), "read".to_owned()],\n    vec!["ham".to_owned(), "data4".to_owned(), "write".to_owned()],\n];\n\nlet areRulesRemoved = e.remove_named_policies("p", rules).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<List<String>> rules = Arrays.asList(\n    Arrays.asList("jack", "data4", "read"),\n    Arrays.asList("katy", "data4", "write"),\n    Arrays.asList("leyo", "data4", "read"),\n    Arrays.asList("ham", "data4", "write")\n);\nboolean areRulesRemoved = e.removeNamedPolicies("p", rules);\n')))),(0,r.kt)("h3",{id:"removefilterednamedpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"RemoveFilteredNamedPolicy()")),(0,r.kt)("p",null,"RemoveFilteredNamedPolicy removes an authorization rule from the current named policy, field filters can be specified."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveFilteredNamedPolicy("p", 0, "alice", "data1", "read")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const p = ['alice', 'data1', 'read']\nconst removed = await e.removeFilteredNamedPolicy('p', 0, ...p)\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeFilteredNamedPolicy("p", 0, "alice", "data1", "read");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_filtered_named_policy("p", 0, "alice", "data1", "read")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveFilteredNamedPolicy("p", 0, "alice", "data1", "read");\nor\nvar removed = e.RemoveFilteredNamedPolicyAync("p", 0, "alice", "data1", "read");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_filtered_named_policy("p", 0, vec!["alice".to_owned(), "data1".to_owned(), "read".to_owned()]).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeFilteredNamedPolicy("p", 0, "alice", "data1", "read");\n')))),(0,r.kt)("h3",{id:"hasgroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"HasGroupingPolicy()")),(0,r.kt)("p",null,"HasGroupingPolicy determines whether a role inheritance rule exists."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'has := e.HasGroupingPolicy("alice", "data2_admin")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const has = await e.hasGroupingPolicy('alice', 'data2_admin')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$has = $e->hasGroupingPolicy("alice", "data2_admin");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'has = e.has_grouping_policy("alice", "data2_admin")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var has = e.HasGroupingPolicy("alice", "data2_admin");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let has = e.has_grouping_policy(vec!["alice".to_owned(), "data2_admin".to_owned()]);\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean has = e.hasGroupingPolicy("alice", "data2_admin");\n')))),(0,r.kt)("h3",{id:"hasnamedgroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"HasNamedGroupingPolicy()")),(0,r.kt)("p",null,"HasNamedGroupingPolicy determines whether a named role inheritance rule exists."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'has := e.HasNamedGroupingPolicy("g", "alice", "data2_admin")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const has = await e.hasNamedGroupingPolicy('g', 'alice', 'data2_admin')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$has = $e->hasNamedGroupingPolicy("g", "alice", "data2_admin");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'has = e.has_named_grouping_policy("g", "alice", "data2_admin")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var has = e.HasNamedGroupingPolicy("g", "alice", "data2_admin");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let has = e.has_named_grouping_policy("g", vec!["alice".to_owned(), "data2_admin".to_owned()]);\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean has = e.hasNamedGroupingPolicy("g", "alice", "data2_admin");\n')))),(0,r.kt)("h3",{id:"addgroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddGroupingPolicy()")),(0,r.kt)("p",null,"AddGroupingPolicy adds a role inheritance rule to the current policy.\nIf the rule already exists, the function returns false and the rule will not be added.\nOtherwise the function returns true by adding the new rule."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'added := e.AddGroupingPolicy("group1", "data2_admin")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const added = await e.addGroupingPolicy('group1', 'data2_admin')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$added = $e->addGroupingPolicy("group1", "data2_admin");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'added = e.add_grouping_policy("group1", "data2_admin")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddGroupingPolicy("group1", "data2_admin");\nor\nvar added = await e.AddGroupingPolicyAsync("group1", "data2_admin");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_grouping_policy(vec!["group1".to_owned(), "data2_admin".to_owned()]).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addGroupingPolicy("group1", "data2_admin");\n')))),(0,r.kt)("h3",{id:"addgroupingpolicies"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddGroupingPolicies()")),(0,r.kt)("p",null,"AddGroupingPolicies adds role inheritance rules to the current policy.\nThe operation is atomic in nature.\nHence, if authorization rules consists of rules which are not consistent with the current policy, the function returns false and no policy rule is added to the current policy.\nIf all authorization the rules are consistent with the policy rules, the function returns true and each policy rule is added to the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"ham", "data4_admin"},\n    []string {"jack", "data5_admin"},\n}\n\nareRulesAdded := e.AddGroupingPolicies(rules)\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesAdded = await e.addGroupingPolicies(groupingRules);\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["ham", "data4_admin"],\n    ["jack", "data5_admin"]\n]\n\nare_rules_added = e.add_grouping_policies(rules)\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["ham".to_owned(), "data4_admin".to_owned()],\n    vec!["jack".to_owned(), "data5_admin".to_owned()],\n];\n\nlet areRulesAdded = e.add_grouping_policies(rules).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String[][] groupingRules = {\n    {"ham", "data4_admin"},\n    {"jack", "data5_admin"}\n};\nboolean areRulesAdded = e.addGroupingPolicies(groupingRules);\n')))),(0,r.kt)("h3",{id:"addnamedgroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddNamedGroupingPolicy()")),(0,r.kt)("p",null,"AddNamedGroupingPolicy adds a named role inheritance rule to the current policy.\nIf the rule already exists, the function returns false and the rule will not be added.\nOtherwise the function returns true by adding the new rule."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'added := e.AddNamedGroupingPolicy("g", "group1", "data2_admin")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const added = await e.addNamedGroupingPolicy('g', 'group1', 'data2_admin')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$added = $e->addNamedGroupingPolicy("g", "group1", "data2_admin");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'added = e.add_named_grouping_policy("g", "group1", "data2_admin")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var added = e.AddNamedGroupingPolicy("g", "group1", "data2_admin");\nor\nvar added = await e.AddNamedGroupingPolicyAsync("g", "group1", "data2_admin");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let added = e.add_named_grouping_policy("g", vec!["group1".to_owned(), "data2_admin".to_owned()]).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean added = e.addNamedGroupingPolicy("g", "group1", "data2_admin");\n')))),(0,r.kt)("h3",{id:"addnamedgroupingpolicies"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddNamedGroupingPolicies()")),(0,r.kt)("p",null,"AddNamedGroupingPolicies adds named role inheritance rules to the current policy.\nThe operation is atomic in nature.\nHence, if authorization rules consists of rules which are not consistent with the current policy, the function returns false and no policy rule is added to the current policy.\nIf all the authorization rules are consistent with the policy rules, the function returns true and each policy rule is added to the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"ham", "data4_admin"},\n    []string {"jack", "data5_admin"},\n}\n\nareRulesAdded := e.AddNamedGroupingPolicies("g", rules)\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesAdded = await e.addNamedGroupingPolicies('g', groupingRules);\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["ham", "data4_admin"],\n    ["jack", "data5_admin"]\n]\n\nare_rules_added = e.add_named_grouping_policies("g", rules)\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["ham".to_owned(), "data4_admin".to_owned()],\n    vec!["jack".to_owned(), "data5_admin".to_owned()],\n];\n\nlet are_rules_added = e.add_named_grouping_policies("g", rules).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String[][] groupingRules = {\n    {"ham", "data4_admin"},\n    {"jack", "data5_admin"}\n};\nboolean areRulesAdded = e.addNamedGroupingPolicies("g", groupingRules);\n')))),(0,r.kt)("h3",{id:"removegroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"RemoveGroupingPolicy()")),(0,r.kt)("p",null,"RemoveGroupingPolicy removes a role inheritance rule from the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveGroupingPolicy("alice", "data2_admin")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const removed = await e.removeGroupingPolicy('alice', 'data2_admin')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeGroupingPolicy("alice", "data2_admin");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_grouping_policy("alice", "data2_admin")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveGroupingPolicy("alice", "data2_admin");\nor\nvar removed = await e.RemoveGroupingPolicyAsync("alice", "data2_admin");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_grouping_policy(vec!["alice".to_owned(), "data2_admin".to_owned()]).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeGroupingPolicy("alice", "data2_admin");\n')))),(0,r.kt)("h3",{id:"removegroupingpolicies"},(0,r.kt)("inlineCode",{parentName:"h3"},"RemoveGroupingPolicies()")),(0,r.kt)("p",null,"RemoveGroupingPolicies removes role inheritance rules from the current policy.\nThe operation is atomic in nature.\nHence, if authorization rules consists of rules which are not consistent with the current policy, the function returns false and no policy rule is removed from the current policy.\nIf all the authorization rules are consistent with the policy rules, the function returns true and each policy rule is removed from the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n                []string {"ham", "data4_admin"},\n                []string {"jack", "data5_admin"},\n        }\n\nareRulesRemoved := e.RemoveGroupingPolicies(rules)\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesRemoved = await e.removeGroupingPolicies(groupingRules);\n"))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["ham".to_owned(), "data4_admin".to_owned()],\n    vec!["jack".to_owned(), "data5_admin".to_owned()],\n];\n\nlet are_rules_removed = e.remove_grouping_policies(rules).await?;\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["ham", "data4_admin"],\n    ["jack", "data5_admin"]\n]\n\nare_rules_removed = e.remove_grouping_policies(rules)\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String[][] groupingRules = {\n    {"ham", "data4_admin"},\n    {"jack", "data5_admin"}\n};\nboolean areRulesRemoved = e.removeGroupingPolicies(groupingRules);\n')))),(0,r.kt)("h3",{id:"removefilteredgroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"RemoveFilteredGroupingPolicy()")),(0,r.kt)("p",null,"RemoveFilteredGroupingPolicy removes a role inheritance rule from the current policy, field filters can be specified."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveFilteredGroupingPolicy(0, "alice")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const removed = await e.removeFilteredGroupingPolicy(0, 'alice')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeFilteredGroupingPolicy(0, "alice");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_filtered_grouping_policy(0, "alice")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveFilteredGroupingPolicy(0, "alice");\nor\nvar removed = await e.RemoveFilteredGroupingPolicyAsync(0, "alice");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_filtered_grouping_policy(0, vec!["alice".to_owned()]).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeFilteredGroupingPolicy(0, "alice");\n')))),(0,r.kt)("h3",{id:"removenamedgroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"RemoveNamedGroupingPolicy()")),(0,r.kt)("p",null,"RemoveNamedGroupingPolicy removes a role inheritance rule from the current named policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveNamedGroupingPolicy("g", "alice")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const removed = await e.removeNamedGroupingPolicy('g', 'alice')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeNamedGroupingPolicy("g", "alice");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_named_grouping_policy("g", "alice", "data2_admin")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveNamedGroupingPolicy("g", "alice");\nor \nvar removed = await e.RemoveNamedGroupingPolicyAsync("g", "alice");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_named_grouping_policy("g", vec!["alice".to_owned()]).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeNamedGroupingPolicy("g", "alice");\n')))),(0,r.kt)("h3",{id:"removenamedgroupingpolicies"},(0,r.kt)("inlineCode",{parentName:"h3"},"RemoveNamedGroupingPolicies()")),(0,r.kt)("p",null,"RemoveNamedGroupingPolicies removes named role inheritance rules from the current policy.\nThe operation is atomic in nature.\nHence, if authorization rules consists of rules which are not consistent with the current policy, the function returns false and no policy rule is removed from the current policy.\nIf all the authorization rules are consistent with the policy rules, the function returns true and each policy rule is removed from the current policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'rules := [][] string {\n    []string {"ham", "data4_admin"},\n    []string {"jack", "data5_admin"},\n}\n\nareRulesRemoved := e.RemoveNamedGroupingPolicies("g", rules)\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesRemoved = await e.removeNamedGroupingPolicies('g', groupingRules);\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'rules = [\n    ["ham", "data4_admin"],\n    ["jack", "data5_admin"]\n]\nare_rules_removed = e.remove_named_grouping_policies("g", rules)\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let rules = vec![\n    vec!["ham".to_owned(), "data4_admin".to_owned()],\n    vec!["jack".to_owned(), "data5_admin".to_owned()],\n];\n\nlet are_rules_removed = e.remove_named_grouping_policies("g", rules).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String[][] groupingRules = {\n    {"ham", "data4_admin"},\n    {"jack", "data5_admin"}\n};\nboolean areRulesRemoved = e.removeNamedGroupingPolicies("g", groupingRules);\n')))),(0,r.kt)("h3",{id:"removefilterednamedgroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"RemoveFilteredNamedGroupingPolicy()")),(0,r.kt)("p",null,"RemoveFilteredNamedGroupingPolicy removes a role inheritance rule from the current named policy, field filters can be specified."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'removed := e.RemoveFilteredNamedGroupingPolicy("g", 0, "alice")\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const removed = await e.removeFilteredNamedGroupingPolicy('g', 0, 'alice')\n"))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$removed = $e->removeFilteredNamedGroupingPolicy("g", 0, "alice");\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'removed = e.remove_filtered_named_grouping_policy("g", 0, "alice")\n'))),(0,r.kt)(d.Z,{value:".NET",label:".NET",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var removed = e.RemoveFilteredNamedGroupingPolicy("g", 0, "alice");\nor\nvar removed = await e.RemoveFilteredNamedGroupingPolicyAsync("g", 0, "alice");\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let removed = e.remove_filtered_named_groupingPolicy("g", 0, vec!["alice".to_owned()]).await?;\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean removed = e.removeFilteredNamedGroupingPolicy("g", 0, "alice");\n')))),(0,r.kt)("h3",{id:"updatepolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"UpdatePolicy()")),(0,r.kt)("p",null,"UpdatePolicy update a old policy to new policy."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'updated, err := e.UpdatePolicy([]string{"eve", "data3", "read"}, []string{"eve", "data3", "write"})\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const update = await e.updatePolicy(["eve", "data3", "read"], ["eve", "data3", "write"]);\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'updated = e.update_policy(["eve", "data3", "read"], ["eve", "data3", "write"])\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean updated = e.updatePolicy(Arrays.asList("eve", "data3", "read"), Arrays.asList("eve", "data3", "write"));\n')))),(0,r.kt)("h3",{id:"updatepolicies"},(0,r.kt)("inlineCode",{parentName:"h3"},"UpdatePolicies()")),(0,r.kt)("p",null,"UpdatePolicies updates all old policies to new policies."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'updated, err := e.UpdatePolicies([][]string{{"eve", "data3", "read"}, {"jack", "data3", "read"}}, [][]string{{"eve", "data3", "write"}, {"jack", "data3", "write"}})\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'old_rules = [["eve", "data3", "read"], ["jack", "data3", "read"]]\nnew_rules = [["eve", "data3", "write"], ["jack", "data3", "write"]]\n\nupdated = e.update_policies(old_rules, new_rules)\n')))),(0,r.kt)("h3",{id:"addfunction"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddFunction()")),(0,r.kt)("p",null,"AddFunction adds a customized function."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func CustomFunction(key1 string, key2 string) bool {\n    if key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data/:resource" {\n        return true\n    } else if key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data2/:id/using/:resId" {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc CustomFunctionWrapper(args ...interface{}) (interface{}, error) {\n    key1 := args[0].(string)\n    key2 := args[1].(string)\n\n    return bool(CustomFunction(key1, key2)), nil\n}\n\ne.AddFunction("keyMatchCustom", CustomFunctionWrapper)\n'))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'function customFunction(key1, key2){\n    if(key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data/:resource") {\n        return true\n    } else if(key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data2/:id/using/:resId") {\n        return true\n    } else {\n        return false\n    }\n}\n\ne.addFunction("keyMatchCustom", customFunction);\n'))),(0,r.kt)(d.Z,{value:"PHP",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'func customFunction($key1, $key2) {\n    if ($key1 == "/alice_data2/myid/using/res_id" && $key2 == "/alice_data/:resource") {\n        return true;\n    } elseif ($key1 == "/alice_data2/myid/using/res_id" && $key2 == "/alice_data2/:id/using/:resId") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunc customFunctionWrapper(...$args){\n    $key1 := $args[0];\n    $key2 := $args[1];\n\n    return customFunction($key1, $key2);\n}\n\n$e->addFunction("keyMatchCustom", customFunctionWrapper);\n'))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def custom_function(key1, key2):\n    return ((key1 == "/alice_data2/myid/using/res_id" and key2 == "/alice_data/:resource") or (key1 == "/alice_data2/myid/using/res_id" and key2 == "/alice_data2/:id/using/:resId"))\n\n\ne.add_function("keyMatchCustom", custom_function)\n'))),(0,r.kt)(d.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn custom_function(key1: STring, key2: String) {\n    key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data/:resource" || key1 == "/alice_data2/myid/using/res_id" && key2 == "/alice_data2/:id/using/:resId"\n}\n\n\ne.add_function("keyMatchCustom", custom_function);\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public static class CustomFunc extends CustomFunction {\n    @Override\n    public AviatorObject call(Map<String, Object> env, AviatorObject arg1, AviatorObject arg2) {\n        String key1 = FunctionUtils.getStringValue(arg1, env);\n        String key2 = FunctionUtils.getStringValue(arg2, env);\n        if (key1.equals("/alice_data2/myid/using/res_id") && key2.equals("/alice_data/:resource")) {\n            return AviatorBoolean.valueOf(true);\n        } else if (key1.equals("/alice_data2/myid/using/res_id") && key2.equals("/alice_data2/:id/using/:resId")) {\n            return AviatorBoolean.valueOf(true);\n        } else {\n            return AviatorBoolean.valueOf(false);\n        }\n    }\n\n    @Override\n    public String getName() {\n        return "keyMatchCustom";\n    }\n}\n\nFunctionTest.CustomFunc customFunc = new FunctionTest.CustomFunc();\ne.addFunction(customFunc.getName(), customFunc);\n')))),(0,r.kt)("h3",{id:"loadfilteredpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"LoadFilteredPolicy()")),(0,r.kt)("p",null,"LoadFilteredPolicy loads filtered policies from file/database."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"err := e.LoadFilteredPolicy()\n"))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const ok = await e.loadFilteredPolicy();\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class Filter:\n    P = []\n    G = []\n\nadapter = casbin.persist.adapters.FilteredAdapter("rbac_with_domains_policy.csv")\ne = casbin.Enforcer("rbac_with_domains_model.conf", adapter)\nfilter = Filter()\nfilter.P = ["", "domain1"]\nfilter.G = ["", "", "domain1"]\ne.load_filtered_policy(filter)\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'e.loadFilteredPolicy(new String[] { "", "domain1" });\n')))),(0,r.kt)("h3",{id:"loadincrementalfilteredpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"LoadIncrementalFilteredPolicy()")),(0,r.kt)("p",null,"LoadIncrementalFilteredPolicy append a filtered policy from file/database."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"err := e.LoadIncrementalFilteredPolicy()\n"))),(0,r.kt)(d.Z,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const ok = await e.loadIncrementalFilteredPolicy();\n"))),(0,r.kt)(d.Z,{value:"Python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'adapter = casbin.persist.adapters.FilteredAdapter("rbac_with_domains_policy.csv")\ne = casbin.Enforcer("rbac_with_domains_model.conf", adapter)\nfilter = Filter()\nfilter.P = ["", "domain1"]\nfilter.G = ["", "", "domain1"]\ne.load_increment_filtered_policy(filter)\n')))),(0,r.kt)("h3",{id:"updategroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"UpdateGroupingPolicy()")),(0,r.kt)("p",null,"UpdateGroupingPolicy updates oldRule to newRulein ",(0,r.kt)("inlineCode",{parentName:"p"},"g")," section"),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'succeed, err : = e.UpdateGroupingPolicy([]string{"data3_admin", "data4_admin"}, []string{"admin", "data4_admin"})\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Java"},'boolean succeed = e.updateGroupingPolicy(Arrays.asList("data3_admin", "data4_admin"), Arrays.asList("admin", "data4_admin"));\n')))),(0,r.kt)("h3",{id:"updatenamedgroupingpolicy"},(0,r.kt)("inlineCode",{parentName:"h3"},"UpdateNamedGroupingPolicy()")),(0,r.kt)("p",null,"UpdateNamedGroupingPolicy updates oldRule named ",(0,r.kt)("inlineCode",{parentName:"p"},"ptype")," to newRulein ",(0,r.kt)("inlineCode",{parentName:"p"},"g")," section"),(0,r.kt)("p",null,"For example:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'succeed, err : = e.UpdateGroupingPolicy("g1",[]string{"data3_admin", "data4_admin"}, []string{"admin", "data4_admin"})\n'))),(0,r.kt)(d.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Java"},'boolean succeed = e.updateNamedGroupingPolicy("g1", Arrays.asList("data3_admin", "data4_admin"), Arrays.asList("admin", "data4_admin"));\n')))))}k.isMDXComponent=!0}}]);