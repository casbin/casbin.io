"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[2014],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,u=d["".concat(c,".").concat(m)]||d[m]||f[m]||a;return n?r.createElement(u,o(o({ref:t},s),{},{components:n})):r.createElement(u,o({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2469:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const a={id:"effector",title:"Effector",description:"The Effector interface in Casbin",keywords:["effector","Effect","MergeEffects"],authors:["ErikQQY"]},o=void 0,l={unversionedId:"effector",id:"effector",title:"Effector",description:"The Effector interface in Casbin",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/Effector.mdx",sourceDirName:".",slug:"/effector",permalink:"/ko/docs/effector",draft:!1,editUrl:"https://crowdin.com/project/casbin-website/ko",tags:[],version:"current",frontMatter:{id:"effector",title:"Effector",description:"The Effector interface in Casbin",keywords:["effector","Effect","MergeEffects"],authors:["ErikQQY"]},sidebar:"docs",previous:{title:"\ubaa8\ub378(Model) \ubb38\ubc95",permalink:"/ko/docs/syntax-for-models"},next:{title:"Functions",permalink:"/ko/docs/function"}},c={},p=[{value:"<code>MergeEffects()</code>",id:"mergeeffects",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},f=s("Tabs"),d=s("TabItem"),m={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Effect")," represents the result of a policy rule, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"Effector")," is the interface for handling effects in Casbin."),(0,i.kt)("h2",{id:"mergeeffects"},(0,i.kt)("inlineCode",{parentName:"h2"},"MergeEffects()")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"MergeEffects()")," function is used to merge all matching results collected by the enforcer into a single decision."),(0,i.kt)("p",null,"For example:"),(0,i.kt)(f,{groupId:"langs",mdxType:"Tabs"},(0,i.kt)(d,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"Effect, explainIndex, err = e.MergeEffects(expr, effects, matches, policyIndex, policyLength)\n")))),(0,i.kt)("p",null,"In this example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Effect")," is the final decision that is merged by this function (initialized as ",(0,i.kt)("inlineCode",{parentName:"li"},"Indeterminate"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"explainIndex")," is the index of ",(0,i.kt)("inlineCode",{parentName:"li"},"eft")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Allow")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"Deny"),"), and it is initialized as ",(0,i.kt)("inlineCode",{parentName:"li"},"-1"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"err")," is used to check if the effect is supported."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"expr")," is the string representation of the policy effects."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"effects")," is an array of effects, which can be ",(0,i.kt)("inlineCode",{parentName:"li"},"Allow"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Indeterminate"),", or ",(0,i.kt)("inlineCode",{parentName:"li"},"Deny"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"matches")," is an array that indicates whether the result matches the policy."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"policyIndex")," is the index of the policy in the model."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"policyLength")," is the length of the policy.")),(0,i.kt)("p",null,"The code above illustrates how to pass the parameters to the ",(0,i.kt)("inlineCode",{parentName:"p"},"MergeEffects()")," function, and the function will process the effects and matches based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"expr"),"."),(0,i.kt)("p",null,"To use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Effector"),", follow these steps:"),(0,i.kt)(f,{groupId:"langs",mdxType:"Tabs"},(0,i.kt)(d,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"var e Effector\nEffect, explainIndex, err = e.MergeEffects(expr, effects, matches, policyIndex, policyLength)\n")))),(0,i.kt)("p",null,"The basic idea of ",(0,i.kt)("inlineCode",{parentName:"p"},"MergeEffects()")," is that if the ",(0,i.kt)("inlineCode",{parentName:"p"},"expr")," can match the results, indicating that the ",(0,i.kt)("inlineCode",{parentName:"p"},"p_eft")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"allow"),", then all effects can be merged. If no deny rules are matched, then the decision is allow."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"expr")," does not match the condition ",(0,i.kt)("inlineCode",{parentName:"p"},'"priority(p_eft) || deny"'),", and the ",(0,i.kt)("inlineCode",{parentName:"p"},"policyIndex")," is shorter than ",(0,i.kt)("inlineCode",{parentName:"p"},"policyLength-1"),", it will ",(0,i.kt)("strong",{parentName:"p"},"short-circuit")," some effects in the middle.")))}u.isMDXComponent=!0}}]);