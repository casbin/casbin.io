"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[6569],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5617:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={id:"understanding-casbin-detail",title:"Understanding How Casbin Matching Works in Detail",description:"Casbin Website Refund Policy",keywords:["RBAC","ACL"],authors:["aravindarc"]},o=void 0,s={unversionedId:"understanding-casbin-detail",id:"understanding-casbin-detail",title:"Understanding How Casbin Matching Works in Detail",description:"Casbin Website Refund Policy",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/UnderstandingCasbinMatchingInDetail.mdx",sourceDirName:".",slug:"/understanding-casbin-detail",permalink:"/ko/docs/understanding-casbin-detail",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/UnderstandingCasbinMatchingInDetail.mdx",tags:[],version:"current",frontMatter:{id:"understanding-casbin-detail",title:"Understanding How Casbin Matching Works in Detail",description:"Casbin Website Refund Policy",keywords:["RBAC","ACL"],authors:["aravindarc"]},sidebar:"docs",previous:{title:"Tutorials",permalink:"/ko/docs/tutorials"},next:{title:"Model",permalink:"/ko/docs/category/model"}},l={},c=[{value:"Introduction to RBAC",id:"introduction-to-rbac",level:2},{value:"Understanding Azure&#39;s Hierarchical RBAC",id:"understanding-azures-hierarchical-rbac",level:2},{value:"How Does Casbin Work?",id:"how-does-casbin-work",level:2},{value:"What is ACL?",id:"what-is-acl",level:2},{value:"The model definition",id:"the-model-definition",level:3},{value:"Now let&#39;s test the model on the Casbin editor",id:"now-lets-test-the-model-on-the-casbin-editor",level:3},{value:"Visual representation of the ACL model, policy, and request matching",id:"visual-representation-of-the-acl-model-policy-and-request-matching",level:3},{value:"What is RBAC?",id:"what-is-rbac",level:2},{value:"The model definition",id:"the-model-definition-1",level:3},{value:"Now let&#39;s test the model on Casbin editor",id:"now-lets-test-the-model-on-casbin-editor",level:3},{value:"Visual representation of the RBAC model, policy, and request matching",id:"visual-representation-of-the-rbac-model-policy-and-request-matching",level:3},{value:"What is Hierarchical RBAC?",id:"what-is-hierarchical-rbac",level:2},{value:"The model definition",id:"the-model-definition-2",level:3},{value:"Now let&#39;s test the model on the Casbin editor",id:"now-lets-test-the-model-on-the-casbin-editor-1",level:3},{value:"Visual representation of the RBAC model, policy, and request matching",id:"visual-representation-of-the-rbac-model-policy-and-request-matching-1",level:3},{value:"Subject Matching Visual representation",id:"subject-matching-visual-representation",level:4},{value:"Action Matching Visual representation",id:"action-matching-visual-representation",level:4},{value:"Object Matching Visual representation",id:"object-matching-visual-representation",level:4},{value:"Conclusion",id:"conclusion",level:2}],p={toc:c};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this post, I will explain the design and implementation of RBAC using the ",(0,r.kt)("a",{parentName:"p",href:"https://casbin.org/"},"Casbin")," library. For a SaaS platform dealing with multiple resource hierarchies and roles that inherit permissions from higher levels, Casbin provides a performant alternative to consider."),(0,r.kt)("h2",{id:"introduction-to-rbac"},"Introduction to RBAC"),(0,r.kt)("p",null,"RBAC is a method of restricting access to resources based on the roles that individuals hold. To better understand how hierarchical RBAC works, let's take a look at Azure's RBAC system in the next section and then attempt to implement a similar system."),(0,r.kt)("h2",{id:"understanding-azures-hierarchical-rbac"},"Understanding Azure's Hierarchical RBAC"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-setup-guide/media/organize-resources/scope-levels.png",alt:"Azure Hierarchy"})),(0,r.kt)("p",null,"There is a role called ",(0,r.kt)("strong",{parentName:"p"},"Owner")," for all resources in Azure. Suppose if I have the ",(0,r.kt)("strong",{parentName:"p"},"Owner")," role assigned to me at the\nsubscription level, that means I am the ",(0,r.kt)("strong",{parentName:"p"},"Owner")," of all the resource groups and resources under that subscription. If I have\n",(0,r.kt)("strong",{parentName:"p"},"Owner")," at the resource group level, then I am the ",(0,r.kt)("strong",{parentName:"p"},"Owner")," of all the resources under that resource group."),(0,r.kt)("p",null,"This image shows that I have ",(0,r.kt)("strong",{parentName:"p"},"Owner")," access at the subscription level. ",(0,r.kt)("img",{alt:"Subscription Owner",src:n(6970).Z,width:"3456",height:"1836"})),(0,r.kt)("p",null,"When I check the IAM of a Resource Group under this Subscription, you can see that I have inherited ",(0,r.kt)("strong",{parentName:"p"},"Owner")," access from the\nsubscription. ",(0,r.kt)("img",{alt:"RG Owner",src:n(878).Z,width:"3456",height:"1836"})),(0,r.kt)("p",null,"So, this is how Azure's RBAC is hierarchical. Most enterprise software uses hierarchical RBAC because of the hierarchical\nnature of the resource levels. In this tutorial, we'll try to implement a similar system using Casbin."),(0,r.kt)("h2",{id:"how-does-casbin-work"},"How Does Casbin Work?"),(0,r.kt)("p",null,"Before diving into the implementation, it is important to understand what Casbin is and how it functions at a high level. This understanding is necessary because each Role-Based Access Control (RBAC) system may vary based on specific requirements. By grasping the workings of Casbin, we can effectively fine-tune the model."),(0,r.kt)("h2",{id:"what-is-acl"},"What is ACL?"),(0,r.kt)("p",null,"ACL stands for Access Control List. It is a method in which users are mapped to actions and actions to resources."),(0,r.kt)("h3",{id:"the-model-definition"},"The model definition"),(0,r.kt)("p",null,"Let's consider a simple example of an ACL model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},"[request_definition]\nr = sub, act, obj\n\n[policy_definition]\np = sub, act, obj\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("strong",{parentName:"p"},"request","_","definition")," is the query template of the system. For example, a request ",(0,r.kt)("inlineCode",{parentName:"p"},"alice, write, data1")," can be\ninterpreted as \"Can subject Alice perform the action 'write' on object 'data1'?\".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("strong",{parentName:"p"},"policy","_","definition")," is the assignment template of the system. For example, by creating a policy ",(0,r.kt)("inlineCode",{parentName:"p"},"alice, write, data1"),", you are\nassigning permission to subject Alice to perform the action 'write' on object 'data1'.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("strong",{parentName:"p"},"policy","_","effect")," defines the effect of the policy.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In the ",(0,r.kt)("strong",{parentName:"p"},"matchers")," section, the request is matched with the policy using the conditions ",(0,r.kt)("inlineCode",{parentName:"p"},"r.sub == p.sub && r.obj == p.obj && r.act == p.act"),"."))),(0,r.kt)("h3",{id:"now-lets-test-the-model-on-the-casbin-editor"},"Now let's test the model on the Casbin editor"),(0,r.kt)("p",null,"Open the ",(0,r.kt)("a",{parentName:"p",href:"https://casbin.org/editor"},"editor")," and paste the above model in the Model editor."),(0,r.kt)("p",null,"Paste the following in the Policy editor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, read, data1\np, bob, write, data2\n")),(0,r.kt)("p",null,"and the following in the Request editor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"alice, read, data1\n")),(0,r.kt)("p",null,"The result will be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"true\n")),(0,r.kt)("h3",{id:"visual-representation-of-the-acl-model-policy-and-request-matching"},"Visual representation of the ACL model, policy, and request matching"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"acl",src:n(3353).Z,width:"6968",height:"3096"})),(0,r.kt)("h2",{id:"what-is-rbac"},"What is RBAC?"),(0,r.kt)("p",null,"RBAC stands for Role-Based Access Control. In RBAC, a user is assigned a role for a resource, and a role can contain arbitrary actions. The request then checks if the user has the permission to perform the action on the resource."),(0,r.kt)("h3",{id:"the-model-definition-1"},"The model definition"),(0,r.kt)("p",null,"Let's consider a simple example RBAC model:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},"[request_definition]\nr = sub, act, obj\n\n[policy_definition]\np = sub, act, obj\n\n[role_definition]\ng = _, _\ng2 = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = r.sub == p.sub && g(p.act, r.act) && r.obj == p.obj\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("strong",{parentName:"li"},"role","_","definition")," is a graph relation builder that uses a Graph to compare the request object with the policy object.")),(0,r.kt)("h3",{id:"now-lets-test-the-model-on-casbin-editor"},"Now let's test the model on Casbin editor"),(0,r.kt)("p",null,"Open the ",(0,r.kt)("a",{parentName:"p",href:"https://casbin.org/editor"},"editor")," and paste the above model in the Model editor."),(0,r.kt)("p",null,"Paste the following in the Policy editor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, reader, data1\np, bob, owner, data2\n\ng, reader, read\ng, owner, read\ng, owner, write\n")),(0,r.kt)("p",null,"and the following in the Request editor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"alice, read, data1\nalice, write, data1\nbob, write, data2\nbob, read, data2\nbob, write, data1\n")),(0,r.kt)("p",null,"The result will be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"true\nfalse\ntrue\ntrue\nfalse\n")),(0,r.kt)("h3",{id:"visual-representation-of-the-rbac-model-policy-and-request-matching"},"Visual representation of the RBAC model, policy, and request matching"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"rbac",src:n(3859).Z,width:"7016",height:"2844"})),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"g - Role to action mapping")," table has a Graph mapping the role to action. This Graph can be coded as a list of edges, as shown in the policy which is a common way of representing a Graph:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"g, reader, read\ng, owner, read\ng, owner, write\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"p")," indicates a normal policy that can be compared using the ",(0,r.kt)("strong",{parentName:"p"},"==")," operator. ",(0,r.kt)("strong",{parentName:"p"},"g")," is a Graph-based comparison function. You can define multiple Graph comparators by adding a numerical suffix like ",(0,r.kt)("strong",{parentName:"p"},"g, g2, g3, ...")," and so on.")),(0,r.kt)("h2",{id:"what-is-hierarchical-rbac"},"What is Hierarchical RBAC?"),(0,r.kt)("p",null,'In Hierarchical RBAC, there are more than one type of resources and there is an inheritance relationship between the resource types. For example, "subscription" is one type and "resourceGroup" is another type. A sub1 of type ',(0,r.kt)("strong",{parentName:"p"},"Subscription")," can contain multiple resourceGroups (rg1, rg2) of type ",(0,r.kt)("strong",{parentName:"p"},"ResourceGroup"),"."),(0,r.kt)("p",null,"Similar to the resource hierarchy, there will be two types of roles and actions: Subscription roles and actions, and ResourceGroup roles and actions. There is an arbitrary relationship between the Subscription role and ResourceGroup role. For example, consider a Subscription Role ",(0,r.kt)("strong",{parentName:"p"},"sub-owner"),". This role is inherited by a ResourceGroup Role ",(0,r.kt)("strong",{parentName:"p"},"rg-owner"),", which means that if I am assigned the ",(0,r.kt)("strong",{parentName:"p"},"sub-owner")," role on Subscription ",(0,r.kt)("strong",{parentName:"p"},"sub1"),", then I automatically also get the ",(0,r.kt)("strong",{parentName:"p"},"rg-owner")," role on ",(0,r.kt)("strong",{parentName:"p"},"rg1 and rg2"),"."),(0,r.kt)("h3",{id:"the-model-definition-2"},"The model definition"),(0,r.kt)("p",null,"Let's take a simple example of the ",(0,r.kt)("strong",{parentName:"p"},"Hierarchical RBAC")," model:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},"[request_definition]\nr = sub, act, obj\n\n[policy_definition]\np = sub, act, obj\n\n[role_definition]\ng = _, _\ng2 = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = r.sub == p.sub && g(p.act, r.act) && g2(p.obj, r.obj)\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("strong",{parentName:"li"},"role","_","definition")," is a graph relation builder which uses a Graph to compare the request object with the policy object.")),(0,r.kt)("h3",{id:"now-lets-test-the-model-on-the-casbin-editor-1"},"Now let's test the model on the Casbin editor"),(0,r.kt)("p",null,"Open the ",(0,r.kt)("a",{parentName:"p",href:"https://casbin.org/editor"},"editor")," and paste the above model in the Model editor."),(0,r.kt)("p",null,"Paste the following in the Policy editor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, sub-reader, sub1\np, bob, rg-owner, rg2\n\n// subscription role to subscription action mapping\ng, sub-reader, sub-read\ng, sub-owner, sub-read\ng, sub-owner, sub-write\n\n// resourceGroup role to resourceGroup action mapping\ng, rg-reader, rg-read\ng, rg-owner, rg-read\ng, rg-owner, rg-write\n\n// subscription role to resourceGroup role mapping\ng, sub-reader, rg-reader\ng, sub-owner, rg-owner\n\n// subscription resource to resourceGroup resource mapping\ng2, sub1, rg1\ng2, sub2, rg2\n")),(0,r.kt)("p",null,"And paste the following in the Request editor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"alice, rg-read, rg1\n")),(0,r.kt)("p",null,"The result will be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"true\n")),(0,r.kt)("h3",{id:"visual-representation-of-the-rbac-model-policy-and-request-matching-1"},"Visual representation of the RBAC model, policy, and request matching"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"hrbac",src:n(4492).Z,width:"7968",height:"4204"})),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"g - Role to (Action, Role) Mapping")," table has a graph mapping the role to the action, role mapping. This graph can be coded as a list of edges, as shown in the policy, which is a common way of representing a graph:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"// subscription role to subscription action mapping\ng, sub-reader, sub-read\ng, sub-owner, sub-read\ng, sub-owner, sub-write\n\n// resourceGroup role to resourceGroup action mapping\ng, rg-reader, rg-read\ng, rg-owner, rg-read\ng, rg-owner, rg-write\n\n// subscription role to resourceGroup role mapping\ng, sub-reader, rg-reader\ng, sub-owner, rg-owner\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"g2 - Sub to RG Mapping")," table has a graph mapping subscription to resourceGroup:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"// subscription resource to resourceGroup resource mapping\ng2, sub1, rg1\ng2, sub2, rg2\n")),(0,r.kt)("h4",{id:"subject-matching-visual-representation"},"Subject Matching Visual representation"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"hrbac-sub-match",src:n(3541).Z,width:"8176",height:"4336"})),(0,r.kt)("h4",{id:"action-matching-visual-representation"},"Action Matching Visual representation"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"hrbac-act-match",src:n(8303).Z,width:"7964",height:"4376"})),(0,r.kt)("h4",{id:"object-matching-visual-representation"},"Object Matching Visual representation"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"hrbac-obj-match",src:n(6879).Z,width:"7964",height:"4296"})),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"When a request is submitted to Casbin, this matching happens for all the policies. If at least one policy matches, then the result of the request is true. If no policy matches the request, then the result is false.")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In this tutorial, we learned about how different authorization models work and how they can be modeled using Casbin. In the second part of this tutorial, we will implement this in a demo Spring Boot Application and secure the APIs using Casbin."))}d.isMDXComponent=!0},3353:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/acl-704097c47b27a1f2235c82f593af469e.png"},8303:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/hrbac-act-match-bbb086158782591771f2df01419dc4b8.png"},6879:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/hrbac-obj-match-aad370d5cbfe1020ec108b9242f8d4bd.png"},3541:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/hrbac-sub-match-55dffd4e5fadb9773658dc90bacbb091.png"},4492:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/hrbac-1350d755e04234a34394996344d2b259.png"},3859:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/rbac-4c8e405408b9e4df554f7cd619eae897.png"},878:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/rg-owner-9c6cd2ae5997a5fba717c445f43130e6.png"},6970:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/subscription-owner-f1a7e1c9c03d7c587ce910ae5e6d8a35.png"}}]);