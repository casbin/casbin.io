"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[2385],{3905:(e,t,n)=>{n.d(t,{Zo:()=>f,kt:()=>p});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},f=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,f=o(e,["components","mdxType","originalType","parentName"]),u=c(n),p=r,m=u["".concat(s,".").concat(p)]||u[p]||d[p]||a;return n?i.createElement(m,l(l({ref:t},f),{},{components:n})):i.createElement(m,l({ref:t},f))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1125:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const a={id:"lbac",title:"LBAC",description:"Lattice-Based Access Control model in Casbin",keywords:["lbac","lattice-based access control","security model","confidentiality","integrity"],authors:["nodece"]},l=void 0,o={unversionedId:"lbac",id:"lbac",title:"LBAC",description:"Lattice-Based Access Control model in Casbin",source:"@site/i18n/pt/docusaurus-plugin-content-docs/current/LBAC.mdx",sourceDirName:".",slug:"/lbac",permalink:"/pt/docs/lbac",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/LBAC.mdx",tags:[],version:"current",frontMatter:{id:"lbac",title:"LBAC",description:"Lattice-Based Access Control model in Casbin",keywords:["lbac","lattice-based access control","security model","confidentiality","integrity"],authors:["nodece"]},sidebar:"docs",previous:{title:"Biba",permalink:"/pt/docs/biba"},next:{title:"OrBAC",permalink:"/pt/docs/orbac"}},s={},c=[{value:"What is the LBAC model?",id:"what-is-the-lbac-model",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"How it works",id:"how-it-works",level:2},{value:"Examples",id:"examples",level:2},{value:"Request Examples",id:"request-examples",level:3},{value:"Security Levels",id:"security-levels",level:2},{value:"Confidentiality Levels",id:"confidentiality-levels",level:3},{value:"Integrity Levels",id:"integrity-levels",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"Implementation Notes",id:"implementation-notes",level:2}],f={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"what-is-the-lbac-model"},"What is the LBAC model?"),(0,r.kt)("p",null,"LBAC stands for Lattice-Based Access Control. It is a formal access control model that can be implemented in various ways. The example shown below demonstrates one possible implementation in Casbin that combines confidentiality and integrity controls."),(0,r.kt)("h2",{id:"model-definition"},"Model Definition"),(0,r.kt)("p",null,"Here is an example LBAC model implementation in Casbin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-conf"},'[request_definition]\nr = sub, subject_confidentiality, subject_integrity, obj, object_confidentiality, object_integrity, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = (r.act == "read" && r.subject_confidentiality >= r.object_confidentiality && r.subject_integrity >= r.object_integrity) || (r.act == "write" && r.subject_confidentiality <= r.object_confidentiality && r.subject_integrity <= r.object_integrity)\n')),(0,r.kt)("h2",{id:"how-it-works"},"How it works"),(0,r.kt)("p",null,"In this example implementation, the matcher function implements access control rules based on two security properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Confidentiality Control"),": Prevents unauthorized disclosure of information"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Integrity Control"),": Prevents unauthorized modification of information")),(0,r.kt)("p",null,"The access control decisions are made by comparing the security levels of subjects and objects in both dimensions."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"request-examples"},"Request Examples"),(0,r.kt)("p",null,"The following are example requests to demonstrate how this LBAC implementation works:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"# Normal read operations (ALLOWED)\nadmin, 5, 5, file_topsecret, 3, 3, read      # admin (conf:5, int:5) reads file_topsecret (conf:3, int:3) - ALLOWED\nmanager, 4, 4, file_secret, 4, 2, read       # manager (conf:4, int:4) reads file_secret (conf:4, int:2) - ALLOWED\nstaff, 3, 3, file_internal, 2, 3, read       # staff (conf:3, int:3) reads file_internal (conf:2, int:3) - ALLOWED\nguest, 2, 2, file_public, 2, 2, read         # guest (conf:2, int:2) reads file_public (conf:2, int:2) - ALLOWED\n\n# Read operation violations (DENIED)\nstaff, 3, 3, file_secret, 4, 2, read         # staff (conf:3, int:3) reads file_secret (conf:4, int:2) - DENIED (conf < obj.conf)\nmanager, 4, 4, file_sensitive, 3, 5, read    # manager (conf:4, int:4) reads file_sensitive (conf:3, int:5) - DENIED (int < obj.int)\nguest, 2, 2, file_internal, 3, 1, read       # guest (conf:2, int:2) reads file_internal (conf:3, int:1) - DENIED (conf < obj.conf)\nstaff, 3, 3, file_protected, 1, 4, read      # staff (conf:3, int:3) reads file_protected (conf:1, int:4) - DENIED (int < obj.int)\n\n# Normal write operations (ALLOWED)\nguest, 2, 2, file_public, 2, 2, write        # guest (conf:2, int:2) writes file_public (conf:2, int:2) - ALLOWED\nstaff, 3, 3, file_internal, 5, 4, write      # staff (conf:3, int:3) writes file_internal (conf:5, int:4) - ALLOWED\nmanager, 4, 4, file_secret, 4, 5, write      # manager (conf:4, int:4) writes file_secret (conf:4, int:5) - ALLOWED\nadmin, 5, 5, file_archive, 5, 5, write       # admin (conf:5, int:5) writes file_archive (conf:5, int:5) - ALLOWED\n\n# Write operation violations (DENIED)\nmanager, 4, 4, file_internal, 3, 5, write    # manager (conf:4, int:4) writes file_internal (conf:3, int:5) - DENIED (conf > obj.conf)\nstaff, 3, 3, file_public, 2, 2, write        # staff (conf:3, int:3) writes file_public (conf:2, int:2) - DENIED (both > obj)\nadmin, 5, 5, file_secret, 5, 4, write        # admin (conf:5, int:5) writes file_secret (conf:5, int:4) - DENIED (int > obj.int)\nguest, 2, 2, file_private, 1, 3, write       # guest (conf:2, int:2) writes file_private (conf:1, int:3) - DENIED (conf > obj.conf)\n")),(0,r.kt)("h2",{id:"security-levels"},"Security Levels"),(0,r.kt)("p",null,"In this example implementation, both confidentiality and integrity levels are represented as integers where higher numbers indicate higher security levels:"),(0,r.kt)("h3",{id:"confidentiality-levels"},"Confidentiality Levels"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Level 1: Public/Unclassified"),(0,r.kt)("li",{parentName:"ul"},"Level 2: Confidential"),(0,r.kt)("li",{parentName:"ul"},"Level 3: Secret"),(0,r.kt)("li",{parentName:"ul"},"Level 4: Top Secret")),(0,r.kt)("h3",{id:"integrity-levels"},"Integrity Levels"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Level 1: Low integrity (e.g., public data, user-generated content)"),(0,r.kt)("li",{parentName:"ul"},"Level 2: Medium integrity (e.g., verified data, trusted sources)"),(0,r.kt)("li",{parentName:"ul"},"Level 3: High integrity (e.g., system data, administrative content)"),(0,r.kt)("li",{parentName:"ul"},"Level 4: Critical integrity (e.g., security policies, system configuration)")),(0,r.kt)("h2",{id:"use-cases"},"Use Cases"),(0,r.kt)("p",null,"This LBAC implementation example is suitable for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Multi-level security environments"),(0,r.kt)("li",{parentName:"ul"},"Applications where data protection and data accuracy are both important")),(0,r.kt)("h2",{id:"implementation-notes"},"Implementation Notes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The model enforces mandatory access control (MAC) with dual security properties"),(0,r.kt)("li",{parentName:"ul"},"Security levels are assigned by system administrators"),(0,r.kt)("li",{parentName:"ul"},"Access decisions are based on both confidentiality and integrity levels"),(0,r.kt)("li",{parentName:"ul"},"The model prevents both information leakage and data corruption")))}d.isMDXComponent=!0}}]);