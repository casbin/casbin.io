"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[5210],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>u});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),d=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=d(e.components);return o.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=d(t),u=a,f=m["".concat(c,".").concat(u)]||m[u]||p[u]||i;return t?o.createElement(f,r(r({ref:n},s),{},{components:t})):o.createElement(f,r({ref:n},s))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var d=2;d<i;d++)r[d]=t[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3712:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var o=t(7462),a=(t(7294),t(3905));const i={id:"model-storage",title:"Model Storage",description:"Archiviazione dei modelli",keywords:["model storage"],authors:["hsluoyz"]},r=void 0,l={unversionedId:"model-storage",id:"model-storage",title:"Model Storage",description:"Archiviazione dei modelli",source:"@site/i18n/it/docusaurus-plugin-content-docs/current/ModelStorage.mdx",sourceDirName:".",slug:"/model-storage",permalink:"/it/docs/model-storage",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/ModelStorage.mdx",tags:[],version:"current",frontMatter:{id:"model-storage",title:"Model Storage",description:"Archiviazione dei modelli",keywords:["model storage"],authors:["hsluoyz"]},sidebar:"docs",previous:{title:"Storage",permalink:"/it/docs/category/storage"},next:{title:"Policy Storage",permalink:"/it/docs/policy-storage"}},c={},d=[{value:"Carica il modello dal file .CONF",id:"carica-il-modello-dal-file-conf",level:2},{value:"Carica il modello dal codice",id:"carica-il-modello-dal-codice",level:2},{value:"Carica il modello da stringa",id:"carica-il-modello-da-stringa",level:2}],s={toc:d};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A differenza della policy, il modello pu\xf2 essere solo caricato, non pu\xf2 essere salvato. Crediamo che il modello non sia un componente dinamico e non dovrebbe essere modificato durante il runtime, quindi non abbiamo implementato un'API per salvare il modello nella memoria di archiviazione."),(0,a.kt)("p",null,"Tuttavia, c'\xe8 una buona notizia. Forniamo tre modi equivalenti per caricare un modello, sia staticamente che dinamicamente:"),(0,a.kt)("h2",{id:"carica-il-modello-dal-file-conf"},"Carica il modello dal file .CONF"),(0,a.kt)("p",null,"Questo \xe8 il modo pi\xf9 comune per utilizzare Casbin. \xc8 facile da capire per i principianti e conveniente per condividere quando hai bisogno di aiuto dal team di Casbin."),(0,a.kt)("p",null,"Il contenuto del file ",(0,a.kt)("inlineCode",{parentName:"p"},".CONF")," ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/master/examples/rbac_model.conf"},"examples/rbac","_","model.conf")," \xe8 il seguente:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n")),(0,a.kt)("p",null,"Quindi puoi caricare il file del modello come segue:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'e := casbin.NewEnforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")\n')),(0,a.kt)("h2",{id:"carica-il-modello-dal-codice"},"Carica il modello dal codice"),(0,a.kt)("p",null,"Il modello pu\xf2 essere inizializzato dinamicamente dal codice invece di utilizzare un file ",(0,a.kt)("inlineCode",{parentName:"p"},".CONF"),". Ecco un esempio per il modello RBAC:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/casbin/casbin/v2"\n    "github.com/casbin/casbin/v2/model"\n    "github.com/casbin/casbin/v2/persist/file-adapter"\n)\n\n// Initialize the model from Go code.\nm := model.NewModel()\nm.AddDef("r", "r", "sub, obj, act")\nm.AddDef("p", "p", "sub, obj, act")\nm.AddDef("g", "g", "_, _")\nm.AddDef("e", "e", "some(where (p.eft == allow))")\nm.AddDef("m", "m", "g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act")\n\n// Load the policy rules from the .CSV file adapter.\n// Replace it with your adapter to avoid using files.\na := fileadapter.NewAdapter("examples/rbac_policy.csv")\n\n// Create the enforcer.\ne := casbin.NewEnforcer(m, a)\n')),(0,a.kt)("h2",{id:"carica-il-modello-da-stringa"},"Carica il modello da stringa"),(0,a.kt)("p",null,"In alternativa, puoi caricare l'intero testo del modello da una stringa su pi\xf9 righe. Il vantaggio di questo approccio \xe8 che non \xe8 necessario mantenere un file modello."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/casbin/casbin/v2"\n    "github.com/casbin/casbin/v2/model"\n)\n\n// Initialize the model from a string.\ntext :=\n`\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n`\nm, _ := model.NewModelFromString(text)\n\n// Load the policy rules from the .CSV file adapter.\n// Replace it with your adapter to avoid using files.\na := fileadapter.NewAdapter("examples/rbac_policy.csv")\n\n// Create the enforcer.\ne := casbin.NewEnforcer(m, a)\n')))}p.isMDXComponent=!0}}]);