"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[8446],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>m});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(i),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return i?n.createElement(f,r(r({ref:t},p),{},{components:i})):n.createElement(f,r({ref:t},p))}));function m(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=i.length,r=new Array(o);r[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=i[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},3009:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=i(7462),a=(i(7294),i(3905));const o={id:"policy-subset-loading",title:"Policy Subset Loading",description:"Caricamento di politiche filtrate",keywords:["filtered policies","policy subset","performance optimization"],authors:["hsluoyz"]},r=void 0,l={unversionedId:"policy-subset-loading",id:"policy-subset-loading",title:"Policy Subset Loading",description:"Caricamento di politiche filtrate",source:"@site/i18n/it/docusaurus-plugin-content-docs/current/PolicySubsetLoading.mdx",sourceDirName:".",slug:"/policy-subset-loading",permalink:"/it/docs/policy-subset-loading",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/PolicySubsetLoading.mdx",tags:[],version:"current",frontMatter:{id:"policy-subset-loading",title:"Policy Subset Loading",description:"Caricamento di politiche filtrate",keywords:["filtered policies","policy subset","performance optimization"],authors:["hsluoyz"]},sidebar:"docs",previous:{title:"Policy Storage",permalink:"/it/docs/policy-storage"},next:{title:"Scenarios",permalink:"/it/docs/category/scenarios"}},c={},s=[],p={toc:s};function d(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Alcuni adattatori supportano la gestione delle politiche filtrate. Ci\xf2 significa che la politica caricata da Casbin \xe8 un sottoinsieme della politica memorizzata nel database in base a un filtro specifico. Questo permette un'efficace applicazione delle politiche in ambienti di grandi dimensioni e multi-tenant, dove l'analisi dell'intera politica diventa un collo di bottiglia per le prestazioni."),(0,a.kt)("p",null,"Per utilizzare le politiche filtrate con un adattatore supportato, basta chiamare il metodo ",(0,a.kt)("inlineCode",{parentName:"p"},"LoadFilteredPolicy"),". Il formato valido per il parametro del filtro dipende dall'adattatore utilizzato. Per evitare la perdita accidentale di dati, il metodo ",(0,a.kt)("inlineCode",{parentName:"p"},"SavePolicy")," \xe8 disabilitato quando viene caricata una policy filtrata."),(0,a.kt)("p",null,"Ad esempio, il seguente snippet di codice utilizza l'adattatore di file filtrato integrato e il modello RBAC con domini. In questo caso, il filtro limita la policy a un singolo dominio. Qualsiasi linea di policy per domini diversi da ",(0,a.kt)("inlineCode",{parentName:"p"},'"domain1"')," viene omessa dalla policy caricata:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/casbin/casbin/v2"\n    fileadapter "github.com/casbin/casbin/v2/persist/file-adapter"\n)\n\nenforcer, _ := casbin.NewEnforcer()\n\nadapter := fileadapter.NewFilteredAdapter("examples/rbac_with_domains_policy.csv")\nenforcer.InitWithAdapter("examples/rbac_with_domains_model.conf", adapter)\n\nfilter := &fileadapter.Filter{\n    P: []string{"", "domain1"},\n    G: []string{"", "", "domain1"},\n}\nenforcer.LoadFilteredPolicy(filter)\n\n// The loaded policy now only contains the entries pertaining to "domain1".\n')),(0,a.kt)("p",null,"Esiste un altro metodo che supporta la funzionalit\xe0 di caricamento di un sottoinsieme: ",(0,a.kt)("inlineCode",{parentName:"p"},"LoadIncrementalFilteredPolicy"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"LoadIncrementalFilteredPolicy")," \xe8 simile a ",(0,a.kt)("inlineCode",{parentName:"p"},"LoadFilteredPolicy"),", ma non cancella la policy precedentemente caricata. Aggiunge solo la policy filtrata alla policy esistente."))}d.isMDXComponent=!0}}]);