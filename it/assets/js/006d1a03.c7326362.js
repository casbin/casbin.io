"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[7696],{3905:(e,i,t)=>{t.d(i,{Zo:()=>p,kt:()=>m});var a=t(7294);function n(e,i,t){return i in e?Object.defineProperty(e,i,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[i]=t,e}function o(e,i){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);i&&(a=a.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var i=1;i<arguments.length;i++){var t=null!=arguments[i]?arguments[i]:{};i%2?o(Object(t),!0).forEach((function(i){n(e,i,t[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(t,i))}))}return e}function r(e,i){if(null==e)return{};var t,a,n=function(e,i){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],i.indexOf(t)>=0||(n[t]=e[t]);return n}(e,i);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],i.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var u=a.createContext({}),s=function(e){var i=a.useContext(u),t=i;return e&&(t="function"==typeof e?e(i):l(l({},i),e)),t},p=function(e){var i=s(e.components);return a.createElement(u.Provider,{value:i},e.children)},c={inlineCode:"code",wrapper:function(e){var i=e.children;return a.createElement(a.Fragment,{},i)}},d=a.forwardRef((function(e,i){var t=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=s(t),m=n,g=d["".concat(u,".").concat(m)]||d[m]||c[m]||o;return t?a.createElement(g,l(l({ref:i},p),{},{components:t})):a.createElement(g,l({ref:i},p))}));function m(e,i){var t=arguments,n=i&&i.mdxType;if("string"==typeof e||n){var o=t.length,l=new Array(o);l[0]=d;var r={};for(var u in i)hasOwnProperty.call(i,u)&&(r[u]=i[u]);r.originalType=e,r.mdxType="string"==typeof e?e:n,l[1]=r;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9946:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var a=t(7462),n=(t(7294),t(3905));const o={title:"Autorizzazione in APISIX utilizzando Casbin",author:"Rushikesh Tote",authorTitle:"Membro di Casbin",authorURL:"http://github.com/rushitote",authorImageURL:"https://avatars.githubusercontent.com/rushitote"},l=void 0,r={permalink:"/it/blog/2021/08/19/apisix-casbin-authorization",editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/i18n/it/docusaurus-plugin-content-blog/2021-08-19-apisix-casbin-authorization.md",source:"@site/i18n/it/docusaurus-plugin-content-blog/2021-08-19-apisix-casbin-authorization.md",title:"Autorizzazione in APISIX utilizzando Casbin",description:"Introduzione",date:"2021-08-19T00:00:00.000Z",formattedDate:"19 agosto 2021",tags:[],readingTime:5.54,hasTruncateMarker:!1,authors:[{name:"Rushikesh Tote",title:"Membro di Casbin",url:"http://github.com/rushitote",imageURL:"https://avatars.githubusercontent.com/rushitote"}],frontMatter:{title:"Autorizzazione in APISIX utilizzando Casbin",author:"Rushikesh Tote",authorTitle:"Membro di Casbin",authorURL:"http://github.com/rushitote",authorImageURL:"https://avatars.githubusercontent.com/rushitote"},nextItem:{title:"Yang Luo - Vincitore del Google Open Source Peer Bonus",permalink:"/it/blog/2020/04/21/google-award"}},u={authorsImageUrls:[void 0]},s=[{value:"Introduzione",id:"introduzione",level:2},{value:"Creazione di un modello",id:"creazione-di-un-modello",level:2},{value:"Creazione di una politica",id:"creazione-di-una-politica",level:2},{value:"Abilitazione del plugin sulla route",id:"abilitazione-del-plugin-sulla-route",level:2},{value:"Abilitazione del plugin utilizzando un modello/policy globale",id:"abilitazione-del-plugin-utilizzando-un-modellopolicy-globale",level:2},{value:"Casi d&#39;uso",id:"casi-duso",level:2}],p={toc:s};function c(e){let{components:i,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,o,{components:i,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"introduzione"},"Introduzione"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://apisix.apache.org/"},"APISIX"),' \xe8 un gateway API cloud nativo ad alte prestazioni e scalabile basato su Nginx e etcd. \xc8 un progetto open source della Apache Software Foundation. Oltre a ci\xf2, ci\xf2 che rende APISIX cos\xec buono \xe8 il supporto di molti ottimi plugin integrati che possono essere utilizzati per implementare funzionalit\xe0 come autenticazione, monitoraggio, routing, ecc. E il fatto che i plugin in APISIX siano ricaricati in modalit\xe0 "hot" (senza riavvii) lo rende molto dinamico.'),(0,n.kt)("p",null,"Tuttavia, durante l'uso di APISIX, potrebbero verificarsi scenari in cui potresti voler aggiungere logica di autorizzazione complessa nella tua applicazione. Questo \xe8 dove authz-casbin potrebbe aiutarti, authz-casbin \xe8 un plugin di APISIX basato su ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/casbin/lua-casbin/"},"Lua Casbin")," che abilita un'autorizzazione potente basata su vari modelli di controllo degli accessi. ",(0,n.kt)("a",{parentName:"p",href:"/"},"Casbin")," \xe8 una libreria di autorizzazione che supporta modelli di controllo degli accessi come ACL, RBAC, ABAC. Inizialmente scritto in Go, \xe8 stato portato in molte lingue e Lua Casbin \xe8 l'implementazione Lua di Casbin. Lo sviluppo di authz-casbin \xe8 iniziato quando abbiamo proposto un nuovo plugin per l'autorizzazione nel repository di APISIX (",(0,n.kt)("a",{parentName:"p",href:"https://github.com/apache/apisix/issues/4674"},"#4674"),") a cui i membri core hanno dato il loro consenso. E dopo le utili revisioni che hanno portato a alcune modifiche e miglioramenti principali, la PR (",(0,n.kt)("a",{parentName:"p",href:"https://github.com/apache/apisix/pull/4710"},"#4710"),") \xe8 stata finalmente unita."),(0,n.kt)("p",null,"In questo blog, useremo il plugin authz-casbin per mostrare come puoi implementare un modello di autorizzazione basato sul Controllo degli Accessi Basato sui Ruoli (RBAC) in APISIX."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"NOTA"),": Dovrai utilizzare qualche altro plugin o flusso di lavoro personalizzato per autenticare l'utente poich\xe9 Casbin far\xe0 solo autorizzazione e non autenticazione."),(0,n.kt)("h2",{id:"creazione-di-un-modello"},"Creazione di un modello"),(0,n.kt)("p",null,"Il plugin utilizza tre parametri per autorizzare qualsiasi richiesta - soggetto, oggetto e azione. Qui, il soggetto \xe8 il valore dell'intestazione del nome utente, che potrebbe essere qualcosa come ",(0,n.kt)("inlineCode",{parentName:"p"},"[username: alice]"),". Quindi, l'oggetto \xe8 il percorso URL che viene acceduto e l'azione \xe8 il metodo di richiesta utilizzato."),(0,n.kt)("p",null,"Diciamo che vogliamo creare un modello con tre risorse nei percorsi - ",(0,n.kt)("inlineCode",{parentName:"p"},"/`\\`, "),"/res1",(0,n.kt)("inlineCode",{parentName:"p"},"\\")," e `",(0,n.kt)("inlineCode",{parentName:"p"},"/res2"),"`",". E vogliamo avere un modello come questo:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"immagine",src:t(8478).Z,width:"4520",height:"1720"})),(0,n.kt)("p",null,"Ci\xf2 significherebbe che tutti gli utenti (",(0,n.kt)("inlineCode",{parentName:"p"},"*`\\`) come ad esempio "),"jack",(0,n.kt)("inlineCode",{parentName:"p"},"\\")," possono accedere alla homepage (",(0,n.kt)("inlineCode",{parentName:"p"},"/`\\`). E gli utenti con autorizzazioni di "),"admin",(0,n.kt)("inlineCode",{parentName:"p"},"\\")," come ",(0,n.kt)("inlineCode",{parentName:"p"},"alice`\\` e "),"bob",(0,n.kt)("inlineCode",{parentName:"p"},"\\")," possono accedere a tutte le pagine e le risorse (come ",(0,n.kt)("inlineCode",{parentName:"p"},"res1`\\` e "),"res2",(0,n.kt)("inlineCode",{parentName:"p"},"\\"),"). Inoltre, limitiamo gli utenti senza alcuna autorizzazione di amministratore all'uso solo del metodo di richiesta `",(0,n.kt)("inlineCode",{parentName:"p"},"GET"),"`",". Per questo scenario, potremmo definire il modello come:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = (g(r.sub, p.sub) || keyMatch(r.sub, p.sub)) && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)\n")),(0,n.kt)("h2",{id:"creazione-di-una-politica"},"Creazione di una politica"),(0,n.kt)("p",null,"Dallo scenario sopra descritto, la politica sarebbe:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csv"},"p, *, /, GET\np, admin, *, *\ng, alice, admin\ng, bob, admin\n")),(0,n.kt)("p",null,"Il matcher dal modello significa:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"(g(r.sub, p.sub) || keyMatch(r.sub, p.sub))`\\`: O il soggetto della richiesta ha un ruolo come il soggetto della politica o il soggetto della richiesta corrisponde al soggetto della politica in "),"keyMatch",(0,n.kt)("inlineCode",{parentName:"li"},"\\"),". `",(0,n.kt)("inlineCode",{parentName:"li"},"keyMatch"),"`"," \xe8 una funzione incorporata in Lua Casbin, puoi dare un'occhiata alla descrizione della funzione e ad altre funzioni simili che potrebbero essere utili ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/casbin/lua-casbin/blob/master/src/util/BuiltInFunctions.lua"},"qui"),"."),(0,n.kt)("li",{parentName:"ol"},"`",(0,n.kt)("inlineCode",{parentName:"li"},"keyMatch(r.obj, p.obj)"),"`",": L'oggetto della richiesta corrisponde all'oggetto della politica (percorso URL qui)."),(0,n.kt)("li",{parentName:"ol"},"`",(0,n.kt)("inlineCode",{parentName:"li"},"keyMatch(r.act, p.act)"),"`",": L'azione della richiesta corrisponde all'azione della politica (metodo di richiesta HTTP qui).")),(0,n.kt)("h2",{id:"abilitazione-del-plugin-sulla-route"},"Abilitazione del plugin sulla route"),(0,n.kt)("p",null,"Una volta creato il modello e la politica, puoi abilitarlo su una route utilizzando l'API di amministrazione di APISIX. Per abilitarlo utilizzando i percorsi dei file del modello e del policy:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'curl http://127.0.0.1:9080/apisix/admin/routes/1 -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -X PUT -d \'\n{\n    "plugins": {\n        "authz-casbin": {\n            "model_path": "/path/to/model.conf",\n            "policy_path": "/path/to/policy.csv",\n            "username": "username"\n        }\n    },\n    "upstream": {\n        "nodes": {\n            "127.0.0.1:1980": 1\n        },\n        "type": "roundrobin"\n    },\n    "uri": "/*"\n}\'\n')),(0,n.kt)("p",null,"Qui, il campo username \xe8 il nome dell'intestazione che utilizzerai per passare il soggetto. Ad esempio, se passer\xe0 l'intestazione username come ",(0,n.kt)("inlineCode",{parentName:"p"},"user: alice"),", dovresti usare ",(0,n.kt)("inlineCode",{parentName:"p"},'"username": "user"'),"."),(0,n.kt)("p",null,"Per utilizzare il testo del modello/policy invece dei file, puoi utilizzare i campi ",(0,n.kt)("inlineCode",{parentName:"p"},"model")," e ",(0,n.kt)("inlineCode",{parentName:"p"},"policy")," al posto di:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'curl http://127.0.0.1:9080/apisix/admin/routes/1 -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -X PUT -d \'\n{\n    "plugins": {\n        "authz-casbin": {\n            "model": "[request_definition]\n            r = sub, obj, act\n\n            [policy_definition]\n            p = sub, obj, act\n\n            [role_definition]\n            g = _, _\n\n            [policy_effect]\n            e = some(where (p.eft == allow))\n\n            [matchers]\n            m = (g(r.sub, p.sub) || keyMatch(r.sub, p.sub)) && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)",\n\n            "policy": "p, *, /, GET\n            p, admin, *, *\n            g, alice, admin\n            g, bob, admin",\n\n            "username": "username"\n        }\n    },\n    "upstream": {\n        "nodes": {\n            "127.0.0.1:1980": 1\n        },\n        "type": "roundrobin"\n    },\n    "uri": "/*"\n}\'\n')),(0,n.kt)("h2",{id:"abilitazione-del-plugin-utilizzando-un-modellopolicy-globale"},"Abilitazione del plugin utilizzando un modello/policy globale"),(0,n.kt)("p",null,"Potrebbero esserci situazioni in cui potresti voler utilizzare una singola configurazione di modello e policy su pi\xf9 route. Puoi farlo prima inviando una richiesta ",(0,n.kt)("inlineCode",{parentName:"p"},"PUT")," per aggiungere la configurazione del modello e della policy ai metadati del plugin:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'curl http://127.0.0.1:9080/apisix/admin/plugin_metadata/authz-casbin -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -i -X PUT -d \'\n{\n"model": "[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = (g(r.sub, p.sub) || keyMatch(r.sub, p.sub)) && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)",\n\n"policy": "p, *, /, GET\np, admin, *, *\ng, alice, admin\ng, bob, admin"\n}\'\n')),(0,n.kt)("p",null,"E poi per abilitare la stessa configurazione su una rotta, invia una richiesta utilizzando l'API di Admin:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'curl http://127.0.0.1:9080/apisix/admin/routes/1 -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -X PUT -d \'\n{\n    "plugins": {\n        "authz-casbin": {\n            "username": "username"\n        }\n    },\n    "upstream": {\n        "nodes": {\n            "127.0.0.1:1980": 1\n        },\n        "type": "roundrobin"\n    },\n    "uri": "/route1/*"\n}\'\n')),(0,n.kt)("p",null,"Questo aggiunger\xe0 la configurazione dei metadati del plugin alla rotta. Puoi anche facilmente aggiornare la configurazione dei metadati del plugin rispedendo la richiesta ai metadati del plugin con la configurazione del modello e della politica aggiornati, il plugin aggiorner\xe0 automaticamente tutte le rotte che utilizzano i metadati del plugin."),(0,n.kt)("h2",{id:"casi-duso"},"Casi d'uso"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Il caso d'uso principale di questo plugin sarebbe nell'implementazione dell'autorizzazione nelle tue API. Puoi facilmente aggiungere questo plugin su qualsiasi rotta API che stai utilizzando con il tuo modello di autorizzazione e configurazione della politica."),(0,n.kt)("li",{parentName:"ul"},"Se desideri avere un singolo modello di autorizzazione per tutte le tue API, puoi utilizzare il metodo del modello/politica globale. Questo rende facile l'aggiornamento della politica per tutte le rotte, poich\xe9 devi solo aggiornare i metadati in etcd."),(0,n.kt)("li",{parentName:"ul"},"Mentre se desideri utilizzare un modello diverso per ogni rotta diversa, puoi utilizzare il metodo della rotta. Questo \xe8 utile quando diverse route API hanno diversi set di permessi utente. Puoi anche utilizzare questo quando hai a che fare con politiche pi\xf9 grandi, poich\xe9 render\xe0 l'autorizzazione pi\xf9 veloce quando filtrata in pi\xf9 route.")))}c.isMDXComponent=!0},8478:(e,i,t)=>{t.d(i,{Z:()=>a});const a=t.p+"assets/images/model-1c0c2441dd19f8b957744635985283eb.png"}}]);