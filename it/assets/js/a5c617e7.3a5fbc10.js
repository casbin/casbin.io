"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[9522],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>m});var n=i(7294);function o(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){o(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,o=function(e,t){if(null==e)return{};var i,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(o[i]=e[i]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var i=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(i),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return i?n.createElement(f,r(r({ref:t},p),{},{components:i})):n.createElement(f,r({ref:t},p))}));function m(e,t){var i=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=i.length,r=new Array(a);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<a;c++)r[c]=i[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}d.displayName="MDXCreateElement"},7859:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=i(7462),o=(i(7294),i(3905));const a={id:"how-it-works",title:"How It Works",description:"Come Funziona Casbin",keywords:["PERM","request","policy","matcher","effect"],authors:["nodece"]},r=void 0,l={unversionedId:"how-it-works",id:"how-it-works",title:"How It Works",description:"Come Funziona Casbin",source:"@site/i18n/it/docusaurus-plugin-content-docs/current/HowItWorks.mdx",sourceDirName:".",slug:"/how-it-works",permalink:"/it/docs/how-it-works",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/HowItWorks.mdx",tags:[],version:"current",frontMatter:{id:"how-it-works",title:"How It Works",description:"Come Funziona Casbin",keywords:["PERM","request","policy","matcher","effect"],authors:["nodece"]},sidebar:"docs",previous:{title:"Get Started",permalink:"/it/docs/get-started"},next:{title:"Tutorials",permalink:"/it/docs/tutorials"}},s={},c=[{value:"Request",id:"request",level:3},{value:"Policy",id:"policy",level:3},{value:"Matcher",id:"matcher",level:3},{value:"Effect",id:"effect",level:3}],p={toc:c};function u(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In Casbin, un modello di controllo degli accessi \xe8 astratto in un file CONF basato sul ",(0,o.kt)("strong",{parentName:"p"},"metamodello PERM (Policy, Effect, Request, Matchers)"),". Cambiare o aggiornare il meccanismo di autorizzazione per un progetto \xe8 semplice come modificare una configurazione. Puoi personalizzare il tuo modello di controllo degli accessi combinando i modelli disponibili. Ad esempio, puoi combinare ruoli RBAC e attributi ABAC all'interno di un singolo modello e condividere un insieme di regole di policy."),(0,o.kt)("p",null,"Il modello PERM \xe8 composto da quattro fondamenti: Policy, Effect, Request e Matchers. Questi fondamenti descrivono la relazione tra risorse e utenti."),(0,o.kt)("h3",{id:"request"},"Request"),(0,o.kt)("p",null,"Definisce i parametri della richiesta. Una richiesta di base \xe8 un oggetto tupla, che richiede almeno un soggetto (entit\xe0 a cui si accede), un oggetto (risorsa a cui si accede) e un'azione (metodo di accesso)."),(0,o.kt)("p",null,"Ad esempio, una definizione di richiesta potrebbe essere simile a questa:"),(0,o.kt)("p",null,"Questa definizione specifica i nomi dei parametri e l'ordine richiesto dalla funzione di corrispondenza del controllo di accesso."),(0,o.kt)("h3",{id:"policy"},"Policy"),(0,o.kt)("p",null,"Definisce il modello per la strategia di accesso. Specifica il nome e l'ordine dei campi nel documento della regola della Politica."),(0,o.kt)("p",null,"Ad esempio:"),(0,o.kt)("p",null,"Nota: Se eft (risultato della politica) non \xe8 definito, il campo del risultato nel file della politica non verr\xe0 letto e il risultato della politica corrispondente sar\xe0 consentito di default."),(0,o.kt)("h3",{id:"matcher"},"Matcher"),(0,o.kt)("p",null,"Definisce le regole di corrispondenza per la Richiesta e la Policy."),(0,o.kt)("p",null,"Ad esempio: ",(0,o.kt)("inlineCode",{parentName:"p"},"m = r.sub == p.sub && r.act == p.act && r.obj == p.obj")," Il risultato della strategia verr\xe0 salvato in ",(0,o.kt)("inlineCode",{parentName:"p"},"p.eft"),"."),(0,o.kt)("h3",{id:"effect"},"Effect"),(0,o.kt)("p",null,"Esegue una combinazione logica di giudizio sui risultati di corrispondenza dei Matcher."),(0,o.kt)("p",null,"Ad esempio: ",(0,o.kt)("inlineCode",{parentName:"p"},"e = some(where(p.eft == allow))")),(0,o.kt)("p",null,"Questa affermazione significa che se il risultato della strategia di corrispondenza ",(0,o.kt)("inlineCode",{parentName:"p"},"p.eft")," ha il risultato di (alcuni) allow, allora il risultato finale \xe8 vero."),(0,o.kt)("p",null,"Diamo un'occhiata a un altro esempio:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"e = some(where (p.eft == allow)) && !some(where (p.eft == deny))")),(0,o.kt)("p",null,"Il significato logico di questa combinazione di esempio \xe8: se esiste una strategia che corrisponde al risultato di allow e nessuna strategia che corrisponde al risultato di deny, il risultato \xe8 true. In altre parole, \xe8 true quando tutte le strategie corrispondenti sono allow. Se c'\xe8 qualche deny, entrambe sono false (pi\xf9 semplicemente, quando allow e deny esistono contemporaneamente, deny ha la precedenza)."),(0,o.kt)("p",null,"Il modello pi\xf9 basilare e semplice in Casbin \xe8 ACL. Il modello CONF per ACL \xe8 il seguente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"# Request definition\n[request_definition]\nr = sub, obj, act\n\n# Policy definition\n[policy_definition]\np = sub, obj, act\n\n# Policy effect\n[policy_effect]\ne = some(where (p.eft == allow))\n\n# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n\n")),(0,o.kt)("p",null,"Un esempio di policy per il modello ACL \xe8:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, data1, read\np, bob, data2, write\n")),(0,o.kt)("p",null,"Ci\xf2 significa:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"alice pu\xf2 leggere data1"),(0,o.kt)("li",{parentName:"ul"},"bob pu\xf2 scrivere data2")),(0,o.kt)("p",null,"Supportiamo anche la modalit\xe0 multi-linea aggiungendo '' alla fine:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj \\\n  && r.act == p.act\n")),(0,o.kt)("p",null,"Inoltre, se stai utilizzando ABAC, puoi provare l'operatore 'in' come mostrato nell'esempio seguente per l'edizione ",(0,o.kt)("strong",{parentName:"p"},"golang")," di Casbin (jCasbin e Node-Casbin non sono ancora supportati):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"# Matchers\n[matchers]\nm = r.obj == p.obj && r.act == p.act || r.obj in ('data2', 'data3')\n")),(0,o.kt)("p",null,"Ma ",(0,o.kt)("strong",{parentName:"p"},"DEVI")," assicurarti che la lunghezza dell'array sia ",(0,o.kt)("strong",{parentName:"p"},"MAGGIORE")," di ",(0,o.kt)("strong",{parentName:"p"},"1"),", altrimenti causer\xe0 un panico."),(0,o.kt)("p",null,"For more operators, you may take a look at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/casbin/govaluate"},"govaluate"),"."))}u.isMDXComponent=!0}}]);