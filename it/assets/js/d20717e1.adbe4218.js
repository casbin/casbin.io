"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[1634],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(f,r(r({ref:t},c),{},{components:n})):a.createElement(f,r({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3936:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const o={id:"syntax-for-models",title:"Syntax for Models",description:"Sintassi per Modelli",keywords:["syntax"],authors:["nodece"]},r=void 0,l={unversionedId:"syntax-for-models",id:"syntax-for-models",title:"Syntax for Models",description:"Sintassi per Modelli",source:"@site/i18n/it/docusaurus-plugin-content-docs/current/SyntaxForModels.mdx",sourceDirName:".",slug:"/syntax-for-models",permalink:"/it/docs/syntax-for-models",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/SyntaxForModels.mdx",tags:[],version:"current",frontMatter:{id:"syntax-for-models",title:"Syntax for Models",description:"Sintassi per Modelli",keywords:["syntax"],authors:["nodece"]},sidebar:"docs",previous:{title:"Supported Models",permalink:"/it/docs/supported-models"},next:{title:"Effector",permalink:"/it/docs/effector"}},s={},p=[{value:"Definizione della richiesta",id:"definizione-della-richiesta",level:2},{value:"Definizione della Politica",id:"definizione-della-politica",level:2},{value:"Effetto Politica",id:"effetto-politica",level:2},{value:"Corrisponditori",id:"corrisponditori",level:2},{value:"Ordine delle espressioni nei corrisponditori",id:"ordine-delle-espressioni-nei-corrisponditori",level:3},{value:"Tipi di Sezione Multipli",id:"tipi-di-sezione-multipli",level:2},{value:"Grammatica Speciale",id:"grammatica-speciale",level:2},{value:"Valutatore di Espressioni",id:"valutatore-di-espressioni",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},d=c("Tabs"),m=c("TabItem"),u={toc:p};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Una configurazione del modello (CONF) dovrebbe avere almeno quattro sezioni: ",(0,i.kt)("inlineCode",{parentName:"p"},"[request_definition]"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"[policy_definition]"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"[policy_effect]"),", e ",(0,i.kt)("inlineCode",{parentName:"p"},"[matchers]"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Se un modello utilizza il Controllo degli Accessi Basato sui Ruoli (RBAC), dovrebbe includere anche la sezione ",(0,i.kt)("inlineCode",{parentName:"p"},"[role_definition]"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Una configurazione del modello (CONF) pu\xf2 contenere commenti. I commenti iniziano con il simbolo ",(0,i.kt)("inlineCode",{parentName:"p"},"#"),", e tutto ci\xf2 che segue il simbolo ",(0,i.kt)("inlineCode",{parentName:"p"},"#")," sar\xe0 commentato."))),(0,i.kt)("h2",{id:"definizione-della-richiesta"},"Definizione della richiesta"),(0,i.kt)("p",null,"La sezione ",(0,i.kt)("inlineCode",{parentName:"p"},"[request_definition]")," definisce gli argomenti nella funzione ",(0,i.kt)("inlineCode",{parentName:"p"},"e.Enforce(...)"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj, act\n")),(0,i.kt)("p",null,"In questo esempio, ",(0,i.kt)("inlineCode",{parentName:"p"},"sub"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"obj"),", e ",(0,i.kt)("inlineCode",{parentName:"p"},"act")," rappresentano il classico accesso triplo: il soggetto (entit\xe0 che accede), l'oggetto (risorsa acceduta) e l'azione (metodo di accesso). Tuttavia, puoi personalizzare il formato della tua richiesta. Ad esempio, puoi utilizzare ",(0,i.kt)("inlineCode",{parentName:"p"},"sub, act")," se non hai bisogno di specificare una risorsa particolare, oppure ",(0,i.kt)("inlineCode",{parentName:"p"},"sub, sub2, obj, act")," se hai due entit\xe0 di accesso."),(0,i.kt)("h2",{id:"definizione-della-politica"},"Definizione della Politica"),(0,i.kt)("p",null,"Il ",(0,i.kt)("inlineCode",{parentName:"p"},"[policy_definition]")," \xe8 la definizione di una politica. Definisce il significato della politica. Ad esempio, abbiamo il seguente modello:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_definition]\np = sub, obj, act\np2 = sub, act\n")),(0,i.kt)("p",null,"E abbiamo la seguente politica (se in un file di politica):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csv"},"p, alice, data1, read\np2, bob, write-all-objects\n")),(0,i.kt)("p",null,"Ogni riga in una politica \xe8 chiamata regola di politica. Ogni regola di politica inizia con un ",(0,i.kt)("inlineCode",{parentName:"p"},"tipo di politica"),", come ",(0,i.kt)("inlineCode",{parentName:"p"},"p")," o ",(0,i.kt)("inlineCode",{parentName:"p"},"p2"),". Viene utilizzato per abbinare la definizione della politica se ci sono pi\xf9 definizioni. La politica sopra indicata mostra il seguente vincolo. Il vincolo pu\xf2 essere utilizzato nel matcher."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"(alice, data1, read) -> (p.sub, p.obj, p.act)\n(bob, write-all-objects) -> (p2.sub, p2.act)\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Gli elementi in una regola di politica sono sempre considerati come ",(0,i.kt)("inlineCode",{parentName:"p"},"stringhe"),". Se avete domande al riguardo, consultate la discussione al seguente link: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/issues/113"},"https://github.com/casbin/casbin/issues/113"))),(0,i.kt)("h2",{id:"effetto-politica"},"Effetto Politica"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"[policy_effect]")," \xe8 la definizione per l'effetto della politica. Determina se la richiesta di accesso deve essere approvata se pi\xf9 regole di politica corrispondono alla richiesta. Ad esempio, una regola permette e l'altra nega."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = some(where (p.eft == allow))\n")),(0,i.kt)("p",null,"L'effetto della politica sopra indicato significa che se c'\xe8 una qualsiasi regola di politica corrispondente di ",(0,i.kt)("inlineCode",{parentName:"p"},"allow"),", l'effetto finale \xe8 ",(0,i.kt)("inlineCode",{parentName:"p"},"allow")," (noto anche come allow-override). ",(0,i.kt)("inlineCode",{parentName:"p"},"p.eft")," \xe8 l'effetto per una politica, e pu\xf2 essere ",(0,i.kt)("inlineCode",{parentName:"p"},"allow")," o ",(0,i.kt)("inlineCode",{parentName:"p"},"deny"),". \xc8 facoltativo e il valore predefinito \xe8 ",(0,i.kt)("inlineCode",{parentName:"p"},"allow"),". Poich\xe9 non l'abbiamo specificato sopra, utilizza il valore predefinito."),(0,i.kt)("p",null,"Un altro esempio per l'effetto della politica \xe8:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = !some(where (p.eft == deny))\n")),(0,i.kt)("p",null,"Ci\xf2 significa che se non ci sono regole di politica abbinate di ",(0,i.kt)("inlineCode",{parentName:"p"},"deny"),", l'effetto finale \xe8 ",(0,i.kt)("inlineCode",{parentName:"p"},"allow")," (noto anche come deny-override). ",(0,i.kt)("inlineCode",{parentName:"p"},"some")," significa che esiste almeno una regola di politica abbinata. ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," significa che tutte le regole di politica abbinate (non utilizzate qui). L'effetto della politica pu\xf2 persino essere collegato con espressioni logiche:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"[policy_effect]\ne = some(where (p.eft == allow)) && !some(where (p.eft == deny))\n")),(0,i.kt)("p",null,"Ci\xf2 significa che deve esserci almeno una regola di politica abbinata di ",(0,i.kt)("inlineCode",{parentName:"p"},"allow")," e non ci deve essere alcuna regola di politica abbinata di ",(0,i.kt)("inlineCode",{parentName:"p"},"deny"),". Pertanto, in questo modo, sono supportate sia le autorizzazioni allow che deny, e il deny prevale."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Sebbene abbiamo progettato la sintassi dell'effetto della politica come sopra, le implementazioni attuali utilizzano solo effetti di politica hard-coded. Questo \xe8 perch\xe9 abbiamo scoperto che non c'\xe8 molta necessit\xe0 per quel livello di flessibilit\xe0. Quindi, per ora, devi utilizzare uno degli effetti di policy incorporati invece di personalizzare il tuo.")),(0,i.kt)("p",null,"Gli effetti di policy incorporati supportati sono:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Effetto di Policy"),(0,i.kt)("th",{parentName:"tr",align:null},"Significato"),(0,i.kt)("th",{parentName:"tr",align:null},"Esempio"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"some(where (p.eft == allow))"),(0,i.kt)("td",{parentName:"tr",align:null},"allow-override"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"ACL, RBAC, ecc."))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"!some(where (p.eft == deny))"),(0,i.kt)("td",{parentName:"tr",align:null},"negazione-sovraordinata"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Negazione-sovraordinata"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"alcuni(dove (p.eft == allow)) && !alcuni(dove (p.eft == deny))"),(0,i.kt)("td",{parentName:"tr",align:null},"allow-e-deny"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Allow-e-deny"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"priorit\xe0(p.eft) ","|","|"," deny"),(0,i.kt)("td",{parentName:"tr",align:null},"priorit\xe0"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Priorit\xe0"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"priorit\xe0Soggetto(p.eft)"),(0,i.kt)("td",{parentName:"tr",align:null},"priorit\xe0 basata sul ruolo"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/supported-models#examples"},"Priorit\xe0-Soggetto"))))),(0,i.kt)("h2",{id:"corrisponditori"},"Corrisponditori"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"[corrisponditori]")," \xe8 la definizione per i corrisponditori di policy. I corrisponditori sono espressioni che definiscono come le regole di policy vengono valutate rispetto alla richiesta."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n")),(0,i.kt)("p",null,"Il corrisponditore sopra \xe8 il pi\xf9 semplice e significa che il soggetto, l'oggetto e l'azione in una richiesta devono corrispondere a quelli in una regola di policy."),(0,i.kt)("p",null,"Operatori aritmetici come ",(0,i.kt)("inlineCode",{parentName:"p"},"+, -, *, /")," e operatori logici come ",(0,i.kt)("inlineCode",{parentName:"p"},"&&, ||, !")," possono essere utilizzati nei corrisponditori."),(0,i.kt)("h3",{id:"ordine-delle-espressioni-nei-corrisponditori"},"Ordine delle espressioni nei corrisponditori"),(0,i.kt)("p",null,"L'ordine delle espressioni pu\xf2 influenzare notevolmente le prestazioni. Dai un'occhiata all'esempio seguente per maggiori dettagli:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'const rbac_models = `\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n`\n\nfunc TestManyRoles(t *testing.T) {\n\n    m, _ := model.NewModelFromString(rbac_models)\n    e, _ := NewEnforcer(m, false)\n\n    roles := []string{"admin", "manager", "developer", "tester"}\n\n    // 2500 projects\n    for nbPrj := 1; nbPrj < 2500; nbPrj++ {\n        // 4 objects and 1 role per object (so 4 roles)\n        for _, role := range roles {\n            roleDB := fmt.Sprintf("%s_project:%d", role, nbPrj)\n            objectDB := fmt.Sprintf("/projects/%d", nbPrj)\n            e.AddPolicy(roleDB, objectDB, "GET")\n        }\n        jasmineRole := fmt.Sprintf("%s_project:%d", roles[1], nbPrj)\n        e.AddGroupingPolicy("jasmine", jasmineRole)\n    }\n\n    e.AddGroupingPolicy("abu", "manager_project:1")\n    e.AddGroupingPolicy("abu", "manager_project:2499")\n\n    // With same number of policies\n    // User \'abu\' has only two roles\n    // User \'jasmine\' has many roles (1 role per policy, here 2500 roles)\n\n    request := func(subject, object, action string) {\n        t0 := time.Now()\n        resp, _ := e.Enforce(subject, object, action)\n        tElapse := time.Since(t0)\n        t.Logf("RESPONSE %-10s %s\\t %s : %5v IN: %+v", subject, object, action, resp, tElapse)\n        if tElapse > time.Millisecond*100 {\n            t.Errorf("More than 100 milliseconds for %s %s %s : %+v", subject, object, action, tElapse)\n        }\n    }\n\n    request("abu", "/projects/1", "GET")        // really fast because only 2 roles in all policies and at the beginning of the casbin_rule table\n    request("abu", "/projects/2499", "GET")     // fast because only 2 roles in all policies\n    request("jasmine", "/projects/1", "GET")    // really fast at the beginning of the casbin_rule table\n\n    request("jasmine", "/projects/2499", "GET") // slow and fails the only 1st time   <<<< pb here\n    request("jasmine", "/projects/2499", "GET") // fast maybe due to internal cache mechanism\n\n    // same issue with non-existing roles\n    // request("jasmine", "/projects/999999", "GET") // slow fails the only 1st time   <<<< pb here\n    // request("jasmine", "/projects/999999", "GET") // fast maybe due to internal cache mechanism\n}\n')),(0,i.kt)("p",null,"Il tempo di applicazione potrebbe essere molto lungo, fino a 6 secondi."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go test -run ^TestManyRoles$ github.com/casbin/casbin/v2 -v\n\n=== RUN   TestManyRoles\n    rbac_api_test.go:598: RESPONSE abu        /projects/1        GET :  true IN: 438.379\xb5s\n    rbac_api_test.go:598: RESPONSE abu        /projects/2499     GET :  true IN: 39.005173ms\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/1        GET :  true IN: 1.774319ms\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/2499     GET :  true IN: 6.164071648s\n    rbac_api_test.go:600: More than 100 milliseconds for jasmine /projects/2499 GET : 6.164071648s\n    rbac_api_test.go:598: RESPONSE jasmine    /projects/2499     GET :  true IN: 12.164122ms\n--- FAIL: TestManyRoles (6.24s)\nFAIL\nFAIL    github.com/casbin/casbin/v2     6.244s\nFAIL\n")),(0,i.kt)("p",null,"Tuttavia, se modifichiamo l'ordine delle espressioni nei matcher e mettiamo le espressioni pi\xf9 dispendiose in termini di tempo, come le funzioni, dietro, il tempo di esecuzione sar\xe0 molto breve."),(0,i.kt)("p",null,"Cambiando l'ordine delle espressioni nei matcher nell'esempio sopra a:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"[matchers]\nm = r.obj == p.obj && g(r.sub, p.sub) && r.act == p.act\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go test -run ^TestManyRoles$ github.com/casbin/casbin/v2 -v\n=== RUN   TestManyRoles\n    rbac_api_test.go:599: RESPONSE abu        /projects/1        GET :  true IN: 786.635\xb5s\n    rbac_api_test.go:599: RESPONSE abu        /projects/2499     GET :  true IN: 4.933064ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/1        GET :  true IN: 2.908534ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/2499     GET :  true IN: 7.292963ms\n    rbac_api_test.go:599: RESPONSE jasmine    /projects/2499     GET :  true IN: 6.168307ms\n--- PASS: TestManyRoles (0.05s)\nPASS\nok      github.com/casbin/casbin/v2     0.053s\n")),(0,i.kt)("h2",{id:"tipi-di-sezione-multipli"},"Tipi di Sezione Multipli"),(0,i.kt)("p",null,"Se hai bisogno di definizioni di policy multiple o matcher multipli, puoi usare ",(0,i.kt)("inlineCode",{parentName:"p"},"p2")," o ",(0,i.kt)("inlineCode",{parentName:"p"},"m2")," come esempi. In effetti, tutte e quattro le sezioni menzionate sopra possono utilizzare tipi multipli, e la sintassi \xe8 ",(0,i.kt)("inlineCode",{parentName:"p"},"r")," seguito da un numero, come ",(0,i.kt)("inlineCode",{parentName:"p"},"r2")," o ",(0,i.kt)("inlineCode",{parentName:"p"},"e2"),". Di default, queste quattro sezioni dovrebbero corrispondere uno-a-uno. Ad esempio, la tua sezione ",(0,i.kt)("inlineCode",{parentName:"p"},"r2")," utilizzer\xe0 solo il matcher ",(0,i.kt)("inlineCode",{parentName:"p"},"m2")," per abbinare le policy ",(0,i.kt)("inlineCode",{parentName:"p"},"p2"),"."),(0,i.kt)("p",null,"Puoi passare un ",(0,i.kt)("inlineCode",{parentName:"p"},"EnforceContext")," come primo parametro del metodo ",(0,i.kt)("inlineCode",{parentName:"p"},"enforce")," per specificare i tipi. L'",(0,i.kt)("inlineCode",{parentName:"p"},"EnforceContext")," \xe8 definito come segue:"),(0,i.kt)(d,{groupId:"langs",mdxType:"Tabs"},(0,i.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'EnforceContext{"r2","p2","e2","m2"}\ntype EnforceContext struct {\n    RType string\n    PType string\n    EType string\n    MType string\n}\n'))),(0,i.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const enforceContext = new EnforceContext('r2', 'p2', 'e2', 'm2');\nclass EnforceContext {\n  constructor(rType, pType, eType, mType) {\n    this.pType = pType;\n    this.eType = eType;\n    this.mType = mType;\n    this.rType = rType;\n  }\n}\n"))),(0,i.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'EnforceContext enforceContext = new EnforceContext("2");\npublic class EnforceContext {\n    private String pType;\n    private String eType;\n    private String mType;\n    private String rType;\n    public EnforceContext(String suffix) {\n      this.pType = "p" + suffix;\n      this.eType = "e" + suffix;\n      this.mType = "m" + suffix;\n      this.rType = "r" + suffix;\n    }\n}\n')))),(0,i.kt)("p",null,"Ecco un esempio di utilizzo. Si prega di fare riferimento al ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/master/examples/multiple_policy_definitions_model.conf"},"modello")," e alla ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/master/examples/multiple_policy_definitions_policy.csv"},"policy"),". La richiesta \xe8 la seguente:"),(0,i.kt)(d,{groupId:"langs",mdxType:"Tabs"},(0,i.kt)(m,{value:"Go",label:"Go",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nenforceContext := NewEnforceContext("2")\n// You can also specify a certain type individually\nenforceContext.EType = "e"\n// Don\'t pass in EnforceContext; the default is r, p, e, m\ne.Enforce("alice", "data2", "read")        // true\n// Pass in EnforceContext\ne.Enforce(enforceContext, struct{ Age int }{Age: 70}, "/data1", "read")        //false\ne.Enforce(enforceContext, struct{ Age int }{Age: 30}, "/data1", "read")        //true\n'))),(0,i.kt)(m,{value:"Node.js",label:"Node.js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nconst enforceContext = new NewEnforceContext(\'2\');\n\n// You can also specify a certain type individually\nenforceContext.eType = "e"\n\n// Don\'t pass in EnforceContext; the default is r, p, e, m\ne.Enforce("alice", "data2", "read")        // true\n\n// Pass in EnforceContext\ne.Enforce(enforceContext, {Age: 70}, "/data1", "read")        //false\ne.Enforce(enforceContext, {Age: 30}, "/data1", "read")        //true\n'))),(0,i.kt)(m,{value:"Java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nEnforceContext enforceContext = new EnforceContext("2");\n// You can also specify a certain type individually\nenforceContext.seteType("e");\n// Don\'t pass in EnforceContext; the default is r, p, e, m\ne.enforce("alice", "data2", "read");  // true\n// Pass in EnforceContext\n// TestEvalRule is located in https://github.com/casbin/jcasbin/blob/master/src/test/java/org/casbin/jcasbin/main/AbacAPIUnitTest.java#L56\ne.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule("alice", 70), "/data1", "read"); // false\ne.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule("alice", 30), "/data1", "read"); // true\n')))),(0,i.kt)("h2",{id:"grammatica-speciale"},"Grammatica Speciale"),(0,i.kt)("p",null,"Potresti anche utilizzare l'operatore \"in\", che \xe8 l'unico operatore con un nome testuale. Questo operatore verifica l'array sul lato destro per vedere se contiene un valore uguale al valore sul lato sinistro. L'uguaglianza \xe8 determinata utilizzando l'operatore ==, e questa libreria non verifica i tipi tra i valori. Fintanto che due valori possono essere convertiti in interface{} e possono ancora essere verificati per l'uguaglianza con ==, si comporteranno come previsto. Nota che puoi utilizzare un parametro per l'array, ma deve essere un []interface{}."),(0,i.kt)("p",null,"Fare anche riferimento a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/rbac_model_matcher_using_in_op.conf"},"rbac","_","model","_","matcher","_","using","_","in","_","op"),", ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/keyget2_model.conf"},"keyget2","_","model"),", e ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/casbin/casbin/blob/277c1a2b85698272f764d71a94d2595a8d425915/examples/keyget_model.conf"},"keyget","_","model"),"."),(0,i.kt)("p",null,"Esempio:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, obj\n...\n[matchers]\nm = r.sub.Name in (r.obj.Admins)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'e.Enforce(Sub{Name: "alice"}, Obj{Name: "a book", Admins: []interface{}{"alice", "bob"}})\n')),(0,i.kt)("h2",{id:"valutatore-di-espressioni"},"Valutatore di Espressioni"),(0,i.kt)("p",null,"La valutazione del matcher in Casbin \xe8 implementata da valutatori di espressioni in ogni linguaggio. Casbin integra i loro poteri per fornire il linguaggio PERM unificato. Oltre alla sintassi del modello fornita qui, questi valutatori di espressioni potrebbero offrire funzionalit\xe0 extra che potrebbero non essere supportate da un altro linguaggio o implementazione. Si prega di fare attenzione quando si utilizza questa funzionalit\xe0."),(0,i.kt)("p",null,"I valutatori di espressioni utilizzati da ogni implementazione di Casbin sono i seguenti:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Implementazione"),(0,i.kt)("th",{parentName:"tr",align:null},"Linguaggio"),(0,i.kt)("th",{parentName:"tr",align:null},"Valutatore di Espressioni"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Casbin"),(0,i.kt)("td",{parentName:"tr",align:null},"Golang"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/casbin/govaluate"},"https://github.com/casbin/govaluate"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"jCasbin"),(0,i.kt)("td",{parentName:"tr",align:null},"Java"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/killme2008/aviatorscript"},"https://github.com/killme2008/aviatorscript"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Node-Casbin"),(0,i.kt)("td",{parentName:"tr",align:null},"Node.js"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/donmccurdy/expression-eval"},"https://github.com/donmccurdy/expression-eval"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"PHP-Casbin"),(0,i.kt)("td",{parentName:"tr",align:null},"PHP"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/symfony/expression-language"},"https://github.com/symfony/expression-language"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"PyCasbin"),(0,i.kt)("td",{parentName:"tr",align:null},"Python"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/danthedeckie/simpleeval"},"https://github.com/danthedeckie/simpleeval"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Casbin.NET"),(0,i.kt)("td",{parentName:"tr",align:null},"C#"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/davideicardi/DynamicExpresso"},"https://github.com/davideicardi/DynamicExpresso"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Casbin4D"),(0,i.kt)("td",{parentName:"tr",align:null},"Delphi"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/casbin4d/Casbin4D/tree/master/SourceCode/Common/Third%20Party/TExpressionParser"},"https://github.com/casbin4d/Casbin4D/tree/master/SourceCode/Common/Third%20Party/TExpressionParser"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"casbin-rs"),(0,i.kt)("td",{parentName:"tr",align:null},"Rust"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/jonathandturner/rhai"},"https://github.com/jonathandturner/rhai"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"casbin-cpp"),(0,i.kt)("td",{parentName:"tr",align:null},"C++"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/ArashPartow/exprtk"},"https://github.com/ArashPartow/exprtk"))))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Se riscontri un problema di prestazioni con Casbin, \xe8 probabile che sia causato dall'inefficienza dell'evaluator di espressioni. Puoi risolvere il problema contattando direttamente Casbin o l'evaluator di espressioni per consigli su come migliorare le prestazioni. Per maggiori dettagli, consulta la sezione ",(0,i.kt)("a",{parentName:"p",href:"/docs/benchmark"},"Benchmark"),".")))}f.isMDXComponent=!0}}]);