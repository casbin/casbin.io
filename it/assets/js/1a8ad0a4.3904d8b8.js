"use strict";(self.webpackChunkcasbin_website_v2=self.webpackChunkcasbin_website_v2||[]).push([[2869],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,u=d["".concat(c,".").concat(m)]||d[m]||g[m]||o;return n?r.createElement(u,i(i({ref:t},p),{},{components:n})):r.createElement(u,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8430:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={id:"orbac",title:"OrBAC",description:"Organisation-Based Access Control model in Casbin",keywords:["orbac","organisation-based access control","organizational access control","role abstraction"],authors:["casbin"]},i=void 0,s={unversionedId:"orbac",id:"orbac",title:"OrBAC",description:"Organisation-Based Access Control model in Casbin",source:"@site/i18n/it/docusaurus-plugin-content-docs/current/OrBAC.mdx",sourceDirName:".",slug:"/orbac",permalink:"/it/docs/orbac",draft:!1,editUrl:"https://github.com/casbin/casbin-website-v2/edit/master/docs/OrBAC.mdx",tags:[],version:"current",frontMatter:{id:"orbac",title:"OrBAC",description:"Organisation-Based Access Control model in Casbin",keywords:["orbac","organisation-based access control","organizational access control","role abstraction"],authors:["casbin"]},sidebar:"docs",previous:{title:"LBAC",permalink:"/it/docs/lbac"},next:{title:"Priority Model",permalink:"/it/docs/priority-model"}},c={},l=[{value:"What is the OrBAC model?",id:"what-is-the-orbac-model",level:2},{value:"OrBAC Model Definition",id:"orbac-model-definition",level:2},{value:"Policy Examples",id:"policy-examples",level:2},{value:"Code Example",id:"code-example",level:2},{value:"Benefits",id:"benefits",level:2}],p={toc:l};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"what-is-the-orbac-model"},"What is the OrBAC model?"),(0,a.kt)("p",null,"OrBAC stands for Organisation-Based Access Control. It extends traditional RBAC by introducing abstraction layers that separate concrete entities from abstract security policies. This separation enables more flexible and maintainable access control across multiple organizations."),(0,a.kt)("p",null,"In OrBAC, access decisions rely on three key abstraction mappings within an organizational context:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Empower"),": Maps subjects (users) to roles within organizations"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Use"),": Maps concrete actions to abstract activities within organizations"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Consider"),": Maps concrete objects to abstract views within organizations")),(0,a.kt)("p",null,"These abstractions allow you to define policies using roles, activities, and views instead of concrete subjects, actions, and objects. This makes policies organization-specific while remaining independent of the actual entities."),(0,a.kt)("h2",{id:"orbac-model-definition"},"OrBAC Model Definition"),(0,a.kt)("p",null,"Here's the OrBAC model configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"[request_definition]\nr = sub, org, obj, act\n\n[policy_definition]\np = role, activity, view, org\n\n[role_definition]\ng = _, _, _\ng2 = _, _, _\ng3 = _, _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.role, r.org) && g2(r.act, p.activity, r.org) && g3(r.obj, p.view, r.org) && r.org == p.org\n")),(0,a.kt)("p",null,"In this model:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g(r.sub, p.role, r.org)")," checks if the subject has the role in the organization (Empower)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g2(r.act, p.activity, r.org)")," checks if the action corresponds to the activity in the organization (Use)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g3(r.obj, p.view, r.org)")," checks if the object belongs to the view in the organization (Consider)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"r.org == p.org")," ensures the organization context matches")),(0,a.kt)("h2",{id:"policy-examples"},"Policy Examples"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Permission rules")," define which roles can perform which activities on which views within an organization:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csv"},"# Permission: role, activity, view, organization\np, manager, modify, document, org1\np, manager, consult, document, org1\np, employee, consult, document, org1\np, manager, modify, report, org2\np, manager, consult, report, org2\np, employee, consult, report, org2\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Empower rules")," assign subjects to roles within organizations:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csv"},"# Empower: subject, role, organization\ng, alice, manager, org1\ng, bob, employee, org1\ng, charlie, manager, org2\ng, david, employee, org2\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use rules")," map concrete actions to abstract activities:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csv"},"# Use: action, activity, organization\ng2, write, modify, org1\ng2, read, consult, org1\ng2, write, modify, org2\ng2, read, consult, org2\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Consider rules")," map concrete objects to abstract views:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csv"},"# Consider: object, view, organization\ng3, data1, document, org1\ng3, data2, document, org1\ng3, report1, report, org2\ng3, report2, report, org2\n")),(0,a.kt)("h2",{id:"code-example"},"Code Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/casbin/casbin/v2"\n\ne, _ := casbin.NewEnforcer("examples/orbac_model.conf", "examples/orbac_policy.csv")\n\n// alice is a manager in org1, can read and write documents\nok, _ := e.Enforce("alice", "org1", "data1", "read")   // true\nok, _ = e.Enforce("alice", "org1", "data1", "write")   // true\n\n// bob is an employee in org1, can only read documents\nok, _ = e.Enforce("bob", "org1", "data1", "read")      // true\nok, _ = e.Enforce("bob", "org1", "data1", "write")     // false\n\n// charlie is a manager in org2, can read and write reports\nok, _ = e.Enforce("charlie", "org2", "report1", "read")   // true\nok, _ = e.Enforce("charlie", "org2", "report1", "write")  // true\n\n// Cross-organization access is denied\nok, _ = e.Enforce("alice", "org2", "report1", "read")  // false\nok, _ = e.Enforce("charlie", "org1", "data1", "read")  // false\n')),(0,a.kt)("h2",{id:"benefits"},"Benefits"),(0,a.kt)("p",null,"OrBAC provides several advantages over traditional access control models:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Abstraction"),": Policies are defined using abstract security entities (roles, activities, views) rather than concrete ones, making them easier to maintain and adapt"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Organization Context"),": Each organization can have its own policies and mappings while sharing the same underlying security model"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Flexibility"),": You can change concrete entity mappings without modifying the core security policies"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scalability"),": The abstraction layers reduce policy complexity in multi-organizational environments")))}g.isMDXComponent=!0}}]);